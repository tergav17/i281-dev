00/00:          ; DOSDEF.S
01/80:          ; THIS FILE CONTAINS IMPORTANT DEFINES USED IN DOS/281
01/80:          ; GAVIN TERSTEEG, 2024
01/80:          ; SDMAY24-14
01/80:          
01/80:          ; BIOS CALLS
01/80:          BOOT	= 0
01/80:          ALTBOOT = 1
01/80:          INDIR	= 2
01/80:          IRET	= 3
01/80:          SYSCALL	= 4
01/80:          SYSJUMP	= 5
01/80:          PRGM	= 6
01/80:          IWRITE	= 7
01/80:          ZSTART	= 8
01/80:          
01/80:          HALT	= 0X7F
01/80:          
01/80:          ; SYSTEM CALLS
01/80:          S_EXIT	= 0
01/80:          S_PUTC	= 1
01/80:          S_GETC	= 2
01/80:          S_STAT	= 3
01/80:          S_PUTS	= 4
01/80:          S_INPUT	= 5
01/80:          S_OPEN	= 6
01/80:          S_CLOSE	= 7
01/80:          S_READ	= 8
01/80:          S_WRITE	= 9
01/80:          S_FSRCH	= 10
01/80:          S_NEXT	= 11
01/80:          S_DELET	= 12
01/80:          S_CREAT	= 13
01/80:          S_FREE	= 14
01/80:          S_EXEC	= 15
01/80:          
01/80:          ; MEMORY AREAS
01/80:          CF_NAME	= 0X60
01/80:          CF_SIZE	= 0X68
01/80:          CF_USR	= 0X6A
01/80:          DFT_USR	= 0X6B
01/80:          ARG_BNK	= 0X6C
01/80:          BD_FREE	= 0X6E
01/80:          MAX_IB	= 0X70
01/80:          MAX_DB	= 0X71
01/80:          CMDL_B	= 0X72
01/80:          AUTO_B	= 0X73
01/80:          KERNMEM	= 0X78
01/80:          BIOSMEM	= 0X7C
01/80:          AU_RUN	= 0X00
01/80:          AU_PNTR	= 0X01
01/80:          AU_BANK	= 0X02
01/80:          AU_BLK	= 0X03
01/80:          AU_UA	= 0X04
01/80:          AU_FILE	= 0X06
01/80:          AU_MISC	= 0X18
01/80:          
01/80:          ; DATA BANK ADDRESS
01/80:          DBANK	= 0X80		
01/80:          
01/80:          
01/80:          ; AS0.S
01/80:          ; ASSEMBLER BACKBONE
01/80:          ; GAVIN TERSTEEG, 2024
01/80:          ; SDMAY24-14
01/80:          
01/80:          ; BANK ALLOCATION STUFF
01/80:          BI	= 1
01/80:          BD	= 1
01/80:          
01/80:          ; MAXIMUM ARGUMENTS
01/80:          MAXARGS	= 13
01/80:          
01/80:          .TEXT
01/80:          .BANK	BI
01/80:          CORE0_B	= BI
01/80:          
01/80:          	; START BY PROCESSING THE ARGUMENTS
01/80: 3000     START:	LOADI	A,0
01/81: A080     	STORE	[DBANK],A
01/83:          	
01/82:          	; RESET ARG STATE
01/82: A000     	STORE	[ARGC],A
01/83: A00F     	STORE	[LFLAG],A
01/85:          	
01/84:          	; SET UP STACK
01/84: 3C5E     	LOADI	D,0X60-2
01/86:          	
01/85:          	; SYSCALL RETURN BANK
01/85: 3801     	LOADI	C,BI
01/86: BB01     	STOREF	[D+1],C
01/88:          	
01/87:          	; SET UP POINTER
01/87: 3800     	LOADI	C,0
01/89:          	
01/88:          	; GO TO ARGUMENT BANK
01/88: 8072     0:	LOAD	A,[CMDL_B]
01/89: A06C     	STORE	[ARG_BNK],A
01/8A: A080     	STORE	[DBANK],A
01/8C:          
01/8B:          	; SKIP THE CURRENT ARGUMENT
01/8B: 9200     1:	LOADF	A,[C]
01/8C: 3420     	LOADI	B,0X20
01/8D: D100     	CMP	A,B
01/8E: F902     	BRBE	2F
01/8F: 5801     	ADDI	C,1
01/90: FFFA     	JUMP	1B
01/92:          
01/91:          	; LOOK FOR AN ARGUMENT
01/91: 9200     2:	LOADF	A,[C]
01/92: 5000     	ADDI	A,0
01/93: F630     	BRZ	ARGDONE
01/94: D100     	CMP	A,B
01/95: F802     	BRA	3F
01/96: 5801     	ADDI	C,1
01/97: FFF9     	JUMP	2B
01/99:          
01/98:          	; IS IT A FLAG?
01/98: 342D     3:	LOADI	B,'-'
01/99: D100     	CMP	A,B
01/9A: F714     	BRNZ	5F
01/9C:          	
01/9B:          	; HANDLE FLAGS HERE	
01/9B: 5801     4:	ADDI	C,1
01/9C: 9200     	LOADF	A,[C]
01/9D: 5000     	ADDI	A,0
01/9E: F625     	BRZ	ARGDONE
01/9F: 3420     	LOADI	B,0X20
01/A0: D100     	CMP	A,B
01/A1: F9EF     	BRBE	2B
01/A3:          	
01/A2:          	; REGISTER THE FLAG
01/A2: 3400     	LOADI	B,0
01/A3: A480     	STORE	[DBANK],B
01/A5:          	
01/A4: 704C     	SUBI	A,'L'
01/A5: F701     	BRNZ	@+2
01/A6: 340F     	LOADI	B,LFLAG
01/A8:          	
01/A7:          	; IS IT A RECOGNIZED FLAG?
01/A7: 5400     	ADDI	B,0
01/A8: F60F     	BRZ	ARGBAD
01/A9: 3001     	LOADI	A,1
01/AA: B100     	STOREF	[B],A
01/AC:          
01/AB:          	; THERE MAY BE ANOTHER FLAG
01/AB: 8472     	LOAD	B,[CMDL_B]
01/AC: A46C     	STORE	[ARG_BNK],B
01/AD: A480     	STORE	[DBANK],B
01/AE: FFEC     	JUMP	4B
01/B0:          
01/AF:          	; SAVE THE ARGUMENT
01/AF: 3400     5:	LOADI	B,0
01/B0: A480     	STORE	[DBANK],B
01/B1: 8400     	LOAD	B,[ARGC]
01/B2: B901     	STOREF	[B+ARGV],C
01/B4:          	
01/B3:          	; DID WE EXCEED THE ALLOWED NUMBER OF ARGUMENTS
01/B3: 740D     	SUBI	B,MAXARGS
01/B4: F003     	BRC	ARGBAD
01/B5: 540E     	ADDI	B,MAXARGS+1
01/B6: A400     	STORE	[ARGC],B
01/B7: FFD0     	JUMP	0B
01/B9:          	
01/B8:          	; BAD ARGUMENT
01/B8: 3000     ARGBAD:	LOADI	A,0
01/B9: A080     	STORE	[DBANK],A
01/BB:          	
01/BA: 3001     	LOADI	A,ERR0_B
01/BB: A06C     	STORE	[ARG_BNK],A
01/BC: 3000     	LOADI	A,ERROR00
01/BE:          	
01/BD:          	; PRINT ERROR MESSAGE
01/BD: 3801     PRNTERR:LOADI	C,BI
01/BE: BB01     	STOREF	[D+1],C
01/BF: 3404     	LOADI	B,S_PUTS
01/C0: 38D0     	LOADI	C,EXIT
01/C1: FF42     	JUMP	SYSCALL	
01/C3:          
01/C2:          	; EXIT PROGRAM
01/C2: 3400     EXIT:	LOADI	B,0
01/C3: FF41     	JUMP	SYSJUMP
01/C5:          	
01/C4:          	; ARGUMENT PROCESSING DONE
01/C4: 3000     ARGDONE:LOADI	A,0
01/C5: A080     	STORE	[DBANK],A
01/C7:          	
01/C6:          	; CHECK ARG COUNT
01/C6: 8000     	LOAD	A,[ARGC]
01/C7: 5000     	ADDI	A,0
01/C8: F6EF     	BRZ	ARGBAD
01/CA:          	
01/C9:          	; RESET PASS TO FIRST
01/C9: 3000     	LOADI	A,0
01/CA: A044     	STORE	[PASS],A
01/CC:          	
01/CB:          	; SET NEXT FREE TO HEAP
01/CB: 300A     	LOADI	A,HEAP
01/CC: A04C     	STORE	[NFREE],A
01/CE:          	
01/CD:          	; BEGIN ASSEMBLY
01/CD: 3403     	LOADI	B,MAIN0_B
01/CE: 3880     	LOADI	C,DOPASS
01/CF: FF32     	JUMP	INDIR
01/D1:          
01/D0:          	; EXIT PROGRAM
01/D0: 3400     EXIT:	LOADI	B,S_EXIT
01/D1: FF33     	JUMP	SYSJUMP
01/D3:          	
01/D2:          	; DO AN ERROR
01/D2:          	; A = ERROR #
01/D2:          ERRNO	= OPERAND
01/D2: 3400     ERROR:	LOADI	B,0
01/D3: A480     	STORE	[DBANK],B
01/D4: A014     	STORE	[ERRNO],A
01/D5: 3402     	LOADI	B,PRNT0_B
01/D6: 3880     	LOADI	C,PERHEAD
01/D7: FF2A     	JUMP	INDIR
01/D9:          
01/D8:          BI	= BI+1
01/D8:          .TEXT
01/D8:          .BANK	BI
02/80:          PRNT0_B	= BI
02/80:          
02/80:          	; PRINTS THE ERROR HEADER
02/80:          	; THE CURRENTLY OPEN FILE AND LINE NUMBER WILL BE PRINTED
02/80:          	; FORMAT: '[FILE]:[LINE]: ERROR'
02/80: 3802     PERHEAD:LOADI	C,BI
02/81: BB01     	STOREF	[D+1],C
02/83:          	
02/82:          	; PRINT CURRENTLY OPEN FILE
02/82: 8047     	LOAD	A,[CURRFIL]
02/83: 9001     	LOADF	A,[A+ARGV]
02/85:          
02/84:          	; PRINT LOOP
02/84: A038     0:	STORE	[BUFPNTR],A
02/85: 8472     	LOAD	B,[CMDL_B]
02/86: A480     	STORE	[DBANK],B
02/87: 9000     	LOADF	A,[A]
02/88: 3400     	LOADI	B,0
02/89: A480     	STORE	[DBANK],B
02/8A: 3420     	LOADI	B,0X20
02/8B: D100     	CMP	A,B
02/8C: F906     	BRBE	1F
02/8D: 3401     	LOADI	B,S_PUTC
02/8E: 3890     	LOADI	C,@+2
02/8F: FF74     	JUMP	SYSCALL
02/90: 8038     	LOAD	A,[BUFPNTR]
02/91: 5001     	ADDI	A,1
02/92: FFF1     	JUMP	0B
02/94:          	
02/93:          	; PRINT ':'
02/93: 303A     1:	LOADI	A,':'
02/94: 3401     	LOADI	B,S_PUTC
02/95: 3897     	LOADI	C,@+2
02/96: FF6D     	JUMP	SYSCALL
02/98:          	
02/97:          	; PRINT LINE NUMBER
02/97: 8045     	LOAD	A,[LINENUM]
02/98: A012     	STORE	[VALUE],A
02/99: 8046     	LOAD	A,[LINENUM+1]
02/9A: A013     	STORE	[VALUE+1],A
02/9B: 389E     	LOADI	C,@+3
02/9C: BB00     	STOREF	[D],C
02/9D: FF16     	JUMP	PRINTD
02/9F:          	
02/9E:          	; PRINT ':' + SPACE
02/9E: 303A     	LOADI	A,':'
02/9F: 3401     	LOADI	B,S_PUTC
02/A0: 38A2     	LOADI	C,@+2
02/A1: FF62     	JUMP	SYSCALL
02/A2: 3020     	LOADI	A,0X20
02/A3: 3401     	LOADI	B,S_PUTC
02/A4: 38A6     	LOADI	C,@+2
02/A5: FF5E     	JUMP	SYSCALL
02/A7:          	
02/A6:          	; LOOKUP ERROR ON TABLE
02/A6: 8014     	LOAD	A,[ERRNO]
02/A7: 7080     	SUBI	A,0X80
02/A8: 4000     	SHIFTL	A
02/A9: 5034     	ADDI	A,ETABLE
02/AA: 3801     	LOADI	C,ERR0_B
02/AB: A880     	STORE	[DBANK],C
02/AC: 9400     	LOADF	B,[A]
02/AD: 9001     	LOADF	A,[A+1]
02/AE: 3800     	LOADI	C,0
02/AF: A880     	STORE	[DBANK],C
02/B0: A46C     	STORE	[ARG_BNK],B
02/B1: 3401     	LOADI	B,CORE0_B
02/B2: 38BD     	LOADI	C,PRNTERR
02/B3: FF4E     	JUMP	INDIR
02/B5:          	
02/B4:          
02/B4:          	; PRINTS VARIABLE [VALUE] AS A 16 BIT BASE-10 NUMBER
02/B4:          PADDING	= TEMP
02/B4:          LEAFRET	= TEMP+1
02/B4: 7C02     PRINTD: SUBI	D,2
02/B6:          	
02/B5:          	; SET PADDING TO NULL CHARACTER AT FIRST
02/B5: 3800     	LOADI	C,0
02/B6: A816     	STORE	[PADDING],C
02/B8:          	
02/B7:          V	= 10000
02/B7: 3027     	LOADI	A,V/256
02/B8: 3410     	LOADI	B,V%256
02/B9: 38BB     	LOADI	C,@+2
02/BA: FF14     	JUMP	DOCHAR
02/BC:          	
02/BB:          V	= 1000
02/BB: 3003     	LOADI	A,V/256
02/BC: 34E8     	LOADI	B,V%256
02/BD: 38BF     	LOADI	C,@+2
02/BE: FF10     	JUMP	DOCHAR
02/C0:          	
02/BF:          V	= 100
02/BF: 3000     	LOADI	A,V/256
02/C0: 3464     	LOADI	B,V%256
02/C1: 38C3     	LOADI	C,@+2
02/C2: FF0C     	JUMP	DOCHAR
02/C4:          	
02/C3:          V	= 10
02/C3: 3000     	LOADI	A,V/256
02/C4: 340A     	LOADI	B,V%256
02/C5: 38C7     	LOADI	C,@+2
02/C6: FF08     	JUMP	DOCHAR
02/C8:          	
02/C7: 3030     	LOADI	A,'0'
02/C8: A016     	STORE	[PADDING],A
02/CA:          	
02/C9:          V	= 1
02/C9: 3000     	LOADI	A,V/256
02/CA: 3401     	LOADI	B,V%256
02/CB: 38CD     	LOADI	C,@+2
02/CC: FF02     	JUMP	DOCHAR
02/CE:          	
02/CD: 5C02     	ADDI	D,2 
02/CE: FF34     	JUMP	IRET
02/D0:          	
02/CF:          	; A = UPPER SUB
02/CF:          	; B = LOWER SUB
02/CF: A817     DOCHAR:	STORE	[LEAFRET],C
02/D0: 8816     	LOAD	C,[PADDING]	
02/D1: A811     	STORE	[CHAR],C
02/D3:          	
02/D2:          	; PARK THE STACK
02/D2: AC10     	STORE	[SPARK],D
02/D4:          
02/D3:          	; GET THE SIZE
02/D3: 8812     0:	LOAD	C,[VALUE]
02/D4: 8C13     	LOAD	D,[VALUE+1]
02/D6:          	
02/D5:          	; DO 16 BIT SUBTRACTION
02/D5: 6D00     1:	SUB	D,B
02/D6: F002     	BRC	2F
02/D7: 7801     	SUBI	C,1
02/D8: F10D     	BRNC	4F
02/D9: 6800     2:	SUB	C,A
02/DA: F10B     	BRNC	4F
02/DC:          	
02/DB:          	; SAVE VALUE
02/DB: A812     	STORE	[VALUE],C
02/DC: AC13     	STORE	[VALUE+1],D
02/DE:          	
02/DD:          	; GET THE CHAR AND CHECK TO SEE IF IT IS A WHITESPACE
02/DD: 8811     	LOAD	C,[CHAR]
02/DE: 3C20     	LOADI	D,0X20
02/DF: DB00     	CMP	C,D
02/E0: F802     	BRA	3F
02/E2:          	
02/E1:          	; SET PADDING AND CHAR TO '0'
02/E1: 3830     	LOADI	C,'0'
02/E2: A816     	STORE	[PADDING],C
02/E4:          	
02/E3: 5801     3:	ADDI	C,1
02/E4: A811     	STORE	[CHAR],C
02/E5: FFED     	JUMP	0B
02/E7:          	
02/E6:          	; RESTORE THE STACK
02/E6: 8C10     4:	LOAD	D,[SPARK]
02/E8:          	
02/E7:          	; SEE IF IT IS ZERO
02/E7: 8011     	LOAD	A,[CHAR]
02/E8: 5000     	ADDI	A,0
02/E9: F702     	BRNZ	5F
02/EA: 8817     	LOAD	C,[LEAFRET]
02/EB: FE14     	JUMPR	C
02/ED:          	
02/EC:          	; PRINT THE CHARACTER
02/EC: 3401     5:	LOADI	B,S_PUTC
02/ED: 3802     	LOADI	C,BI
02/EE: BB01     	STOREF	[D+1],C
02/EF: 8817     	LOAD	C,[LEAFRET]
02/F0: FF13     	JUMP	SYSCALL
02/F2:          
02/F1:          
02/F1:          	; ZERO BANK VARIABLES
02/F1:          .BANK	0
00/80:          .BSS
00/80:          
00/00:          	; COMMAND LINE ARGUMENTS
00/00: 00       .DEFL BYTE ARGC		0
00/01: 00000000
       00000000 .DEFL BYTE ARGV		0,0,0,0,0,0,0,0,
00/09: 00000000
       0000     			0,0,0,0,0,0
00/0F:          
00/0F:          	; COMMAND LINE FLAGS
00/0F: 00       .DEFL BYTE LFLAG	0
00/10:          
00/10:          	; VARIOUS MISC VARIABLES
00/10:          	; TO BE USED IN LEAF-FUNCTIONS
00/10: 00       .DEFL BYTE SPARK	0
00/11: 00       .DEFL BYTE CHAR		0
00/12:          
00/12:          	; 16 BIT MATH STUFF
00/12: 0000     .DEFL WORD VALUE	0
00/14: 0000     .DEFL WORD OPERAND	0
00/16: 0000     .DEFL WORD TEMP		0
00/18:          
00/18:          	; EXPRESSION PARSING STUFF
00/18: 00000000
       00000000
       0000     .DEFL WORD ESTACK	0,0,0,0,0
00/22: 00000000
       00000000
       0000     .DEFL WORD VSTACK	0,0,0,0,0
00/2C: 00       .DEFL BYTE EINDEX	0
00/2D: 00       .DEFL BYTE VINDEX	0
00/2E: 00       .DEFL BYTE ISDEF	0
00/2F:          STACKSZ	= 5
00/2F:          
00/2F:          	; LATEST TOKEN
00/2F: 00       .DEFL BYTE TOKEN	0
00/30:          
00/30:          	; TOKEN STREAM STATE
00/30: 00       .DEFL BYTE SRCINDX	0
00/31: 00       .DEFL BYTE SRCBLK	0
00/32: 00       .DEFL BYTE SRCBANK	0
00/33: 00       .DEFL BYTE SRCPNTR	0
00/34: 00       .DEFL BYTE SRCSTAT	0
00/35: 00       .DEFL BYTE SRCCHAR	0
00/36: 0000     .DEFL WORD SRCLINE	0
00/38:          
00/38:          	; TOKEN BUFFER
00/38: 00       .DEFL BYTE BUFPNTR	0
00/39: 00000000
       00000000
       0000     .DEFL BYTE TBUF		0,0,0,0,0,0,0,0,0,0
00/43: 00       .DEFL BYTE TBUFEND	0
00/44:          	
00/44:          	; ASSEMBLY STATE
00/44: 00       .DEFL BYTE PASS		0
00/45: 0000     .DEFL WORD LINENUM	0
00/47: 00       .DEFL BYTE CURRFIL	0
00/48: 00       .DEFL BYTE COUNTER	0
00/49: 00       .DEFL BYTE SEGMENT	0
00/4A: 00       .DEFL BYTE SELBANK	0
00/4B: 00       .DEFL BYTE CURBANK	0
00/4C:          
00/4C:          	; SYMBOL STUFF
00/4C: 00       .DEFL BYTE NFREE	0
00/4D: 0000     .DEFL WORD NUMLOC	0
00/4F: 00       .DEFL BYTE DFBANK	0
00/50: 00       .DEFL BYTE DFPNTR	0
00/51:          
00/51:          	; ERROR BANK 0
00/51:          .BANK	BD
01/00:          .DATA
01/00:          ERR0_B	= BD
01/00:          
01/00:          	; INVALID ARGUMENTS
01/00: 494E5641
       4C494420
       41524755
       4D454E54
       530A0D   .DEFL BYTE ERROR00	"INVALID ARGUMENTS",0X0A,0X0D,
01/13: 55534147
       453A2041
       53205B2D
       4C5D2046
       494C4531
       2046494C
       4532202E
       2E2E0A0D
       00       			"USAGE: AS [-L] FILE1 FILE2 ...",0X0A,0X0D,0
01/34:          
01/34:          	; ERROR TABLE
01/34: 0200     .DEFL BYTE ETABLE	ERR1_B,ERROR10,	; ERROR 0X80: CANNOT OPEN FILE 
01/36: 0212     			ERR1_B,ERROR11,	; ERROR 0X81: UNEXPECTED CHAR IN NUMERIC
01/38: 022F     			ERR1_B,ERROR12,	; ERROR 0X82: UNDEFINED EXPRESSION
01/3A: 0246     			ERR1_B,ERROR13,	; ERROR 0X83: UNEXPECTED TOKEN
01/3C: 0259     			ERR1_B,ERROR14,	; ERROR 0X84: VALUE STACK OVERFLOW
01/3E: 0300     			ERR2_B,ERROR20,	; ERROR 0X85: EXPRESSION STACK OVERFLOW
01/40: 031C     			ERR2_B,ERROR21,	; ERROR 0X86: EXPRESSION STACK DEPLETION
01/42: 0334     			ERR2_B,ERROR22,	; ERROR 0X87: VALUE STACK DEPLETION
01/44: 0351     			ERR2_B,ERROR23,	; ERROR 0X88: PARENTHESIS MISMATCH
01/46: 0368     			ERR2_B,ERROR24,	; ERROR 0X89: DIVIDE BY ZERO
01/48: 0300     			ERR2_B,ERROR30	; ERROR 0X8A: OUT OF MEMORY
01/4A:          
01/4A:          	; ERROR VALUES
01/4A:          E_COPEN	= 0X80
01/4A:          E_UXNUM	= 0X81
01/4A:          E_UDEFX = 0X82
01/4A:          E_UXTOK	= 0X83
01/4A:          E_VSTKO = 0X84
01/4A:          E_ESTKO = 0X85
01/4A:          E_VSTKD	= 0X86
01/4A:          E_ESTKD = 0X87
01/4A:          E_PAREN = 0X88
01/4A:          E_DZERO	= 0X89
01/4A:          E_OMEM	= 0X8A
01/4A:          
01/4A:          BD	= BD+1	
01/4A:          	
01/4A:          	; ERROR BANK 1
01/4A:          .BANK	BD
02/00:          .DATA
02/00:          ERR1_B	= BD
02/00:          
02/00: 43414E27
       54204F50
       454E2046
       494C450A
       0D00     .DEFL BYTE ERROR10	"CAN'T OPEN FILE",0X0A,0X0D,0
02/12: 554E4558
       50454354
       45442043
       48415220
       494E204E
       554D4552
       49430A0D
       00       .DEFL BYTE ERROR11	"UNEXPECTED CHAR IN NUMERIC",0X0A,0X0D,0
02/2F: 554E4445
       46494E45
       44204558
       50524553
       53494F4E
       0A0D00   .DEFL BYTE ERROR12	"UNDEFINED EXPRESSION",0X0A,0X0D,0
02/46: 554E4558
       50454354
       45442054
       4F4B454E
       0A0D00   .DEFL BYTE ERROR13	"UNEXPECTED TOKEN",0X0A,0X0D,0
02/59: 56414C55
       45205354
       41434B20
       4F564552
       464C4F57
       0A0D00   .DEFL BYTE ERROR14	"VALUE STACK OVERFLOW",0X0A,0X0D,0
02/70:          
02/70:          
02/70:          BD	= BD+1
02/70:          
02/70:          	; ERROR BANK 2
02/70:          .BANK	BD
03/00:          .DATA
03/00:          ERR2_B	= BD
03/00:          
03/00: 45585052
       45535349
       4F4E2053
       5441434B
       204F5645
       52464C4F
       570A0D00 .DEFL BYTE ERROR20	"EXPRESSION STACK OVERFLOW",0X0A,0X0D,0
03/1C: 56414C55
       45205354
       41434B20
       4445504C
       4554494F
       4E0A0D00 .DEFL BYTE ERROR21	"VALUE STACK DEPLETION",0X0A,0X0D,0
03/34: 45585052
       45535349
       4F4E2053
       5441434B
       20444550
       4C455449
       4F4E0A0D
       00       .DEFL BYTE ERROR22	"EXPRESSION STACK DEPLETION",0X0A,0X0D,0
03/51: 50415245
       4E544845
       53495320
       4D49534D
       41544348
       0A0D00   .DEFL BYTE ERROR23	"PARENTHESIS MISMATCH",0X0A,0X0D,0
03/68: 44495649
       44452042
       59205A45
       524F0A0D
       00       .DEFL BYTE ERROR24	"DIVIDE BY ZERO",0X0A,0X0D,0
03/79:          
03/79:          BD	= BD+1
03/79:          
03/79:          	; ERROR BANK 3
03/79:          .BANK	BD
04/00:          .DATA
04/00:          ERR3_B	= BD
04/00:          
04/00: 4F555420
       4F46204D
       454D4F52
       590A0D00 .DEFL BYTE ERROR30	"OUT OF MEMORY",0X0A,0X0D,0
04/10:          
04/10:          BD	= BD+1
04/10:          
04/10:          	; SOURCE READ BUFFER
04/10:          .BANK	BD
05/00:          .DATA
05/00:          SRC_B	= BD
05/00:          
05/00:          BD	= BD+4
05/00:          ; AS1.S
05/00:          ; ASSEMBLER MAIN LOGIC
05/00:          ; GAVIN TERSTEEG, 2024
05/00:          ; SDMAY24-14
05/00:          
05/00:          BI	= BI+1
05/00:          .TEXT
05/80:          .BANK	BI
03/80:          MAIN0_B	= BI
03/80:          
03/80:          	; START A PASS
03/80:          	; BEGIN BY REWINDING THE SOURCE STREAM
03/80: 3803     DOPASS:	LOADI	C,BI
03/81: BB01     	STOREF	[D+1],C
03/82: 3887     	LOADI	C,@+5
03/83: BB00     	STOREF	[D],C
03/84: 3404     	LOADI	B,TOK0_B
03/85: 388A     	LOADI	C,REWIND
03/86: FF7B     	JUMP	INDIR
03/88:          	
03/87:          	; RESET LOCAL COUNTER
03/87: 3000     	LOADI	A,0
03/88: A04D     	STORE	[NUMLOC],A
03/8A:          
03/89:          	; TAKE IN A NEW LINE OF SOURCE CODE
03/89: 3803     ASMLINE:LOADI	C,BI
03/8A: BB01     	STOREF	[D+1],C
03/8B: 3890     	LOADI	C,@+5
03/8C: BB00     	STOREF	[D],C
03/8D: 3404     	LOADI	B,TOK0_B
03/8E: 3880     	LOADI	C,NEXTTOK
03/8F: FF72     	JUMP	INDIR
03/91:          	
03/90:          	; ARE WE AT THE END?
03/90: 802F     	LOAD	A,[TOKEN]
03/91: 5000     	ADDI	A,0
03/92: F635     	BRZ	ASMDONE
03/94:          	
03/93:          	; IS IT NEWLINE?
03/93: 700A     	SUBI	A,NEWLINE
03/94: F6F4     	BRZ	ASMLINE
03/96:          	
03/95:          	; ATTEMPT TO DEFINE THIS SYMBOL
03/95: 389A     	LOADI	C,@+5
03/96: BB00     	STOREF	[D],C
03/97: 340D     	LOADI	B,SYM0_B
03/98: 3880     	LOADI	C,DEFINE
03/99: FF68     	JUMP	INDIR
03/9B:          	
03/9A:          	; CONSUME '=' SYMBOL
03/9A: 389F     	LOADI	C,@+5
03/9B: BB00     	STOREF	[D],C
03/9C: 3404     	LOADI	B,TOK0_B
03/9D: 3880     	LOADI	C,NEXTTOK
03/9E: FF63     	JUMP	INDIR
03/9F: 802F     	LOAD	A,[TOKEN]
03/A0: 703D     	SUBI	A,'='
03/A1: F604     	BRZ	1F
03/A3:          	
03/A2:          	; ERROR
03/A2: 3083     	LOADI	A,E_UXTOK
03/A3: 3401     	LOADI	B,CORE0_B
03/A4: 38D2     	LOADI	C,ERROR
03/A5: FF5C     	JUMP	INDIR
03/A7:          
03/A6:          	; ATTEMPT TO PARSE EXPRESSION
03/A6: 38AB     1:	LOADI	C,@+5
03/A7: BB00     	STOREF	[D],C
03/A8: 3404     	LOADI	B,TOK0_B
03/A9: 3880     	LOADI	C,NEXTTOK
03/AA: FF57     	JUMP	INDIR
03/AC:          	
03/AB: 38B0     	LOADI	C,@+5
03/AC: BB00     	STOREF	[D],C
03/AD: 3406     	LOADI	B,EXP0_B
03/AE: 3880     	LOADI	C,PARSEX
03/AF: FF52     	JUMP	INDIR
03/B1:          	
03/B0:          	; DID THE EXPRESSION RETURN DEFINED?
03/B0: 5000     	ADDI	A,0
03/B1: F70F     	BRNZ	2F
03/B3:          
03/B2:          	; STORE VALUE AND DEFINE
03/B2: AC10     	STORE	[SPARK],D
03/B3: 8012     	LOAD	A,[VALUE]
03/B4: 8413     	LOAD	B,[VALUE+1]
03/B5: 884F     	LOAD	C,[DFBANK]
03/B6: 8C50     	LOAD	D,[DFPNTR]
03/B7: A880     	STORE	[DBANK],C
03/B8: B301     	STOREF	[D+1],A
03/B9: B702     	STOREF	[D+2],B
03/BA: 30FF     	LOADI	A,0XFF
03/BB: B300     	STOREF	[D],A
03/BC: 3000     	LOADI	A,0
03/BD: A080     	STORE	[DBANK],A
03/BE: 8C10     	LOAD	D,[SPARK]
03/C0:          	
03/BF: FFFF     	JUMP	@
03/C1:          	
03/C0: FFC8     	JUMP	ASMLINE
03/C2:          
03/C1:          	; UN-DEFINE THE EXPRESSION
03/C1: 3000     2:	LOADI	A,0
03/C2: 844F     	LOAD	B,[DFBANK]
03/C3: 8850     	LOAD	C,[DFPNTR]
03/C4: A480     	STORE	[DBANK],B
03/C5: B200     	STOREF	[C],A
03/C6: A080     	STORE	[DBANK],A
03/C7: FFC1     	JUMP	ASMLINE
03/C9:          
03/C8:          	; ALL DONE
03/C8: 3041     ASMDONE:LOADI	A,'A'
03/C9: A039     	STORE	[TBUF],A
03/CA: 3000     	LOADI	A,0
03/CB: A03A     	STORE	[TBUF+1],A
03/CD:          
03/CC:          	; PRINT SOME DEBUGGING STUFF
03/CC: 3803     	LOADI	C,BI
03/CD: BB01     	STOREF	[D+1],C
03/CE: 3041     	LOADI	A,'A'
03/CF: 3401     	LOADI	B,S_PUTC
03/D0: 38D2     	LOADI	C,@+2
03/D1: FF32     	JUMP	SYSCALL
03/D2: 303D     	LOADI	A,'='
03/D3: 3401     	LOADI	B,S_PUTC
03/D4: 38D6     	LOADI	C,@+2
03/D5: FF2E     	JUMP	SYSCALL
03/D7:          	
03/D6:          	; GET 'A' SYMBOL
03/D6: 38DB     	LOADI	C,@+5
03/D7: BB00     	STOREF	[D],C
03/D8: 340D     	LOADI	B,SYM0_B
03/D9: 3883     	LOADI	C,GETSYM
03/DA: FF27     	JUMP	INDIR
03/DB: 5000     	ADDI	A,0
03/DC: F705     	BRNZ	1F
03/DE:          	
03/DD:          	; PRINT VALUE
03/DD: 38E6     	LOADI	C,2F
03/DE: BB00     	STOREF	[D],C
03/DF: 3402     	LOADI	B,PRNT0_B
03/E0: 38B4     	LOADI	C,PRINTD
03/E1: FF20     	JUMP	INDIR
03/E3:          	
03/E2:          	; UNDEFINED
03/E2: 303F     1:	LOADI	A,'?'
03/E3: 3401     	LOADI	B,S_PUTC
03/E4: 38E6     	LOADI	C,@+2
03/E5: FF1E     	JUMP	SYSCALL
03/E7:          
03/E6:          	; EXIT
03/E6: 3401     2:	LOADI	B,CORE0_B
03/E7: 38D0     	LOADI	C,EXIT
03/E8: FF19     	JUMP	INDIR
03/EA:          ; AS2.S
03/E9:          ; SOURCE INPUT AND TOKENIZER
03/E9:          ; GAVIN TERSTEEG, 2024
03/E9:          ; SDMAY24-14
03/E9:          
03/E9:          ; NEW LINE CHARACTER
03/E9:          NEWLINE	= 0X0A
03/E9:          SEMICOL	= 0X3B
03/E9:          SQUOTE	= 0X27
03/E9:          DQUOTE	= 0X22
03/E9:          SYMBOL	= 0X80
03/E9:          NUMERIC	= 0X81
03/E9:          
03/E9:          
03/E9:          BI	= BI+1
03/E9:          .TEXT
03/E9:          .BANK	BI
04/80:          TOK0_B	= BI
04/80:          
04/80:          	; GETS THE NEXT TOKEN
04/80:          	; TOKEN TYPE IS RETURNED IN [TOKEN]
04/80:          	; SPECIAL TYPES ARE:
04/80:          	; 'A' -> ALPHANUMERIC
04/80:          	; '0' -> NUMERIC
04/80:          	; NEWLINE -> NEW LINE
04/80:          	; ALL WHITESPACE IS IGNORED, UNLESS WE ARE INSIDE
04/80:          	; A STRING OR DEFINED CHAR
04/80:          	; 'A' AND '0' TOKENS WILL POPULATE THE TOKEN BUFFER
04/80:          	; AS WELL
04/80: 7C02     NEXTTOK:SUBI	D,2
04/82:          
04/81:          	; STORE RETURN ADDRESS
04/81: 3405     	LOADI	B,TOK1_B
04/82: B701     	STOREF	[D+1],B
04/84:          	
04/83:          	; CHECK SRCSTAT
04/83: 388B     	LOADI	C,NEXTTOB
04/84: 8034     	LOAD	A,[SRCSTAT]
04/85: 5001     	ADDI	A,1
04/86: F77B     	BRNZ	INDIR
04/87: A034     	STORE	[SRCSTAT],A
04/89:          	
04/88: 3880     	LOADI	C,NEXTTOA
04/89: FF78     	JUMP	INDIR
04/8B:          
04/8A:          	; RESETS THE STATE OF THE TOKEN STREAM BACK TO
04/8A:          	; BEGINNING OF SOURCE INPUT
04/8A: 30FF     REWIND:	LOADI	A,0-1
04/8B: A030     	STORE	[SRCINDX],A
04/8D:          	
04/8C:          	; SET FIRST CHAR AS INVALID
04/8C: 3080     	LOADI	A,0X80
04/8D: A035     	STORE	[SRCCHAR],A
04/8F:          	
04/8E:          	; RESET STAT
04/8E: 30FF     	LOADI	A,0XFF
04/8F: A034     	STORE	[SRCSTAT],A
04/91:          	
04/90:          	; GET THE NEXT FILE
04/90:          	; ALL POINTERS WILL BE RESET FOR FILE READ IN
04/90:          	; SRCINDX == ARGC IF WE ARE DONE READING IN BLOCK
04/90: 7C02     NEXTSRC:SUBI	D,2
04/92:          
04/91:          	; RESET POINTER, BLOCK, AND SRCLINE
04/91: 3000     	LOADI	A,0
04/92: A033     	STORE	[SRCPNTR],A
04/93: A031     	STORE	[SRCBLK],A
04/94: A036     	STORE	[SRCLINE],A
04/95: A037     	STORE	[SRCLINE+1],A
04/97:          	
04/96:          	; RESET BANK
04/96: 3005     	LOADI	A,SRC_B
04/97: A032     	STORE	[SRCBANK],A
04/99:          
04/98:          	; INCREMENT SOURCE INDEX
04/98: 8030     0:	LOAD	A,[SRCINDX]
04/99: 5001     	ADDI	A,1
04/9A: A030     	STORE	[SRCINDX],A
04/9C:          
04/9B:          	; CHECK BOUNDS OF INDEX
04/9B: 8400     	LOAD	B,[ARGC]
04/9C: D100     	CMP	A,B
04/9D: F01C     	BRAE	9F
04/9F:          	
04/9E:          	; ATTEMPT TO OPEN FILE
04/9E: 8472     	LOAD	B,[CMDL_B]
04/9F: A46C     	STORE	[ARG_BNK],B
04/A0: 9001     	LOADF	A,[A+ARGV]
04/A1: 3804     	LOADI	C,BI
04/A2: BB01     	STOREF	[D+1],C
04/A3: 38A5     	LOADI	C,@+2
04/A4: 3406     	LOADI	B,S_OPEN
04/A5: 38A7     	LOADI	C,@+2
04/A6: FF5D     	JUMP	SYSCALL
04/A7: 5000     	ADDI	A,0
04/A8: F609     	BRZ	1F
04/AA:          	
04/A9:          	; ERROR
04/A9:          	; ALSO SET LINENUM AND CURRFIL
04/A9: 8030     	LOAD	A,[SRCINDX]
04/AA: A047     	STORE	[CURRFIL],A
04/AB: 3000     	LOADI	A,0
04/AC: A045     	STORE	[LINENUM],A
04/AD: A046     	STORE	[LINENUM+1],A
04/AE: 3080     	LOADI	A,E_COPEN
04/AF: 3401     	LOADI	B,CORE0_B
04/B0: 38D2     	LOADI	C,ERROR
04/B1: FF50     	JUMP	INDIR
04/B3:          
04/B2:          	; ATTEMPT TO READ THE FIRST BLOCK
04/B2: 3405     1:	LOADI	B,SRC_B
04/B3: A46C     	STORE	[ARG_BNK],B
04/B4: 3000     	LOADI	A,0
04/B5: 3408     	LOADI	B,S_READ
04/B6: 38B8     	LOADI	C,@+2
04/B7: FF4C     	JUMP	SYSCALL
04/B9:          	
04/B8:          	; IF IT DIDN'T WORK, GET THE NEXT BLOCK
04/B8: 5000     	ADDI	A,0
04/B9: F7DE     	BRNZ	0B
04/BB:          
04/BA:          	; RETURN
04/BA: 5C02     9:	ADDI	D,2
04/BB: FF47     	JUMP	IRET
04/BD:          	
04/BC:          	; GET THE NEXT CHARACTER IN THE STREAM
04/BC:          	; RETURNS CHARACTER IN [SRCCHAR]
04/BC:          	; IF THERE ARE NO CHARACTER, 0 WILL BE RETURNED
04/BC: 7C02     NEXTCHR:SUBI	D,2
04/BE:          
04/BD:          	; CHECK SRCINDX != ARGC
04/BD: 8030     	LOAD	A,[SRCINDX]
04/BE: 8400     	LOAD	B,[ARGC]
04/BF: D100     	CMP	A,B
04/C0: F627     	BRZ	8F
04/C2:          
04/C1:          	; CHECK IF SRCPNTR IS VALID
04/C1: 8033     	LOAD	A,[SRCPNTR]
04/C2: 8432     	LOAD	B,[SRCBANK]
04/C3: 5000     	ADDI	A,0
04/C4: F40C     	BRN	3F
04/C6:          	
04/C5:          	; ALRIGHT, LETS JUST GRAB A CHARACTER FROM THE BANK
04/C5: A480     1:	STORE	[DBANK],B
04/C6: 9800     	LOADF	C,[A]
04/C7: 3400     	LOADI	B,0
04/C8: A480     	STORE	[DBANK],B
04/CA:          	
04/C9:          	; INCREMENT POINTER
04/C9: 5001     	ADDI	A,1
04/CA: A033     	STORE	[SRCPNTR],A
04/CC:          	
04/CB:          	; CAN WE RETURN?
04/CB: A835     2:	STORE	[SRCCHAR],C
04/CC: 5800     	ADDI	C,0
04/CD: F71C     	BRNZ	9F
04/CE: 380A     	LOADI	C,NEWLINE
04/CF: A835     	STORE	[SRCCHAR],C
04/D0: FF15     	JUMP	7F
04/D2:          	
04/D1:          	; INCREMENT BANK
04/D1: 3000     3:	LOADI	A,0
04/D2: 5401     	ADDI	B,1
04/D3: A432     	STORE	[SRCBANK],B
04/D4: 3809     	LOADI	C,SRC_B+4
04/D5: D600     	CMP	B,C
04/D6: F1EE     	BRB	1B
04/D8:          	
04/D7:          	; READ A NEW BLOCK
04/D7: 8031     	LOAD	A,[SRCBLK]
04/D8: 5001     	ADDI	A,1
04/D9: F00C     	BRC	7F
04/DA: A031     	STORE	[SRCBLK],A
04/DB: 3804     	LOADI	C,BI
04/DC: BB01     	STOREF	[D+1],C
04/DD: 3408     	LOADI	B,S_READ
04/DE: 38E0     	LOADI	C,@+2
04/DF: FF24     	JUMP	SYSCALL
04/E0: 5000     	ADDI	A,0
04/E1: F704     	BRNZ	7F
04/E3:          	
04/E2:          	; GO READ A CHARACTER NOW
04/E2: 3000     	LOADI	A,0
04/E3: 3405     	LOADI	B,SRC_B
04/E4: A432     	STORE	[SRCBANK],B
04/E5: FFDF     	JUMP	1B
04/E7:          
04/E6:          	; WE ARE DONE WITH THIS FILE
04/E6:          	; MOVE ON TO THE NEXT
04/E6: 5C02     7:	ADDI	D,2
04/E7: FFA8     	JUMP	NEXTSRC
04/E9:          	
04/E8:          	; STORE A ZERO IN SRCCHAR
04/E8: 3000     8:	LOADI	A,0
04/E9: A035     	STORE	[SRCCHAR],A
04/EB:          	
04/EA:          	; RETURN
04/EA: 5C02     9:	ADDI	D,2
04/EB: FF17     	JUMP	IRET
04/ED:          	
04/EC:          BI	= BI+1
04/EC:          .TEXT
04/EC:          .BANK	BI
05/80:          TOK1_B	= BI
05/80:          	
05/80:          	; SHADOW OF NEXTTOK
05/80:          	; DO WE NEED TO INCREMENT THE LINE?
05/80:          	; YES WE DO, UPDATE CURRENT FILE
05/80: 8030     NEXTTOA:LOAD	A,[SRCINDX]
05/81: A047     	STORE	[CURRFIL],A
05/83:          	
05/82:          	; INCRMENT SOURCE LINE
05/82: 8037     	LOAD	A,[SRCLINE+1]
05/83: 5001     	ADDI	A,1
05/84: A037     	STORE	[SRCLINE+1],A
05/85: 8436     	LOAD	B,[SRCLINE]
05/86: F102     	BRNC	1F
05/87: 5401     	ADDI	B,1
05/88: A436     	STORE	[SRCLINE],B
05/8A:          	
05/89:          	; REFLECT ON LINE NUMBER
05/89: A445     1:	STORE	[LINENUM],B
05/8A: A046     	STORE	[LINENUM+1],A
05/8C:          
05/8B:          
05/8B:          	; CHECK THE NEXT CHARACTER IN THE STREAM
05/8B: 8035     NEXTTOB:LOAD	A,[SRCCHAR]
05/8C: 5000     	ADDI	A,0
05/8D: F66C     	BRZ	8F
05/8E: F43D     	BRN	5F
05/90:          
05/8F:          	; IS IT A NEWLINE?
05/8F: 340A     	LOADI	B,NEWLINE
05/90: D100     	CMP	A,B
05/91: F703     	BRNZ	1F
05/93:          	
05/92:          	; NEW LINE
05/92: 34FF     	LOADI	B,0XFF
05/93: A434     	STORE	[SRCSTAT],B
05/94: FF65     	JUMP	8F
05/96:          
05/95:          	; CHECK STATE STUFF
05/95: 8834     1:	LOAD	C,[SRCSTAT]
05/96: 343B     	LOADI	B,SEMICOL
05/97: D600     	CMP	B,C
05/98: F633     	BRZ	5F
05/99: 5800     	ADDI	C,0
05/9A: F71B     	BRNZ	4F
05/9C:          
05/9B:          	; IS IT WHITESPACE?
05/9B: 3420     	LOADI	B,0X20
05/9C: D100     	CMP	A,B
05/9D: F92E     	BRBE	5F
05/9F:          	
05/9E:          	; IS IT A NUMBER?
05/9E: 3430     	LOADI	B,'0'
05/9F: D100     	CMP	A,B
05/A0: F104     	BRB	2F
05/A1: 3439     	LOADI	B,'9'
05/A2: D100     	CMP	A,B
05/A3: 3481     	LOADI	B,NUMERIC
05/A4: F92C     	BRBE	0F
05/A6:          	
05/A5:          	; NOPE, IS IT IS LETTER?
05/A5:          	; FIRST CONVERT FROM LOWERCASE TO UPPERCASE
05/A5: 3461     2:	LOADI	B,'A'+0X20
05/A6: D100     	CMP	A,B
05/A7: F104     	BRB	3F
05/A8: 347A     	LOADI	B,'Z'+0X20
05/A9: D100     	CMP	A,B
05/AA: F801     	BRA	3F
05/AB: 7020     	SUBI	A,0X20
05/AD:          	
05/AC:          	; CHECK FOR UPPER CASE LETTER
05/AC: 345F     3:	LOADI	B,'_'
05/AD: D100     	CMP	A,B
05/AE: F605     	BRZ	2F
05/AF: 3441     	LOADI	B,'A'
05/B0: D100     	CMP	A,B
05/B1: F104     	BRB	4F
05/B2: 345A     	LOADI	B,'Z'
05/B3: D100     	CMP	A,B
05/B4: 3480     2:	LOADI	B,SYMBOL
05/B5: F91B     	BRBE	0F
05/B7:          	
05/B6:          	; NOPE, PROCESS AS A LITERAL
05/B6: 8834     4:	LOAD	C,[SRCSTAT]
05/B7: D200     	CMP	A,C
05/B8: F703     	BRNZ	4F
05/BA:          	
05/B9:          	; END OF ENCLOSED SECTION
05/B9: 3800     	LOADI	C,0
05/BA: A834     	STORE	[SRCSTAT],C
05/BB: FF3E     	JUMP	8F
05/BD:          	
05/BC:          	; IF ENCLOSED, JUST SEND DIRECTLY TO OUTPUT
05/BC: 5800     4:	ADDI	C,0
05/BD: F73C     	BRNZ	8F
05/BF:          
05/BE:          	; IS IT A COMMENT?
05/BE: 343B     	LOADI	B,SEMICOL
05/BF: D100     	CMP	A,B
05/C0: F702     	BRNZ	4F
05/C2:          	
05/C1:          	; SET COMMENT MODE
05/C1: A034     	STORE	[SRCSTAT],A
05/C2: FF09     	JUMP	5F
05/C4:          
05/C3:          	; IS IT A SINGLE OR DOUBLE QUOTE?
05/C3: 3427     4:	LOADI	B,SQUOTE
05/C4: D100     	CMP	A,B
05/C5: F604     	BRZ	4F
05/C6: 3422     	LOADI	B,DQUOTE
05/C7: D100     	CMP	A,B
05/C8: F601     	BRZ	4F
05/C9: FF30     	JUMP	8F
05/CB:          
05/CA:          	; YES IT IS, SET THE STATE AND EXIT
05/CA: A034     4:	STORE	[SRCSTAT],A
05/CB: FF2E     	JUMP	8F
05/CD:          	
05/CC:          	; GRAB A NEW CHARACTER FROM THE STREAM
05/CC: 388B     5:	LOADI	C,NEXTTOB
05/CD: BB00     	STOREF	[D],C
05/CE: 3404     	LOADI	B,TOK0_B
05/CF: 38BC     	LOADI	C,NEXTCHR
05/D0: FF31     	JUMP	INDIR
05/D2:          
05/D1:          	; COPY THE SYMBOL OR NUMERIC INTO THE BUFFER
05/D1: A42F     0:	STORE	[TOKEN],B
05/D3:          
05/D2:          	; PREPARE TO COPY
05/D2: 3839     	LOADI	C,TBUF
05/D4:          	
05/D3:          	; STORE CHARACTER
05/D3: B200     1:	STOREF	[C],A
05/D4: A838     	STORE	[BUFPNTR],C
05/D6:          
05/D5:          	; GET NEXT CHARACTER
05/D5: 38DA     2:	LOADI	C,@+5
05/D6: BB00     	STOREF	[D],C
05/D7: 3404     	LOADI	B,TOK0_B
05/D8: 38BC     	LOADI	C,NEXTCHR
05/D9: FF28     	JUMP	INDIR
05/DB:          	
05/DA:          	; CHECK CHARACTER TYPE
05/DA: 8838     	LOAD	C,[BUFPNTR]
05/DB: 8035     	LOAD	A,[SRCCHAR]
05/DD:          	
05/DC:          	; IS IT A NUMBER?
05/DC: 3430     	LOADI	B,'0'
05/DD: D100     	CMP	A,B
05/DE: F118     	BRB	7F
05/DF: 3439     	LOADI	B,'9'
05/E0: D100     	CMP	A,B
05/E1: F910     	BRBE	4F
05/E3:          	
05/E2:          	; NOPE, IS IT IS LETTER?
05/E2:          	; FIRST CONVERT FROM LOWERCASE TO UPPERCASE
05/E2: 3461     	LOADI	B,'A'+0X20
05/E3: D100     	CMP	A,B
05/E4: F104     	BRB	3F
05/E5: 347A     	LOADI	B,'Z'+0X20
05/E6: D100     	CMP	A,B
05/E7: F801     	BRA	3F
05/E8: 7020     	SUBI	A,0X20
05/EA:          	
05/E9:          	; CHECK FOR UPPER CASE LETTER
05/E9: 345F     3:	LOADI	B,'_'
05/EA: D100     	CMP	A,B
05/EB: F606     	BRZ	4F
05/EC: 3441     	LOADI	B,'A'
05/ED: D100     	CMP	A,B
05/EE: F108     	BRB	7F
05/EF: 345A     	LOADI	B,'Z'
05/F0: D100     	CMP	A,B
05/F1: F805     	BRA	7F
05/F3:          	
05/F2:          	; ADD TO THE STRING
05/F2: 5801     4:	ADDI	C,1
05/F3: 3443     	LOADI	B,TBUFEND
05/F4: D600     	CMP	B,C
05/F5: F6DF     	BRZ	2B
05/F6: FFDC     	JUMP	1B
05/F8:          	
05/F7:          	; TERMINATE
05/F7: 3000     7:	LOADI	A,0
05/F8: B201     	STOREF	[C+1],A
05/F9: FF03     	JUMP	9F
05/FB:          	
05/FA:          	; SAVE TOKEN TYPE AND CONSUME THE SRCCHAR
05/FA: 3480     8:	LOADI	B,0X80
05/FB: A435     	STORE	[SRCCHAR],B
05/FC: A02F     	STORE	[TOKEN],A
05/FE:          	
05/FD:          	; RETURN
05/FD: 5C02     9:	ADDI	D,2
05/FE: FF04     	JUMP	IRET
05/100:          	
05/FF:          ; AS3.S
05/FF:          ; EXPRESSION HANDLING
05/FF:          ; GAVIN TERSTEEG, 2024
05/FF:          ; SDMAY24-14
05/FF:          
05/FF:          BI	= BI+1
05/FF:          .TEXT
05/FF:          .BANK	BI
06/80:          EXP0_B	= BI
06/80:          
06/80:          	; PARSE AN EXPRESSION
06/80:          	; THE FIRST PART OF THE EXPRESSION SHOULD BE IN THE TOKEN BUFFER
06/80:          	; IF PARSING IS SUCCESSFUL, THE RESULT WILL BE PLACED IN [VALUE]
06/80:          	; IF A SYMBOL IS UNDEFINED, AN ERROR CODE WILL BE RETURNED IN
06/80:          	; REGISTER A, OTHERWISE A = 0X00 WILL BE RETURNED.
06/80:          PRECED	= CHAR
06/80: 3407     PARSEX: LOADI	B,EXP1_B
06/81: 3880     	LOADI	C,PARSEXA
06/82: FF7F     	JUMP	INDIR
06/84:          
06/83:          	; PARSE A NUMERIC VALUE
06/83:          	; THE NUMERIC TO BE PARSED SHOULD BE IN THE TOKEN BUFFER
06/83:          	; IF THE PARSING IS SUCCESSFUL, THE RESULT WILL BE PLACED IN [VALUE]
06/83:          	; DEFAULT RADIX IS 10
06/83:          RADIX	= TEMP
06/83: 300A     PARSEN:	LOADI	A,10
06/84: A016     	STORE	[RADIX],A
06/86:          	
06/85:          	; RESET VALUE AS WELL
06/85: 3000     	LOADI	A,0
06/86: A012     	STORE	[VALUE],A
06/87: A013     	STORE	[VALUE+1],A
06/89:          	
06/88:          	; RESET BUFFER POINTER
06/88: 3039     	LOADI	A,TBUF
06/8A:          	
06/89:          	; DETECT LEADING ZERO
06/89: 9400     	LOADF	B,[A]
06/8A: 5400     	ADDI	B,0
06/8B: F677     	BRZ	IRET
06/8C: 7430     	SUBI	B,'0'
06/8D: F709     	BRNZ	1F
06/8F:          	
06/8E:          	; SET RADIX TO 8
06/8E: 3408     	LOADI	B,8
06/8F: A416     	STORE	[RADIX],B
06/91:          	
06/90:          	; GET NEXT CHARACTER, COMPARE WITH 9
06/90: 5001     	ADDI	A,1
06/91: 9400     	LOADF	B,[A]
06/92: 3839     	LOADI	C,'9'
06/93: D600     	CMP	B,C
06/94: F902     	BRBE	1F
06/96:          	
06/95:          	; RADIX FORMAT IS "0?..."
06/95: 5001     	ADDI	A,1
06/96: FF0E     	JUMP	4F
06/98:          	
06/97:          	; CHECK END OF NUMBER FOR RADIX
06/97: 2800     1:	MOV	C,A
06/98: 9600     2:	LOADF	B,[C]
06/99: 5400     	ADDI	B,0
06/9A: F602     	BRZ	3F
06/9B: 5801     	ADDI	C,1
06/9C: FFFB     	JUMP	2B
06/9E:          	
06/9D:          	; LOOK AT LAST CHARACTER
06/9D: 96FF     3:	LOADF	B,[C+0-1]
06/9E: 7439     	SUBI	B,'9'
06/9F: F915     	BRBE	0F
06/A0: 5439     	ADDI	B,'9'
06/A1: A038     	STORE	[BUFPNTR],A
06/A2: 3000     	LOADI	A,0
06/A3: B2FF     	STOREF	[C+0-1],A
06/A4: 8038     	LOAD	A,[BUFPNTR]
06/A6:          
06/A5:          	; B = POTENTIAL RADIX
06/A5: 3810     4:	LOADI	C,16
06/A6: 7458     	SUBI	B,'X'
06/A7: F60C     	BRZ	5F
06/A8: 74F0     	SUBI	B,'H'-'X'
06/A9: F60A     	BRZ	5F
06/AA: 3808     	LOADI	C,8
06/AB: 7407     	SUBI	B,'O'-'H'
06/AC: F607     	BRZ	5F
06/AD: 3802     	LOADI	C,2
06/AE: 74F3     	SUBI	B,'B'-'O'
06/AF: F604     	BRZ	5F
06/B1:          	
06/B0:          	; ISSUE WITH PARSING NUMERIC
06/B0: 3081     8:	LOADI	A,E_UXNUM
06/B1: 3401     	LOADI	B,CORE0_B
06/B2: 38D2     	LOADI	C,ERROR
06/B3: FF4E     	JUMP	INDIR
06/B5:          	
06/B4:          	; C = RADIX
06/B4: A816     5:	STORE	[RADIX],C
06/B6:          	
06/B5:          	; START PARSING THE NUMERIC
06/B5: A038     0:	STORE	[BUFPNTR],A
06/B7:          	
06/B6:          	; GRAB A CHARACTER
06/B6: 9000     	LOADF	A,[A]
06/B7: 5000     	ADDI	A,0
06/B8: F64A     	BRZ	IRET
06/BA:          	
06/B9:          	; MULTIPLY BY RADIX (SLOWISH)
06/B9: AC10     	STORE	[SPARK],D
06/BA: 8412     	LOAD	B,[VALUE]
06/BB: 8813     	LOAD	C,[VALUE+1]
06/BC: 8C16     	LOAD	D,[RADIX]
06/BE:          	
06/BD: 7C01     1:	SUBI	D,1
06/BE: F609     	BRZ	3F
06/BF: 8013     	LOAD	A,[VALUE+1]
06/C0: 4200     	ADD	A,C
06/C1: A013     	STORE	[VALUE+1],A
06/C2: 8012     	LOAD	A,[VALUE]
06/C3: F101     	BRNC	2F
06/C4: 5001     	ADDI	A,1
06/C5: 4100     2:	ADD	A,B
06/C6: A012     	STORE	[VALUE],A
06/C7: FFF5     	JUMP	1B
06/C9:          	
06/C8:          	; GET THE CHARACTER AGAIN, AND INCREMENT POINTER
06/C8: 8C10     3:	LOAD	D,[SPARK]
06/C9: 8038     	LOAD	A,[BUFPNTR]
06/CA: 9800     	LOADF	C,[A]
06/CB: 5001     	ADDI	A,1
06/CD:          	
06/CC:          	; CHECK BOUNDS
06/CC: 3430     	LOADI	B,'0'
06/CD: D900     	CMP	C,B
06/CE: F1E1     	BRB	8B 
06/CF: 3439     	LOADI	B,'9'
06/D0: D900     	CMP	C,B
06/D1: F907     	BRBE	4F
06/D3:          	
06/D2: 3441     	LOADI	B,'A'
06/D3: D900     	CMP	C,B
06/D4: F1DB     	BRB	8B
06/D5: 3446     	LOADI	B,'F'
06/D6: D900     	CMP	C,B
06/D7: F8D8     	BRA	8B
06/D9:          	
06/D8: 7807     	SUBI	C,'A'-('0'+10)
06/DA:          	
06/D9:          	; CONVERT FROM ASCII
06/D9: 7830     4:	SUBI	C,'0'
06/DB:          
06/DA:          	; COMPARE WITH RADIX
06/DA: 8416     	LOAD	B,[RADIX]
06/DB: D900     	CMP	C,B
06/DC: F0D3     	BRAE	8B
06/DE:          	
06/DD:          	; ADD TO VALUE
06/DD: 8413     	LOAD	B,[VALUE+1]
06/DE: 4600     	ADD	B,C
06/DF: A413     	STORE	[VALUE+1],B
06/E0: F1D4     	BRNC	0B
06/E1: 8412     	LOAD	B,[VALUE]
06/E2: 5401     	ADDI	B,1
06/E3: A412     	STORE	[VALUE],B
06/E4: FFD0     	JUMP	0B
06/E6:          
06/E5:          BI	= BI+1
06/E5:          .TEXT
06/E5:          .BANK	BI
07/80:          EXP1_B	= BI
07/80:          
07/80:          	; SHADOW OF PARSEX
07/80: 7C02     PARSEXA:SUBI	D,2
07/82:          
07/81:          	; RESET ISDEF
07/81: 3000     	LOADI	A,0
07/82: A02E     	STORE	[ISDEF],A
07/84:          
07/83:          	; RESET VALUE AND EXPRESSION STACKS
07/83: 3022     	LOADI	A,VSTACK
07/84: A02D     	STORE	[VINDEX],A
07/85: 3018     	LOADI	A,ESTACK
07/86: A02C     	STORE	[EINDEX],A
07/88:          	
07/87:          	; PROCESS TOKEN (VALUES AND LEFT PARENTHESIS)
07/87:          	; ALSO SET RETURN ADDRESS
07/87: 3807     0:	LOADI	C,BI
07/88: BB01     	STOREF	[D+1],C
07/89: 802F     	LOAD	A,[TOKEN]
07/8B:          
07/8A:          	; IS IT A NUMERIC?
07/8A: 7081     	SUBI	A,NUMERIC
07/8B: F711     	BRNZ	7F
07/8D:          	
07/8C:          	; CHECK FOR LOCAL SYMBOLS
07/8C: 803B     	LOAD	A,[TBUF+2]
07/8D: 5000     	ADDI	A,0
07/8E: F709     	BRNZ	2F
07/8F: 803A     	LOAD	A,[TBUF+1]
07/90: 7046     	SUBI	A,'F'
07/91: F602     	BRZ	1F
07/92: 70FC     	SUBI	A,'B'-'F'
07/93: F704     	BRNZ	2F
07/95:          
07/94:          	; TODO: PROCESS LOCAL SYMBOL
07/94: 3000     1:	LOADI	A,0
07/95: A012     	STORE	[VALUE],A
07/96: A013     	STORE	[VALUE+1],A
07/97: FF16     	JUMP	8F
07/99:          
07/98:          	; PARSE NUMERIC
07/98: 38AE     2:	LOADI	C,8F
07/99: BB00     	STOREF	[D],C
07/9A: 3406     	LOADI	B,EXP0_B
07/9B: 3883     	LOADI	C,PARSEN
07/9C: FF65     	JUMP	INDIR
07/9E:          	
07/9D:          	; IS IT A SYMBOL?
07/9D: 70FF     7:	SUBI	A,SYMBOL-NUMERIC
07/9E: F709     	BRNZ	7F
07/A0:          
07/9F:          	; PROCESS SYMBOL
07/9F: 38A4     	LOADI	C,@+5
07/A0: BB00     	STOREF	[D],C
07/A1: 340D     	LOADI	B,SYM0_B
07/A2: 3883     	LOADI	C,GETSYM
07/A3: FF5E     	JUMP	INDIR
07/A5:          	
07/A4:          	; IS IT DEFINED?
07/A4: 5000     	ADDI	A,0
07/A5: F608     	BRZ	8F
07/A6: A02E     	STORE	[ISDEF],A
07/A7: FF06     	JUMP	8F
07/A9:          
07/A8:          	; IS IT A '@'?
07/A8: 70C0     7:	SUBI	A,'@'-SYMBOL
07/A9: F710     	BRNZ	7F
07/AB:          
07/AA:          	; PROCESS COUNTER
07/AA: 3000     	LOADI	A,0
07/AB: A012     	STORE	[VALUE],A
07/AC: 8048     	LOAD	A,[COUNTER]
07/AD: A013     	STORE	[VALUE+1],A
07/AF:          
07/AE:          	; PLACE [VALUE] ONTO THE VSTACK
07/AE: 842D     8:	LOAD	B,[VINDEX]
07/AF: 3027     	LOADI	A,VSTACK+STACKSZ
07/B0: D400     	CMP	B,A
07/B1: 3084     	LOADI	A,E_VSTKO
07/B2: F017     	BRAE	8F	; ERROR!
07/B3: 8012     	LOAD	A,[VALUE]
07/B4: B100     	STOREF	[B],A
07/B5: 8013     	LOAD	A,[VALUE+1]
07/B6: B101     	STOREF	[B+1],A
07/B7: 5402     	ADDI	B,2
07/B8: A42D     	STORE	[VINDEX],B
07/B9: FF13     	JUMP	PARSEXC
07/BB:          	
07/BA:          	; IS IT A '('?
07/BA: 70E8     7:	SUBI	A,'('-'@'
07/BB: F70D     	BRNZ	7F
07/BD:          	
07/BC: A011     	STORE	[PRECED],A
07/BE:          	
07/BD:          	; PLACE LEFT PARENTHESIS ON ESTACK
07/BD: 842C     PARSEXB:LOAD	B,[EINDEX]
07/BE: 301D     	LOADI	A,ESTACK+STACKSZ
07/BF: D400     	CMP	B,A
07/C0: 3085     	LOADI	A,E_ESTKO
07/C1: F008     	BRAE	8F	; ERROR!
07/C2: 802F     	LOAD	A,[TOKEN]
07/C3: B100     	STOREF	[B],A
07/C4: 8011     	LOAD	A,[PRECED]
07/C5: B101     	STOREF	[B+1],A
07/C6: 5402     	ADDI	B,2
07/C7: A42C     	STORE	[EINDEX],B
07/C8: FF04     	JUMP	PARSEXC
07/CA:          	
07/C9:          	; ERROR!
07/C9: 3083     7:	LOADI	A,E_UXTOK
07/CA: 3401     8:	LOADI	B,CORE0_B
07/CB: 38D2     	LOADI	C,ERROR
07/CC: FF35     	JUMP	INDIR
07/CE:          
07/CD:          	; GET THE NEXT TOKEN
07/CD: 3807     PARSEXC:LOADI	C,BI
07/CE: BB01     	STOREF	[D+1],C
07/CF: 38D4     	LOADI	C,@+5
07/D0: BB00     	STOREF	[D],C
07/D1: 3404     	LOADI	B,TOK0_B
07/D2: 3880     	LOADI	C,NEXTTOK
07/D3: FF2E     	JUMP	INDIR
07/D5:          	
07/D4:          	; LOOK FOR SPECIAL VALUES
07/D4: 802F     	LOAD	A,[TOKEN]
07/D5: A011     	STORE	[CHAR],A
07/D6: 7081     	SUBI	A,NUMERIC
07/D7: F6AF     	BRZ	0B
07/D8: 70FF     	SUBI	A,SYMBOL-NUMERIC
07/D9: F6AD     	BRZ	0B
07/DA: 70C0     	SUBI	A,'@'-SYMBOL
07/DB: F6AB     	BRZ	0B
07/DC: 70E8     	SUBI	A,'('-'@'
07/DD: F6A9     	BRZ	0B
07/DF:          	
07/DE:          	; THIS IS SOME SORT OF OPERATION
07/DE: 3408     	LOADI	B,EXP2_B
07/DF: 3880     	LOADI	C,PARSEXD
07/E0: FF21     	JUMP	INDIR
07/E2:          
07/E1:          BI	= BI+1
07/E1:          .TEXT
07/E1:          .BANK	BI
08/80:          EXP2_B	= BI
08/80:          
08/80:          	; HANDLE OTHER CHARACTERS IN EXPRESSION
08/80:          	; ALSO GET PRECEDENCE OF CHARACTER
08/80: 3808     PARSEXD:LOADI	C,BI
08/81: BB01     	STOREF	[D+1],C
08/82: 3802     	LOADI	C,2
08/83: 7003     	SUBI	A,'+'-'('
08/84: F63C     	BRZ	5F
08/85: 7002     	SUBI	A,'-'-'+'
08/86: F63A     	BRZ	5F
08/87: 3803     	LOADI	C,3
08/88: 70FD     	SUBI	A,'*'-'-'
08/89: F637     	BRZ	5F
08/8A: 7005     	SUBI	A,'/'-'*'
08/8B: F635     	BRZ	5F
08/8C: 70F6     	SUBI	A,'%'-'/'
08/8D: F633     	BRZ	5F
08/8E: 3807     	LOADI	C,7
08/8F: 7057     	SUBI	A,'|'-'%'
08/90: F630     	BRZ	5F
08/91: 3805     	LOADI	C,5
08/92: 70AA     	SUBI	A,'&'-'|'
08/93: F62D     	BRZ	5F
08/94: 3801     	LOADI	C,1
08/95: 70FB     	SUBI	A,'!'-'&'
08/96: F62A     	BRZ	5F
08/97: 3806     	LOADI	C,6
08/98: 703D     	SUBI	A,'^'-'!'
08/99: F627     	BRZ	5F
08/9A: 70CB     	SUBI	A,')'-'^'
08/9B: F713     	BRNZ	3F
08/9D:          	
08/9C:          	; PROCESS RIGHT PARENTHESIS
08/9C: 802C     0:	LOAD	A,[EINDEX]
08/9D: 3418     	LOADI	B,ESTACK
08/9E: D100     	CMP	A,B
08/9F: F804     	BRA	1F
08/A1:          	
08/A0:          	; ERROR! PARENTHESIS ARE MISMATCHED
08/A0: 3088     	LOADI	A,E_PAREN
08/A1: 3401     	LOADI	B,CORE0_B
08/A2: 38D2     	LOADI	C,ERROR
08/A3: FF5E     	JUMP	INDIR
08/A5:          	
08/A4:          	; CHECK TOP OF ESTACK
08/A4: 94FE     1:	LOADF	B,[A+0-2]
08/A5: 7428     	SUBI	B,'('
08/A6: F605     	BRZ	2F
08/A8:          	
08/A7:          	; POP OFF OF ESTACK
08/A7: 389C     	LOADI	C,0B
08/A8: BB00     	STOREF	[D],C
08/A9: 3409     	LOADI	B,EXP3_B
08/AA: 3880     	LOADI	C,ESTKPOP
08/AB: FF56     	JUMP	INDIR
08/AD:          
08/AC:          	; DO FINAL POP AND EXIT
08/AC: 7002     2:	SUBI	A,2
08/AD: A02C     	STORE	[EINDEX],A
08/AE: FF23     	JUMP	6F
08/B0:          	
08/AF:          	; CHECK FOR SHIFTS
08/AF: 7015     3:	SUBI	A,'>'-')'
08/B0: F602     	BRZ	4F
08/B1: 70FE     	SUBI	A,'<'-'>'
08/B2: F722     	BRNZ	9F
08/B4:          
08/B3:          	; IT'S A '<<' OR '>>' (HOPEFULLY)
08/B3:          	; GET THE NEXT TOKEN TO CONFIRM
08/B3: 38B8     4:	LOADI	C,@+5
08/B4: BB00     	STOREF	[D],C
08/B5: 3404     	LOADI	B,TOK0_B
08/B6: 3880     	LOADI	C,NEXTTOK
08/B7: FF4A     	JUMP	INDIR
08/B9:          	
08/B8:          	; IF THE NEXT TOKEN IS THE SAME AS THE LAST, WE ARE GOOD
08/B8: 802F     	LOAD	A,[TOKEN]
08/B9: 8411     	LOAD	B,[CHAR]
08/BA: D100     	CMP	A,B
08/BB: 3804     	LOADI	C,4
08/BC: F604     	BRZ	5F
08/BE:          	
08/BD:          	; BOO! ERROR!
08/BD: 3083     	LOADI	A,E_UXTOK
08/BE: 3401     	LOADI	B,CORE0_B
08/BF: 38D2     	LOADI	C,ERROR
08/C0: FF41     	JUMP	INDIR
08/C2:          
08/C1:          	; WE HAVE A SPECIAL CHARACTER
08/C1:          	; C = PRECEDENCE
08/C1: A811     5:	STORE	[PRECED],C
08/C3:          	
08/C2:          	; CHECK EINDEX
08/C2: 802C     0:	LOAD	A,[EINDEX]
08/C3: 3418     	LOADI	B,ESTACK
08/C4: D100     	CMP	A,B
08/C5: F609     	BRZ	5F
08/C7:          
08/C6:          	; COMPARE PRECEDENCE OF THE TOP OF THE ESTACK WITH OP PRECEDENCE
08/C6: 94FF     	LOADF	B,[A+0-1]
08/C7: 8011     	LOAD	A,[PRECED]
08/C8: D100     	CMP	A,B
08/C9: F805     	BRA	5F
08/CB:          	
08/CA:          	; POP OFF OF ESTACK
08/CA: 38C2     	LOADI	C,0B
08/CB: BB00     	STOREF	[D],C
08/CC: 3409     	LOADI	B,EXP3_B
08/CD: 3880     	LOADI	C,ESTKPOP
08/CE: FF33     	JUMP	INDIR
08/D0:          	
08/CF:          	; PUSH ONTO ESTACK
08/CF: 3407     5:	LOADI	B,EXP1_B
08/D0: 38BD     	LOADI	C,PARSEXB
08/D1: FF30     	JUMP	INDIR
08/D3:          
08/D2:          	; GET THE NEXT TOKEN
08/D2: 3407     6:	LOADI	B,EXP1_B
08/D3: 38CD     	LOADI	C,PARSEXC
08/D4: FF2D     	JUMP	INDIR
08/D6:          	
08/D5:          	; CAN'T RECOGNIZE CHARACTER, END OF EXPRESSION
08/D5:          	; AND WE ARE DONE
08/D5: 802C     9:	LOAD	A,[EINDEX]
08/D6: 3418     	LOADI	B,ESTACK
08/D7: D100     	CMP	A,B
08/D8: F605     	BRZ	0F
08/DA:          	
08/D9:          	; POP OFF THE EXPRESSION STACK
08/D9: 38D5     	LOADI	C,9B
08/DA: BB00     	STOREF	[D],C
08/DB: 3409     	LOADI	B,EXP3_B
08/DC: 3880     	LOADI	C,ESTKPOP
08/DD: FF24     	JUMP	INDIR
08/DF:          	
08/DE:          	; ESTACK IS EMPTY
08/DE:          	; MAKE SURE THERE IS 1 IN VSTACK
08/DE: 802D     0:	LOAD	A,[VINDEX]
08/DF: 3424     	LOADI	B,VSTACK+2
08/E0: D100     	CMP	A,B
08/E1: F604     	BRZ	1F
08/E3:          
08/E2:          	; ERROR :(
08/E2: 3084     	LOADI	A,E_VSTKO
08/E3: 3401     	LOADI	B,CORE0_B
08/E4: 38D2     	LOADI	C,ERROR
08/E5: FF1C     	JUMP	INDIR
08/E7:          
08/E6:          	; SET RESULT TO VALUE
08/E6: 98FF     1:	LOADF	C,[A+0-1]
08/E7: 94FE     	LOADF	B,[A+0-2]
08/E8: A412     	STORE	[VALUE],B
08/E9: A813     	STORE	[VALUE+1],C
08/EB:          
08/EA:          	; RETURN
08/EA: 802E     	LOAD	A,[ISDEF]
08/EB: 5C02     	ADDI	D,2
08/EC: FF16     	JUMP	IRET
08/EE:          
08/ED:          BI	= BI+1
08/ED:          .TEXT
08/ED:          .BANK	BI
09/80:          EXP3_B	= BI
09/80:          
09/80:          	; POP A VALUE OFF OF THE ESTACK
09/80:          	; CHECK IF EXPRESSION STACK IS EMPTY
09/80: 3087     ESTKPOP:LOADI	A,E_ESTKD
09/81: 842C     	LOAD	B,[EINDEX]
09/82: 3818     	LOADI	C,ESTACK
09/83: D600     	CMP	B,C
09/84: F966     	BRBE	9F
09/86:          	
09/85:          	; POP VALUE OFF ESTACK
09/85: 7402     	SUBI	B,2
09/86: A42C     	STORE	[EINDEX],B
09/88:          	
09/87:          	; CHECK IF VALUE STACK HAS TWO VALUES
09/87: 3086     	LOADI	A,E_VSTKD
09/88: 842D     	LOAD	B,[VINDEX]
09/89: 3824     	LOADI	C,VSTACK+2
09/8A: D600     	CMP	B,C
09/8B: F95F     	BRBE	9F
09/8D:          
09/8C:          	; MOVE TWO VSTACK VALUES INTO [VALUE] AND [OPERAND]
09/8C: 91FF     	LOADF	A,[B+0-1]
09/8D: A015     	STORE	[OPERAND+1],A
09/8E: 91FE     	LOADF	A,[B+0-2]
09/8F: A014     	STORE	[OPERAND],A
09/90: 91FD     	LOADF	A,[B+0-3]
09/91: A013     	STORE	[VALUE+1],A
09/92: 91FC     	LOADF	A,[B+0-4]
09/93: A012     	STORE	[VALUE],A
09/95:          	
09/94:          	; RESPOSITION VSTACK POINTER
09/94: 7402     	SUBI	B,2
09/95: A42D     	STORE	[VINDEX],B
09/97:          	
09/96:          	; ARE WE DEFINED?
09/96: 802E     	LOAD	A,[ISDEF]
09/97: 5000     	ADDI	A,0
09/98: F74C     	BRNZ	8F
09/9A:          	
09/99:          	; GRAB THE OPERATION
09/99: 802C     	LOAD	A,[EINDEX]
09/9A: 9000     	LOADF	A,[A]
09/9C:          	
09/9B:          	; CHECK FOR ADDITION '+'
09/9B: 702B     	SUBI	A,'+'
09/9C: F70B     	BRNZ	7F
09/9E:          	
09/9D:          	; DO ADDITION OPERATION
09/9D: 8013     	LOAD	A,[VALUE+1]
09/9E: 8415     	LOAD	B,[OPERAND+1]
09/9F: 4100     	ADD	A,B
09/A0: A013     	STORE	[VALUE+1],A
09/A1: 8012     	LOAD	A,[VALUE]
09/A2: 8414     	LOAD	B,[OPERAND]
09/A3: F101     	BRNC	1F
09/A4: 5001     	ADDI	A,1
09/A5: 4100     1:	ADD	A,B
09/A6: A012     	STORE	[VALUE],A
09/A7: FF3D     	JUMP	8F
09/A9:          	
09/A8:          	; CHECK FOR SUBTRACTION '-'
09/A8: 7002     7:	SUBI	A,'-'-'+'
09/A9: F70B     	BRNZ	7F
09/AB:          	
09/AA:          	; DO SUBTRACTION OPERATION
09/AA: 8013     	LOAD	A,[VALUE+1]
09/AB: 8415     	LOAD	B,[OPERAND+1]
09/AC: 6100     	SUB	A,B
09/AD: A013     	STORE	[VALUE+1],A
09/AE: 8012     	LOAD	A,[VALUE]
09/AF: 8414     	LOAD	B,[OPERAND]
09/B0: F001     	BRC	1F
09/B1: 7001     	SUBI	A,1
09/B2: 6100     1:	SUB	A,B
09/B3: A012     	STORE	[VALUE],A
09/B4: FF30     	JUMP	8F
09/B6:          	
09/B5:          	; CHECK FOR MULTIPLICATION
09/B5: 70FD     7:	SUBI	A,'*'-'-'
09/B6: F72B     	BRNZ	7F
09/B8:          	
09/B7:          	; DO MULTIPLICATION OPERATION
09/B7: AC10     	STORE	[SPARK],D
09/B8: 8812     	LOAD	C,[VALUE]
09/B9: 8C13     	LOAD	D,[VALUE+1]
09/BA: 3000     	LOADI	A,0
09/BB: A012     	STORE	[VALUE],A
09/BC: A013     	STORE	[VALUE+1],A
09/BE:          	
09/BD:          	; ARE WE DONE YET?
09/BD: 5800     0:	ADDI	C,0
09/BE: F704     	BRNZ	1F
09/BF: 5C00     	ADDI	D,0
09/C0: F702     	BRNZ	1F
09/C1: 8C10     	LOAD	D,[SPARK]
09/C2: FF22     	JUMP	8F
09/C4:          	
09/C3:          	; SHIFT 'CD' RIGHT
09/C3:          	; IF BIT ZERO OF D IS NOT SET, THEN SKIP ADDING
09/C3:          	; [OPERAND] TO [VALUE]
09/C3: CD00     1:	SHIFTR	D
09/C4: F004     	BRC	3F
09/C5: C900     	SHIFTR	C
09/C6: F10F     	BRNC	6F
09/C7: 5C80     	ADDI	D,0X80
09/C8: FF0D     2:	JUMP	6F
09/C9: C900     3:	SHIFTR	C
09/CA: F101     	BRNC	4F
09/CB: 5C80     	ADDI	D,0X80
09/CD:          
09/CC:          	; ADD [OPERAND] TO [VALUE]
09/CC: 8013     4:	LOAD	A,[VALUE+1]
09/CD: 8415     	LOAD	B,[OPERAND+1]
09/CE: 4100     	ADD	A,B
09/CF: A013     	STORE	[VALUE+1],A
09/D0: 8012     	LOAD	A,[VALUE]
09/D1: 8414     	LOAD	B,[OPERAND]
09/D2: F101     	BRNC	5F
09/D3: 5001     	ADDI	A,1
09/D4: 4100     5:	ADD	A,B
09/D5: A012     	STORE	[VALUE],A
09/D7:          
09/D6:          	; SHIFT [OPERAND] LEFT
09/D6: 8015     6:	LOAD	A,[OPERAND+1]
09/D7: 4000     	SHIFTL	A
09/D8: A015     	STORE	[OPERAND+1],A
09/D9: 8014     	LOAD	A,[OPERAND]
09/DA: F104     	BRNC	6F
09/DB: 4000     	SHIFTL	A
09/DC: 5001     	ADDI	A,1
09/DD: A014     	STORE	[OPERAND],A
09/DE: FFDE     	JUMP	0B
09/DF: 4000     6:	SHIFTL	A
09/E0: A014     	STORE	[OPERAND],A
09/E1: FFDB     	JUMP	0B
09/E3:          
09/E2:          	; SWITCH INSTRUCTION BANK
09/E2: 340A     7:	LOADI	B,EXP4_B
09/E3: 3880     	LOADI	C,ESTKPOA
09/E4: FF1D     	JUMP	INDIR
09/E6:          
09/E5:          	; PLACE [VALUE] ON STACK AND RETURN
09/E5: 802D     8:	LOAD	A,[VINDEX]
09/E6: 8413     	LOAD	B,[VALUE+1]
09/E7: B4FF     	STOREF	[A+0-1],B
09/E8: 8412     	LOAD	B,[VALUE]
09/E9: B4FE     	STOREF	[A+0-2],B
09/EA: FF18     	JUMP	IRET
09/EC:          
09/EB:          	; HANDLE ERROR
09/EB: 3401     9:	LOADI	B,CORE0_B
09/EC: 38D2     	LOADI	C,ERROR
09/ED: FF14     	JUMP	INDIR
09/EF:          	
09/EE:          BI	= BI+1
09/EE:          .TEXT
09/EE:          .BANK	BI
0A/80:          EXP4_B	= BI
0A/80:          
0A/80:          	; CONTINUATION OF ESTKPOP
0A/80:          	; CHECK FOR DIVISION OR MODULUS
0A/80: 7005     ESTKPOA:SUBI	A,'/'-'*'
0A/81: F602     	BRZ	0F
0A/82: 70F6     	SUBI	A,'%'-'/'
0A/83: F74F     	BRNZ	7F
0A/85:          	
0A/84:          	; MAKE SURE OPERAND ISN'T ZERO
0A/84:          DVCOUNT	= CHAR
0A/84: 8014     0:	LOAD	A,[OPERAND]
0A/85: 5000     	ADDI	A,0
0A/86: F705     	BRNZ	0F
0A/87: 8015     	LOAD	A,[OPERAND+1]
0A/88: 5000     	ADDI	A,0 
0A/89: F702     	BRNZ	0F
0A/8B:          
0A/8A:          	; ERROR! DIVIDE BY ZERO
0A/8A: 3089     	LOADI	A,E_DZERO
0A/8B: FF50     	JUMP	9F
0A/8D:          	
0A/8C:          	; DO DIVISION
0A/8C: AC10     0:	STORE	[SPARK],D
0A/8E:          	
0A/8D:          	; RESET REMAINDER
0A/8D: 3800     	LOADI	C,0
0A/8E: 3C00     	LOADI	D,0
0A/90:          
0A/8F:          	; RESET COUNTER
0A/8F: 3010     	LOADI	A,16
0A/91:          
0A/90:          	; SHIFT QUOTIENT LEFT
0A/90:          	; MAIN DIVISOR LOOP
0A/90: A011     0:	STORE	[DVCOUNT],A
0A/91: 8013     	LOAD	A,[VALUE+1]
0A/92: 4000     	SHIFTL	A
0A/93: A013     	STORE	[VALUE+1],A
0A/94: 8012     	LOAD	A,[VALUE]
0A/95: F109     	BRNC	2F
0A/96: 4000     	SHIFTL	A
0A/97: F003     	BRC	1F
0A/98: 5001     	ADDI	A,1
0A/99: A012     	STORE	[VALUE],A
0A/9A: FF06     	JUMP	3F
0A/9B: 5001     1:	ADDI	A,1
0A/9C: 7000     	SUBI	A,0
0A/9D: A012     	STORE	[VALUE],A 
0A/9E: FF02     	JUMP	3F
0A/9F: 4000     2:	SHIFTL	A
0A/A0: A012     	STORE	[VALUE],A
0A/A2:          	
0A/A1:          	; SHIFT REMAINDER LEFT + CARRY
0A/A1: F002     3:	BRC	1F
0A/A2: 4F00     	SHIFTL	D
0A/A3: FF06     	JUMP	3F 
0A/A5:          	
0A/A4:          	; SHIFT BOTTOM 8 BITS (SHIFT IN)
0A/A4: 4F00     1:	SHIFTL	D
0A/A5: F002     	BRC	2F
0A/A6: 5C01     	ADDI	D,1
0A/A7: FF02     	JUMP	3F
0A/A8: 5C01     2:	ADDI	D,1
0A/A9: 7C00     	SUBI	D,0
0A/AB:          
0A/AA:          	; DO TOP 8 BITS
0A/AA: F002     3:	BRC	1F
0A/AB: 4A00     	SHIFTL	C
0A/AC: FF06     	JUMP	3F 
0A/AE:          	
0A/AD:          	; SHIFT TOP 8 BITS (SHIFT IN)
0A/AD: 4A00     1:	SHIFTL	C
0A/AE: F002     	BRC	2F
0A/AF: 5801     	ADDI	C,1
0A/B0: FF02     	JUMP	3F
0A/B1: 5801     2:	ADDI	C,1
0A/B2: 7800     	SUBI	C,0
0A/B4:          	
0A/B3:          	; SUBTRACT BY DIVISOR ([OPERAND])
0A/B3: 8015     3:	LOAD	A,[OPERAND+1]
0A/B4: 6C00     	SUB	D,A
0A/B5: 8014     	LOAD	A,[OPERAND]
0A/B6: F005     	BRC	1F
0A/B8:          	
0A/B7:          	; SUBTRACT THE CARRY
0A/B7: 7801     	SUBI	C,1
0A/B8: F003     	BRC	1F
0A/B9: 6800     	SUB	C,A
0A/BA: 5000     	ADDI	A,0
0A/BB: FF01     	JUMP	2F
0A/BD:          	
0A/BC: 6800     1:	SUB	C,A
0A/BE:          
0A/BD:          	; IF CARRY IS SET, SKIP ADD AND INCREMENT 
0A/BD: F007     2:	BRC	2F
0A/BF:          
0A/BE:          	; ADD DIVISOR TO REMAINDER
0A/BE: 8015     	LOAD	A,[OPERAND+1]
0A/BF: 4C00     	ADD	D,A
0A/C0: F101     	BRNC	1F
0A/C1: 5801     	ADDI	C,1
0A/C2: 8014     1:	LOAD	A,[OPERAND]
0A/C3: 4800     	ADD	C,A
0A/C4: FF03     	JUMP	3F
0A/C6:          	
0A/C5:          	; INCREMENT [VALUE+1]
0A/C5: 8013     2:	LOAD	A,[VALUE+1]
0A/C6: 5001     	ADDI	A,1
0A/C7: A013     	STORE	[VALUE+1],A
0A/C9:          	
0A/C8:          	; DECREMENT COUNTER
0A/C8: 8011     3:	LOAD	A,[DVCOUNT]
0A/C9: 7001     	SUBI	A,1
0A/CA: F7C5     	BRNZ	0B
0A/CC:          
0A/CB:          	; DONE, REGRAB THE OPERATION
0A/CB: 802C     6:	LOAD	A,[EINDEX]
0A/CC: 9000     	LOADF	A,[A]
0A/CD: 702F     	SUBI	A,'/'
0A/CE: F602     	BRZ	6F
0A/D0:          	
0A/CF:          	; SET [VALUE] TO REMAINDER
0A/CF: A812     	STORE	[VALUE],C
0A/D0: AC13     	STORE	[VALUE+1],D
0A/D2:          
0A/D1:          	; RESTORE STACK
0A/D1: 8C10     6:	LOAD	D,[SPARK]
0A/D2: FF03     	JUMP	8F
0A/D4:          
0A/D3:          	; SWITCH INSTRUCTION BANK
0A/D3: 340B     7:	LOADI	B,EXP5_B
0A/D4: 3880     	LOADI	C,ESTKPOB
0A/D5: FF2C     	JUMP	INDIR
0A/D7:          
0A/D6:          	; PLACE [VALUE] ON STACK AND RETURN
0A/D6: 802D     8:	LOAD	A,[VINDEX]
0A/D7: 8413     	LOAD	B,[VALUE+1]
0A/D8: B4FF     	STOREF	[A+0-1],B
0A/D9: 8412     	LOAD	B,[VALUE]
0A/DA: B4FE     	STOREF	[A+0-2],B
0A/DB: FF27     	JUMP	IRET
0A/DD:          
0A/DC:          	; HANDLE ERROR
0A/DC: 3401     9:	LOADI	B,CORE0_B
0A/DD: 38D2     	LOADI	C,ERROR
0A/DE: FF23     	JUMP	INDIR
0A/E0:          	
0A/DF:          BI	= BI+1
0A/DF:          .TEXT
0A/DF:          .BANK	BI
0B/80:          EXP5_B	= BI
0B/80:          
0B/80:          	; CONTINUATION OF ESTKPOP
0B/80:          	; CHECK FOR RIGHT SHIFT
0B/80: 7019     ESTKPOB:SUBI	A,'>'-'%'
0B/81: F715     	BRNZ	7F
0B/83:          	
0B/82:          	; GET THE COUNT
0B/82: 8814     	LOAD	C,[OPERAND]
0B/83: 5800     	ADDI	C,0
0B/84: 3410     	LOADI	B,16
0B/85: F704     	BRNZ	0F
0B/86: 8815     	LOAD	C,[OPERAND+1]
0B/87: D600     	CMP	B,C
0B/88: F901     	BRBE	0F
0B/89: 2600     	MOV	B,C
0B/8B:          
0B/8A:          	; CHECK COUNTER
0B/8A: 5400     0:	ADDI	B,0
0B/8B: F663     	BRZ	8F
0B/8D:          	
0B/8C:          	; SHIFT [VALUE] RIGHT
0B/8C: 8012     	LOAD	A,[VALUE]
0B/8D: C100     	SHIFTR	A
0B/8E: A012     	STORE	[VALUE],A
0B/8F: 8013     	LOAD	A,[VALUE+1]
0B/90: F104     	BRNC	1F
0B/91: C100     	SHIFTR	A
0B/92: 5080     	ADDI	A,0X80
0B/93: A013     	STORE	[VALUE+1],A
0B/94: FF19     	JUMP	2F
0B/95: C100     1:	SHIFTR	A
0B/96: A013     	STORE	[VALUE+1],A
0B/98:          	
0B/97:          	; CHECK FOR LEFT SHIFT
0B/97: 70FE     7:	SUBI	A,'<'-'>'
0B/98: F717     	BRNZ	7F
0B/9A:          	
0B/99:          	; GET THE COUNT
0B/99: 8814     	LOAD	C,[OPERAND]
0B/9A: 5800     	ADDI	C,0
0B/9B: 3410     	LOADI	B,16
0B/9C: F704     	BRNZ	0F
0B/9D: 8815     	LOAD	C,[OPERAND+1]
0B/9E: D600     	CMP	B,C
0B/9F: F901     	BRBE	0F
0B/A0: 2600     	MOV	B,C
0B/A2:          
0B/A1:          	; CHECK COUNTER
0B/A1: 5400     0:	ADDI	B,0
0B/A2: F64C     	BRZ	8F
0B/A4:          	
0B/A3:          	; SHIFT [VALUE] LEFT
0B/A3: 8013     	LOAD	A,[VALUE+1]
0B/A4: 4000     	SHIFTL	A
0B/A5: A013     	STORE	[VALUE+1],A
0B/A6: 8012     	LOAD	A,[VALUE]
0B/A7: F104     	BRNC	1F
0B/A8: 4000     	SHIFTL	A
0B/A9: 5001     	ADDI	A,1
0B/AA: A012     	STORE	[VALUE],A
0B/AB: FF02     	JUMP	2F
0B/AC: 4000     1:	SHIFTL	A
0B/AD: A012     	STORE	[VALUE],A
0B/AF:          
0B/AE: 7401     2:	SUBI	B,1
0B/AF: FFF1     	JUMP	0B
0B/B1:          	
0B/B0:          	; CHECK FOR LOGICAL AND
0B/B0: 70EA     7:	SUBI	A,'&'-'<'
0B/B1: F71B     	BRNZ	7F
0B/B3:          	
0B/B2:          	; DO LOGICAL AND BETWEEN [VALUE] AND [OPERAND]
0B/B2: 8012     	LOAD	A,[VALUE]
0B/B3: 8414     	LOAD	B,[OPERAND]
0B/B4: 3808     	LOADI	C,8
0B/B6:          	
0B/B5: 4000     0:	SHIFTL	A
0B/B6: F104     	BRNC	1F
0B/B7: 4500     	SHIFTL	B
0B/B8: F103     	BRNC	2F
0B/B9: 5001     	ADDI	A,1
0B/BA: FF01     	JUMP	2F
0B/BB: 4500     1:	SHIFTL	B
0B/BC: 7801     2:	SUBI	C,1
0B/BD: F7F7     	BRNZ	0B
0B/BE: A012     	STORE	[VALUE],A
0B/C0:          	
0B/BF:          	; DO LOGICAL AND BETWEEN [VALUE+1] AND [OPERAND+1]
0B/BF: 8013     	LOAD	A,[VALUE+1]
0B/C0: 8415     	LOAD	B,[OPERAND+1]
0B/C1: 3808     	LOADI	C,8
0B/C3:          	
0B/C2: 4000     0:	SHIFTL	A
0B/C3: F104     	BRNC	1F
0B/C4: 4500     	SHIFTL	B
0B/C5: F103     	BRNC	2F
0B/C6: 5001     	ADDI	A,1
0B/C7: FF01     	JUMP	2F
0B/C8: 4500     1:	SHIFTL	B
0B/C9: 7801     2:	SUBI	C,1
0B/CA: F7F7     	BRNZ	0B
0B/CB: A013     	STORE	[VALUE+1],A
0B/CC: FF22     	JUMP	8F
0B/CE:          	
0B/CD:          	; CHECK FOR LOGICAL OR
0B/CD: 7056     7:	SUBI	A,'|'-'&'
0B/CE: F71D     	BRNZ	7F
0B/D0:          	
0B/CF:          	; DO LOGICAL OR BETWEEN [VALUE] AND [OPERAND]
0B/CF: 8012     	LOAD	A,[VALUE]
0B/D0: 8414     	LOAD	B,[OPERAND]
0B/D1: 3808     	LOADI	C,8
0B/D3:          	
0B/D2: 4000     0:	SHIFTL	A
0B/D3: F103     	BRNC	1F
0B/D4: 4500     	SHIFTL	B
0B/D5: 5001     	ADDI	A,1
0B/D6: FF03     	JUMP	2F
0B/D7: 4500     1:	SHIFTL	B
0B/D8: F101     	BRNC	2F
0B/D9: 5001     	ADDI	A,1
0B/DA: 7801     2:	SUBI	C,1
0B/DB: F7F6     	BRNZ	0B
0B/DC: A012     	STORE	[VALUE],A
0B/DE:          
0B/DD:          	; DO LOGICAL OR BETWEEN [VALUE+1] AND [OPERAND+1]
0B/DD: 8013     	LOAD	A,[VALUE+1]
0B/DE: 8415     	LOAD	B,[OPERAND+1]
0B/DF: 3808     	LOADI	C,8
0B/E1:          	
0B/E0: 4000     0:	SHIFTL	A
0B/E1: F103     	BRNC	1F
0B/E2: 4500     	SHIFTL	B
0B/E3: 5001     	ADDI	A,1
0B/E4: FF03     	JUMP	2F
0B/E5: 4500     1:	SHIFTL	B
0B/E6: F101     	BRNC	2F
0B/E7: 5001     	ADDI	A,1
0B/E8: 7801     2:	SUBI	C,1
0B/E9: F7F6     	BRNZ	0B
0B/EA: A013     	STORE	[VALUE+1],A
0B/EB: FF03     	JUMP	8F
0B/ED:          	
0B/EC:          	; SWITCH INSTRUCTION BANK
0B/EC: 340C     7:	LOADI	B,EXP6_B
0B/ED: 3880     	LOADI	C,ESTKPOC
0B/EE: FF13     	JUMP	INDIR
0B/F0:          
0B/EF:          	; PLACE [VALUE] ON STACK AND RETURN
0B/EF: 802D     8:	LOAD	A,[VINDEX]
0B/F0: 8413     	LOAD	B,[VALUE+1]
0B/F1: B4FF     	STOREF	[A+0-1],B
0B/F2: 8412     	LOAD	B,[VALUE]
0B/F3: B4FE     	STOREF	[A+0-2],B
0B/F4: FF0E     	JUMP	IRET
0B/F6:          	
0B/F5:          BI	= BI+1
0B/F5:          .TEXT
0B/F5:          .BANK	BI
0C/80:          EXP6_B	= BI
0C/80:          
0C/80:          	; CONTINUATION OF ESTKPOP
0C/80:          	; CHECK FOR XOR
0C/80: 70E2     ESTKPOC:SUBI	A,'^'-'|'
0C/81: F71F     	BRNZ	7F
0C/83:          	
0C/82:          	; DO LOGICAL XOR BETWEEN [VALUE] AND [OPERAND]
0C/82: 8012     	LOAD	A,[VALUE]
0C/83: 8414     	LOAD	B,[OPERAND]
0C/84: 3808     	LOADI	C,8
0C/86:          	
0C/85: 4000     0:	SHIFTL	A
0C/86: F104     	BRNC	1F
0C/87: 4500     	SHIFTL	B
0C/88: F005     	BRC	2F
0C/89: 5001     	ADDI	A,1
0C/8A: FF03     	JUMP	2F
0C/8B: 4500     1:	SHIFTL	B
0C/8C: F101     	BRNC	2F
0C/8D: 5001     	ADDI	A,1
0C/8E: 7801     2:	SUBI	C,1
0C/8F: F7F5     	BRNZ	0B
0C/90: A012     	STORE	[VALUE],A
0C/92:          	
0C/91:          	; DO LOGICAL XOR BETWEEN [VALUE+1] AND [OPERAND+1]
0C/91: 8013     	LOAD	A,[VALUE+1]
0C/92: 8415     	LOAD	B,[OPERAND+1]
0C/93: 3808     	LOADI	C,8
0C/95:          	
0C/94: 4000     0:	SHIFTL	A
0C/95: F104     	BRNC	1F
0C/96: 4500     	SHIFTL	B
0C/97: F005     	BRC	2F
0C/98: 5001     	ADDI	A,1
0C/99: FF03     	JUMP	2F
0C/9A: 4500     1:	SHIFTL	B
0C/9B: F101     	BRNC	2F
0C/9C: 5001     	ADDI	A,1
0C/9D: 7801     2:	SUBI	C,1
0C/9E: F7F5     	BRNZ	0B
0C/9F: A013     	STORE	[VALUE+1],A
0C/A0: FF29     	JUMP	8F
0C/A2:          	
0C/A1:          	; CHECK FOR NOT-OR
0C/A1: 70C3     7:	SUBI	A,'!'-'^'
0C/A2: F721     	BRNZ	7F
0C/A4:          	
0C/A3:          	; DO LOGICAL NOT-OR BETWEEN [VALUE] AND [OPERAND]
0C/A3: 8012     	LOAD	A,[VALUE]
0C/A4: 8814     	LOAD	C,[OPERAND]
0C/A5: 34FF     	LOADI	B,0XFF
0C/A6: 6600     	SUB	B,C
0C/A7: 3808     	LOADI	C,8
0C/A9:          	
0C/A8: 4000     0:	SHIFTL	A
0C/A9: F103     	BRNC	1F
0C/AA: 4500     	SHIFTL	B
0C/AB: 5001     	ADDI	A,1
0C/AC: FF03     	JUMP	2F
0C/AD: 4500     1:	SHIFTL	B
0C/AE: F101     	BRNC	2F
0C/AF: 5001     	ADDI	A,1
0C/B0: 7801     2:	SUBI	C,1
0C/B1: F7F6     	BRNZ	0B
0C/B2: A012     	STORE	[VALUE],A
0C/B4:          
0C/B3:          	; DO LOGICAL NOT-OR BETWEEN [VALUE+1] AND [OPERAND+1]
0C/B3: 8013     	LOAD	A,[VALUE+1]
0C/B4: 8815     	LOAD	C,[OPERAND+1]
0C/B5: 34FF     	LOADI	B,0XFF
0C/B6: 6600     	SUB	B,C
0C/B7: 3808     	LOADI	C,8
0C/B9:          	
0C/B8: 4000     0:	SHIFTL	A
0C/B9: F103     	BRNC	1F
0C/BA: 4500     	SHIFTL	B
0C/BB: 5001     	ADDI	A,1
0C/BC: FF03     	JUMP	2F
0C/BD: 4500     1:	SHIFTL	B
0C/BE: F101     	BRNC	2F
0C/BF: 5001     	ADDI	A,1
0C/C0: 7801     2:	SUBI	C,1
0C/C1: F7F6     	BRNZ	0B
0C/C2: A013     	STORE	[VALUE+1],A
0C/C3: FF06     	JUMP	8F
0C/C5:          	
0C/C4:          	; ENSURE THIS ISN'T A LEFT PARENTHESIS
0C/C4: 7007     7:	SUBI	A,'('-'!'
0C/C5: F704     	BRNZ	8F	; IDK WHAT IT IS AT THIS POINT
0C/C7:          	
0C/C6:          	; ERROR! PARENTHESIS ARE MISMATCHED
0C/C6: 3088     	LOADI	A,E_PAREN
0C/C7: 3401     	LOADI	B,CORE0_B
0C/C8: 38D2     	LOADI	C,ERROR
0C/C9: FF38     	JUMP	INDIR
0C/CB:          
0C/CA:          	; PLACE [VALUE] ON STACK AND RETURN
0C/CA: 802D     8:	LOAD	A,[VINDEX]
0C/CB: 8413     	LOAD	B,[VALUE+1]
0C/CC: B4FF     	STOREF	[A+0-1],B
0C/CD: 8412     	LOAD	B,[VALUE]
0C/CE: B4FE     	STOREF	[A+0-2],B
0C/CF: FF33     	JUMP	IRET
0C/D1:          ; AS4.S
0C/D0:          ; ASSEMBLER SYMBOL MANAGEMENT
0C/D0:          ; GAVIN TERSTEEG, 2024
0C/D0:          ; SDMAY24-14
0C/D0:          
0C/D0:          BI	= BI+1
0C/D0:          .TEXT
0C/D0:          .BANK	BI
0D/80:          SYM0_B	= BI
0D/80:          
0D/80:          	; DEFINES OR UPDATES A SYMBOL IN THE TABLE
0D/80:          	; [TBUF] = SYMBOL NAME
0D/80:          	; RETURNS POINTER TO THE SYMBOL VALUE IN [DFBANK] AND [DFPNTR]
0D/80: 340E     DEFINE:	LOADI	B,SYM1_B
0D/81: 3880     	LOADI	C,DEFINEA
0D/82: FF7F     	JUMP	INDIR
0D/84:          	
0D/83:          	; GET A SYMBOL VALUE
0D/83:          	; [TBUF] = SYMBOL NAME
0D/83:          	; RETURNS VALUE OF SYMBOL IN [VALUE]
0D/83:          	; A = 0X00 IF DEFINE, 0XFF IF UNDEFINED 
0D/83: AC10     GETSYM:STORE	[SPARK],D
0D/85:          
0D/84:          	; START BY SEARCHING THE SYMBOL TABLE FOR EXISTING SYMBOLS
0D/84: 3409     	LOADI	B,STAB_B
0D/85: 3C01     0:	LOADI	D,ST_NAME
0D/86: A416     	STORE	[TEMP],B
0D/88:          	
0D/87:          	; DO NAME CHECK
0D/87: 38F8     1:	LOADI	C,0-8
0D/89:          
0D/88:          	; COMPARE TBUF AND CURRENT SYMBOL
0D/88: 5808     2:	ADDI	C,8
0D/89: 9239     	LOADF	A,[C+TBUF]
0D/8A: 8416     	LOAD	B,[TEMP]
0D/8B: A480     	STORE	[DBANK],B
0D/8C: 9700     	LOADF	B,[D]
0D/8D: D100     	CMP	A,B
0D/8E: F715     	BRNZ	3F
0D/8F: 5000     	ADDI	A,0
0D/90: F606     	BRZ	2F
0D/91: 3000     	LOADI 	A,0
0D/92: A080     	STORE	[DBANK],A
0D/93: 5C01     	ADDI	D,1
0D/94: 7807     	SUBI	C,7
0D/95: F7F2     	BRNZ	2B
0D/96: 3808     	LOADI	C,8
0D/98:          	
0D/97:          	; STRING TERMINATES, FIX POINTER AND RETURN
0D/97: 6E00     2:	SUB	D,C
0D/98: 5C08     	ADDI	D,8
0D/9A:          	
0D/99:          	; FOUND THE SYMBOL, GRAB THE VALUE
0D/99: 9301     	LOADF	A,[D+1]
0D/9A: 9702     	LOADF	B,[D+2]
0D/9B: 9F00     	LOADF	D,[D]
0D/9C: 3800     	LOADI	C,0
0D/9D: A880     	STORE	[DBANK],C
0D/9E: A012     	STORE	[VALUE],A
0D/9F: A413     	STORE	[VALUE+1],B
0D/A0: 30FF     	LOADI	A,0XFF
0D/A1: 6300     	SUB	A,D
0D/A2: 8C10     	LOAD	D,[SPARK]
0D/A3: FF5F     	JUMP	IRET
0D/A5:          
0D/A4:          	; SYMBOL DOES NOT MATCH
0D/A4: 6E00     3:	SUB	D,C
0D/A5: 9300     	LOADF	A,[D]
0D/A6: 5000     	ADDI	A,0
0D/A7: F60E     	BRZ	5F
0D/A9:          	
0D/A8:          	; EXIT SYMBOL ENTRY
0D/A8: 5C16     	ADDI	D,ST_SIZE*2
0D/A9: F404     	BRN	4F
0D/AA: 7C0B     	SUBI	D,ST_SIZE
0D/AB: 3000     	LOADI	A,0
0D/AC: A080     	STORE	[DBANK],A
0D/AD: FFD9     	JUMP	1B
0D/AF:          
0D/AE:          	; NEXT BANK
0D/AE: 8000     4:	LOAD	A,[ST_NEXT]
0D/AF: 5000     	ADDI	A,0
0D/B0: 3800     	LOADI	C,0
0D/B1: A880     	STORE	[DBANK],C
0D/B2: F603     	BRZ	5F
0D/B3: A016     	STORE	[TEMP],A
0D/B4: 3C01     	LOADI	D,ST_NAME
0D/B5: FFD1     	JUMP	1B
0D/B7:          
0D/B6:          	; CANNOT FIND SYMBOL!
0D/B6: 3800     5:	LOADI	C,0
0D/B7: A880     	STORE	[DBANK],C
0D/B8: 8C10     	LOAD	D,[SPARK]
0D/B9: 30FF     	LOADI	A,0XFF
0D/BA: FF48     	JUMP	IRET
0D/BC:          
0D/BB:          
0D/BB:          BI	= BI+1
0D/BB:          .TEXT
0D/BB:          .BANK	BI
0E/80:          SYM1_B	= BI
0E/80:          
0E/80:          	; SHADOW OF DEFINE
0E/80: AC10     DEFINEA:STORE	[SPARK],D
0E/82:          
0E/81:          	; START BY SEARCHING THE SYMBOL TABLE FOR EXISTING SYMBOLS
0E/81: 3409     	LOADI	B,STAB_B
0E/82: 3C01     0:	LOADI	D,ST_NAME
0E/83: A44F     	STORE	[DFBANK],B
0E/85:          	
0E/84:          	; DO NAME CHECK
0E/84: 38F8     1:	LOADI	C,0-8
0E/86:          
0E/85:          	; COMPARE TBUF AND CURRENT SYMBOL
0E/85: 5808     2:	ADDI	C,8
0E/86: 9239     	LOADF	A,[C+TBUF]
0E/87: 844F     	LOAD	B,[DFBANK]
0E/88: A480     	STORE	[DBANK],B
0E/89: 9700     	LOADF	B,[D]
0E/8A: D100     	CMP	A,B
0E/8B: F70F     	BRNZ	3F
0E/8C: 5000     	ADDI	A,0
0E/8D: F606     	BRZ	2F
0E/8E: 3000     	LOADI 	A,0
0E/8F: A080     	STORE	[DBANK],A
0E/90: 5C01     	ADDI	D,1
0E/91: 7807     	SUBI	C,7
0E/92: F7F2     	BRNZ	2B
0E/93: 3808     	LOADI	C,8
0E/95:          	
0E/94:          	; STRING TERMINATES, FIX POINTER AND RETURN
0E/94: 6E00     2:	SUB	D,C
0E/95: 5C08     	ADDI	D,8
0E/97:          	
0E/96:          	; FOUND THE SYMBOL, SAVE POINTER
0E/96: 3000     9:	LOADI	A,0
0E/97: A080     	STORE	[DBANK],A
0E/98: AC50     	STORE	[DFPNTR],D
0E/99: 8C10     	LOAD	D,[SPARK]
0E/9A: FF68     	JUMP	IRET
0E/9C:          
0E/9B:          	; SYMBOL DOES NOT MATCH
0E/9B: 6E00     3:	SUB	D,C
0E/9C: 9300     	LOADF	A,[D]
0E/9D: 5000     	ADDI	A,0
0E/9E: F626     	BRZ	0F
0E/A0:          	
0E/9F:          	; EXIT SYMBOL ENTRY
0E/9F: 5C16     	ADDI	D,ST_SIZE*2
0E/A0: F404     	BRN	4F
0E/A1: 7C0B     	SUBI	D,ST_SIZE
0E/A2: 3000     	LOADI	A,0
0E/A3: A080     	STORE	[DBANK],A
0E/A4: FFDF     	JUMP	1B
0E/A6:          
0E/A5:          	; NEXT BANK
0E/A5: 8000     4:	LOAD	A,[ST_NEXT]
0E/A6: 5000     	ADDI	A,0
0E/A7: 3800     	LOADI	C,0
0E/A8: A880     	STORE	[DBANK],C
0E/A9: F603     	BRZ	5F
0E/AA: A04F     	STORE	[DFBANK],A
0E/AB: 3C01     	LOADI	D,ST_NAME
0E/AC: FFD7     	JUMP	1B
0E/AE:          	
0E/AD:          	; ALLOCATE A NEW BANK
0E/AD: 844C     5:	LOAD	B,[NFREE]
0E/AE: 8071     	LOAD	A,[MAX_DB]
0E/AF: D400     	CMP	B,A
0E/B0: F904     	BRBE	6F
0E/B2:          	
0E/B1:          	; ERROR! OUT OF MEMORY
0E/B1: 308A     	LOADI	A,E_OMEM
0E/B2: 3401     	LOADI	B,CORE0_B
0E/B3: 38D2     	LOADI	C,ERROR
0E/B4: FF4D     	JUMP	INDIR
0E/B6:          	
0E/B5:          	; SETUP NEW BANK 
0E/B5: 5401     6:	ADDI	B,1
0E/B6: A44C     	STORE	[NFREE],B
0E/B7: 7401     	SUBI	B,1
0E/B8: 804F     	LOAD	A,[DFBANK]
0E/B9: A080     	STORE	[DBANK],A
0E/BA: A400     	STORE	[ST_NEXT],B
0E/BB: A480     	STORE	[DBANK],B
0E/BD:          	
0E/BC: 3000     	LOADI	A,0
0E/BD: 3801     	LOADI	C,ST_NAME
0E/BE: A000     	STORE	[ST_NEXT],A
0E/BF: B200     7:	STOREF	[C+(ST_NAME-ST_NAME)],A
0E/C0: B208     	STOREF	[C+(ST_DEF-ST_NAME)],A
0E/C1: 580B     	ADDI	C,ST_SIZE
0E/C2: F5FC     	BRNN	7B
0E/C4:          	
0E/C3: A080     	STORE	[DBANK],A
0E/C4: FFBD     	JUMP	0B
0E/C6:          	
0E/C5:          	; EMPTY SLOT, PUT THE SYMBOL HERE
0E/C5: 3808     0:	LOADI	C,8
0E/C6: 5C08     	ADDI	D,8
0E/C7: 3400     1:	LOADI	B,0
0E/C8: A480     	STORE	[DBANK],B
0E/C9: 7C01     	SUBI	D,1
0E/CA: 7801     	SUBI	C,1
0E/CB: F105     	BRNC	2F
0E/CC: 9239     	LOADF	A,[C+TBUF]
0E/CD: 844F     	LOAD	B,[DFBANK]
0E/CE: A480     	STORE	[DBANK],B
0E/CF: B300     	STOREF	[D],A
0E/D0: FFF6     	JUMP	1B
0E/D2:          
0E/D1:          	; GO PLACE THE POINTER
0E/D1: 5C09     2:	ADDI	D,9
0E/D2: FFC3     	JUMP	9B
0E/D4:          
0E/D3:          	; START OF SYMBOL TABLE
0E/D3:          .BANK	BD
09/EE:          .DATA
09/00:          STAB_B	= BD
09/00:          
09/00:          	; SYMBOL TABLE DEFINITION
09/00:          	; 0X00: NEXT BANK
09/00:          	; 0X01-0X08: SYMBOL 0 NAME
09/00:          	; 0X09-0X0A: SYMBOL 1 VALUE
09/00:          	; 0X0B-0X13: SYMBOL 2 NAME
09/00:          	; 0X14-0X15: SYMBOL 2 VALUE
09/00:          	
09/00:          	; IF A SYMBOL NAME STARTS WITH 0X00, IT IS UNALLOCATED
09/00:          
09/00: 00       .DEFL BYTE ST_NEXT	0
09/01: 00000000
       00000000 .DEFL BYTE ST_NAME	0,0,0,0,0,0,0,0
09/09: 00       .DEFL BYTE ST_DEF	0
09/0A: 0000     .DEFL BYTE ST_VAL	0,0
09/0C:          ST_SIZE	= @-ST_NAME
09/0C:          
09/0C:          BD	= BD+1
09/0C:          
09/0C:          	; SET START OF HEAP
09/0C:          HEAP	= BD
