00/00:          ; DOSDEF.S
01/80:          ; THIS FILE CONTAINS IMPORTANT DEFINES USED IN DOS/281
01/80:          ; GAVIN TERSTEEG, 2024
01/80:          ; SDMAY24-14
01/80:          
01/80:          ; BIOS CALLS
01/80:          BOOT	= 0
01/80:          ALTBOOT = 1
01/80:          INDIR	= 2
01/80:          IRET	= 3
01/80:          SYSCALL	= 4
01/80:          SYSJUMP	= 5
01/80:          PRGM	= 6
01/80:          IWRITE	= 7
01/80:          ZSTART	= 8
01/80:          
01/80:          HALT	= 0X7F
01/80:          
01/80:          ; SYSTEM CALLS
01/80:          S_EXIT	= 0
01/80:          S_PUTC	= 1
01/80:          S_GETC	= 2
01/80:          S_STAT	= 3
01/80:          S_PUTS	= 4
01/80:          S_INPUT	= 5
01/80:          S_OPEN	= 6
01/80:          S_CLOSE	= 7
01/80:          S_READ	= 8
01/80:          S_WRITE	= 9
01/80:          S_FSRCH	= 10
01/80:          S_NEXT	= 11
01/80:          S_DELET	= 12
01/80:          S_CREAT	= 13
01/80:          S_FREE	= 14
01/80:          S_EXEC	= 15
01/80:          
01/80:          ; MEMORY AREAS
01/80:          CF_NAME	= 0X60
01/80:          CF_SIZE	= 0X68
01/80:          CF_USR	= 0X6A
01/80:          DFT_USR	= 0X6B
01/80:          ARG_BNK	= 0X6C
01/80:          BD_FREE	= 0X6E
01/80:          MAX_IB	= 0X70
01/80:          MAX_DB	= 0X71
01/80:          CMDL_B	= 0X72
01/80:          AUTO_B	= 0X73
01/80:          KERNMEM	= 0X78
01/80:          BIOSMEM	= 0X7C
01/80:          AU_RUN	= 0X00
01/80:          AU_PNTR	= 0X01
01/80:          AU_BANK	= 0X02
01/80:          AU_BLK	= 0X03
01/80:          AU_UA	= 0X04
01/80:          AU_FILE	= 0X06
01/80:          AU_MISC	= 0X18
01/80:          
01/80:          ; DATA BANK ADDRESS
01/80:          DBANK	= 0X80		
01/80:          
01/80:          
01/80:          ; AS0.S
01/80:          ; ASSEMBLER BACKBONE
01/80:          ; GAVIN TERSTEEG, 2024
01/80:          ; SDMAY24-14
01/80:          
01/80:          ; SET START OF HEAP
01/80:          HEAP	= BD
01/80:          
01/80:          ; BANK ALLOCATION STUFF
01/80:          BI	= 1
01/80:          BD	= 1
01/80:          
01/80:          ; MAXIMUM ARGUMENTS
01/80:          MAXARGS	= 13
01/80:          
01/80:          .TEXT
01/80:          .BANK	BI
01/80:          CORE0_B	= BI
01/80:          
01/80:          	; START BY PROCESSING THE ARGUMENTS
01/80: 3000     START:	LOADI	A,0
01/81: A080     	STORE	[DBANK],A
01/83:          	
01/82:          	; RESET ARG STATE
01/82: A000     	STORE	[ARGC],A
01/83: A00F     	STORE	[LFLAG],A
01/85:          	
01/84:          	; SET UP STACK
01/84: 3C5E     	LOADI	D,0X60-2
01/86:          	
01/85:          	; SYSCALL RETURN BANK
01/85: 3801     	LOADI	C,BI
01/86: BB01     	STOREF	[D+1],C
01/88:          	
01/87:          	; SET UP POINTER
01/87: 3800     	LOADI	C,0
01/89:          	
01/88:          	; GO TO ARGUMENT BANK
01/88: 8072     0:	LOAD	A,[CMDL_B]
01/89: A06C     	STORE	[ARG_BNK],A
01/8A: A080     	STORE	[DBANK],A
01/8C:          
01/8B:          	; SKIP THE CURRENT ARGUMENT
01/8B: 9200     1:	LOADF	A,[C]
01/8C: 3420     	LOADI	B,0X20
01/8D: D100     	CMP	A,B
01/8E: F902     	BRBE	2F
01/8F: 5801     	ADDI	C,1
01/90: FFFA     	JUMP	1B
01/92:          
01/91:          	; LOOK FOR AN ARGUMENT
01/91: 9200     2:	LOADF	A,[C]
01/92: 5000     	ADDI	A,0
01/93: F630     	BRZ	ARGDONE
01/94: D100     	CMP	A,B
01/95: F802     	BRA	3F
01/96: 5801     	ADDI	C,1
01/97: FFF9     	JUMP	2B
01/99:          
01/98:          	; IS IT A FLAG?
01/98: 342D     3:	LOADI	B,'-'
01/99: D100     	CMP	A,B
01/9A: F714     	BRNZ	5F
01/9C:          	
01/9B:          	; HANDLE FLAGS HERE	
01/9B: 5801     4:	ADDI	C,1
01/9C: 9200     	LOADF	A,[C]
01/9D: 5000     	ADDI	A,0
01/9E: F625     	BRZ	ARGDONE
01/9F: 3420     	LOADI	B,0X20
01/A0: D100     	CMP	A,B
01/A1: F9EF     	BRBE	2B
01/A3:          	
01/A2:          	; REGISTER THE FLAG
01/A2: 3400     	LOADI	B,0
01/A3: A480     	STORE	[DBANK],B
01/A5:          	
01/A4: 704C     	SUBI	A,'L'
01/A5: F701     	BRNZ	@+2
01/A6: 340F     	LOADI	B,LFLAG
01/A8:          	
01/A7:          	; IS IT A RECOGNIZED FLAG?
01/A7: 5400     	ADDI	B,0
01/A8: F60F     	BRZ	ARGBAD
01/A9: 3001     	LOADI	A,1
01/AA: B100     	STOREF	[B],A
01/AC:          
01/AB:          	; THERE MAY BE ANOTHER FLAG
01/AB: 8472     	LOAD	B,[CMDL_B]
01/AC: A46C     	STORE	[ARG_BNK],B
01/AD: A480     	STORE	[DBANK],B
01/AE: FFEC     	JUMP	4B
01/B0:          
01/AF:          	; SAVE THE ARGUMENT
01/AF: 3400     5:	LOADI	B,0
01/B0: A480     	STORE	[DBANK],B
01/B1: 8400     	LOAD	B,[ARGC]
01/B2: B901     	STOREF	[B+ARGV],C
01/B4:          	
01/B3:          	; DID WE EXCEED THE ALLOWED NUMBER OF ARGUMENTS
01/B3: 740D     	SUBI	B,MAXARGS
01/B4: F003     	BRC	ARGBAD
01/B5: 540E     	ADDI	B,MAXARGS+1
01/B6: A400     	STORE	[ARGC],B
01/B7: FFD0     	JUMP	0B
01/B9:          	
01/B8:          	; BAD ARGUMENT
01/B8: 3000     ARGBAD:	LOADI	A,0
01/B9: A080     	STORE	[DBANK],A
01/BB:          	
01/BA: 3001     	LOADI	A,ERR0_B
01/BB: A06C     	STORE	[ARG_BNK],A
01/BC: 3000     	LOADI	A,ERROR00
01/BE:          	
01/BD:          	; PRINT ERROR MESSAGE
01/BD: 3801     PRNTERR:LOADI	C,BI
01/BE: BB01     	STOREF	[D+1],C
01/BF: 3404     	LOADI	B,S_PUTS
01/C0: 38D5     	LOADI	C,EXIT
01/C1: FF42     	JUMP	SYSCALL	
01/C3:          
01/C2:          	; EXIT PROGRAM
01/C2: 3400     EXIT:	LOADI	B,0
01/C3: FF41     	JUMP	SYSJUMP
01/C5:          	
01/C4:          	; ARGUMENT PROCESSING DONE
01/C4: 3000     ARGDONE:LOADI	A,0
01/C5: A080     	STORE	[DBANK],A
01/C7:          	
01/C6:          	; CHECK ARG COUNT
01/C6: 8000     	LOAD	A,[ARGC]
01/C7: 5000     	ADDI	A,0
01/C8: F6EF     	BRZ	ARGBAD
01/CA:          	
01/C9:          	; RESET PASS TO FIRST
01/C9: 3000     	LOADI	A,0
01/CA: A044     	STORE	[PASS],A
01/CC:          	
01/CB:          	; SET NEXT FREE TO HEAP
01/CB: 3019     	LOADI	A,HEAP
01/CC: A04E     	STORE	[NFREE],A
01/CE:          	
01/CD:          	; RESET EMIT LOGIC
01/CD: 38D2     	LOADI	C,@+5
01/CE: BB00     	STOREF	[D],C
01/CF: 3415     	LOADI	B,EMIT0_B
01/D0: 3880     	LOADI	C,EMINIT
01/D1: FF30     	JUMP	INDIR
01/D3:          	
01/D2:          	; BEGIN ASSEMBLY
01/D2: 3403     	LOADI	B,MAIN0_B
01/D3: 3880     	LOADI	C,DOPASS
01/D4: FF2D     	JUMP	INDIR
01/D6:          
01/D5:          	; EXIT PROGRAM
01/D5: 3400     EXIT:	LOADI	B,S_EXIT
01/D6: FF2E     	JUMP	SYSJUMP
01/D8:          	
01/D7:          	; DO AN ERROR
01/D7:          	; A = ERROR #
01/D7:          ERRNO	= OPERAND
01/D7: 3400     ERROR:	LOADI	B,0
01/D8: A480     	STORE	[DBANK],B
01/D9: A014     	STORE	[ERRNO],A
01/DA: 3402     	LOADI	B,PRNT0_B
01/DB: 3880     	LOADI	C,PERHEAD
01/DC: FF25     	JUMP	INDIR
01/DE:          
01/DD:          BI	= BI+1
01/DD:          .TEXT
01/DD:          .BANK	BI
02/80:          PRNT0_B	= BI
02/80:          
02/80:          	; PRINTS THE ERROR HEADER
02/80:          	; THE CURRENTLY OPEN FILE AND LINE NUMBER WILL BE PRINTED
02/80:          	; FORMAT: '[FILE]:[LINE]: ERROR'
02/80: 3802     PERHEAD:LOADI	C,BI
02/81: BB01     	STOREF	[D+1],C
02/83:          	
02/82:          	; PRINT CURRENTLY OPEN FILE
02/82: 8047     	LOAD	A,[CURRFIL]
02/83: 9001     	LOADF	A,[A+ARGV]
02/85:          
02/84:          	; PRINT LOOP
02/84: A038     0:	STORE	[BUFPNTR],A
02/85: 8472     	LOAD	B,[CMDL_B]
02/86: A480     	STORE	[DBANK],B
02/87: 9000     	LOADF	A,[A]
02/88: 3400     	LOADI	B,0
02/89: A480     	STORE	[DBANK],B
02/8A: 3420     	LOADI	B,0X20
02/8B: D100     	CMP	A,B
02/8C: F906     	BRBE	1F
02/8D: 3401     	LOADI	B,S_PUTC
02/8E: 3890     	LOADI	C,@+2
02/8F: FF74     	JUMP	SYSCALL
02/90: 8038     	LOAD	A,[BUFPNTR]
02/91: 5001     	ADDI	A,1
02/92: FFF1     	JUMP	0B
02/94:          	
02/93:          	; PRINT ':'
02/93: 303A     1:	LOADI	A,':'
02/94: 3401     	LOADI	B,S_PUTC
02/95: 3897     	LOADI	C,@+2
02/96: FF6D     	JUMP	SYSCALL
02/98:          	
02/97:          	; PRINT LINE NUMBER
02/97: 8045     	LOAD	A,[LINENUM]
02/98: A012     	STORE	[VALUE],A
02/99: 8046     	LOAD	A,[LINENUM+1]
02/9A: A013     	STORE	[VALUE+1],A
02/9B: 389E     	LOADI	C,@+3
02/9C: BB00     	STOREF	[D],C
02/9D: FF16     	JUMP	PRINTD
02/9F:          	
02/9E:          	; PRINT ':' + SPACE
02/9E: 303A     	LOADI	A,':'
02/9F: 3401     	LOADI	B,S_PUTC
02/A0: 38A2     	LOADI	C,@+2
02/A1: FF62     	JUMP	SYSCALL
02/A2: 3020     	LOADI	A,0X20
02/A3: 3401     	LOADI	B,S_PUTC
02/A4: 38A6     	LOADI	C,@+2
02/A5: FF5E     	JUMP	SYSCALL
02/A7:          	
02/A6:          	; LOOKUP ERROR ON TABLE
02/A6: 8014     	LOAD	A,[ERRNO]
02/A7: 7080     	SUBI	A,0X80
02/A8: 4000     	SHIFTL	A
02/A9: 5034     	ADDI	A,ETABLE
02/AA: 3801     	LOADI	C,ERR0_B
02/AB: A880     	STORE	[DBANK],C
02/AC: 9400     	LOADF	B,[A]
02/AD: 9001     	LOADF	A,[A+1]
02/AE: 3800     	LOADI	C,0
02/AF: A880     	STORE	[DBANK],C
02/B0: A46C     	STORE	[ARG_BNK],B
02/B1: 3401     	LOADI	B,CORE0_B
02/B2: 38BD     	LOADI	C,PRNTERR
02/B3: FF4E     	JUMP	INDIR
02/B5:          	
02/B4:          
02/B4:          	; PRINTS VARIABLE [VALUE] AS A 16 BIT BASE-10 NUMBER
02/B4:          PADDING	= TEMP
02/B4:          LEAFRET	= TEMP+1
02/B4: 7C02     PRINTD: SUBI	D,2
02/B6:          	
02/B5:          	; SET PADDING TO NULL CHARACTER AT FIRST
02/B5: 3800     	LOADI	C,0
02/B6: A816     	STORE	[PADDING],C
02/B8:          	
02/B7:          V	= 10000
02/B7: 3027     	LOADI	A,V/256
02/B8: 3410     	LOADI	B,V%256
02/B9: 38BB     	LOADI	C,@+2
02/BA: FF14     	JUMP	DOCHAR
02/BC:          	
02/BB:          V	= 1000
02/BB: 3003     	LOADI	A,V/256
02/BC: 34E8     	LOADI	B,V%256
02/BD: 38BF     	LOADI	C,@+2
02/BE: FF10     	JUMP	DOCHAR
02/C0:          	
02/BF:          V	= 100
02/BF: 3000     	LOADI	A,V/256
02/C0: 3464     	LOADI	B,V%256
02/C1: 38C3     	LOADI	C,@+2
02/C2: FF0C     	JUMP	DOCHAR
02/C4:          	
02/C3:          V	= 10
02/C3: 3000     	LOADI	A,V/256
02/C4: 340A     	LOADI	B,V%256
02/C5: 38C7     	LOADI	C,@+2
02/C6: FF08     	JUMP	DOCHAR
02/C8:          	
02/C7: 3030     	LOADI	A,'0'
02/C8: A016     	STORE	[PADDING],A
02/CA:          	
02/C9:          V	= 1
02/C9: 3000     	LOADI	A,V/256
02/CA: 3401     	LOADI	B,V%256
02/CB: 38CD     	LOADI	C,@+2
02/CC: FF02     	JUMP	DOCHAR
02/CE:          	
02/CD: 5C02     	ADDI	D,2 
02/CE: FF34     	JUMP	IRET
02/D0:          	
02/CF:          	; A = UPPER SUB
02/CF:          	; B = LOWER SUB
02/CF: A817     DOCHAR:	STORE	[LEAFRET],C
02/D0: 8816     	LOAD	C,[PADDING]	
02/D1: A811     	STORE	[CHAR],C
02/D3:          	
02/D2:          	; PARK THE STACK
02/D2: AC10     	STORE	[SPARK],D
02/D4:          
02/D3:          	; GET THE SIZE
02/D3: 8812     0:	LOAD	C,[VALUE]
02/D4: 8C13     	LOAD	D,[VALUE+1]
02/D6:          	
02/D5:          	; DO 16 BIT SUBTRACTION
02/D5: 6D00     1:	SUB	D,B
02/D6: F002     	BRC	2F
02/D7: 7801     	SUBI	C,1
02/D8: F10D     	BRNC	4F
02/D9: 6800     2:	SUB	C,A
02/DA: F10B     	BRNC	4F
02/DC:          	
02/DB:          	; SAVE VALUE
02/DB: A812     	STORE	[VALUE],C
02/DC: AC13     	STORE	[VALUE+1],D
02/DE:          	
02/DD:          	; GET THE CHAR AND CHECK TO SEE IF IT IS A WHITESPACE
02/DD: 8811     	LOAD	C,[CHAR]
02/DE: 3C20     	LOADI	D,0X20
02/DF: DB00     	CMP	C,D
02/E0: F802     	BRA	3F
02/E2:          	
02/E1:          	; SET PADDING AND CHAR TO '0'
02/E1: 3830     	LOADI	C,'0'
02/E2: A816     	STORE	[PADDING],C
02/E4:          	
02/E3: 5801     3:	ADDI	C,1
02/E4: A811     	STORE	[CHAR],C
02/E5: FFED     	JUMP	0B
02/E7:          	
02/E6:          	; RESTORE THE STACK
02/E6: 8C10     4:	LOAD	D,[SPARK]
02/E8:          	
02/E7:          	; SEE IF IT IS ZERO
02/E7: 8011     	LOAD	A,[CHAR]
02/E8: 5000     	ADDI	A,0
02/E9: F702     	BRNZ	5F
02/EA: 8817     	LOAD	C,[LEAFRET]
02/EB: FE14     	JUMPR	C
02/ED:          	
02/EC:          	; PRINT THE CHARACTER
02/EC: 3401     5:	LOADI	B,S_PUTC
02/ED: 3802     	LOADI	C,BI
02/EE: BB01     	STOREF	[D+1],C
02/EF: 8817     	LOAD	C,[LEAFRET]
02/F0: FF13     	JUMP	SYSCALL
02/F2:          
02/F1:          
02/F1:          	; ZERO BANK VARIABLES
02/F1:          .BANK	0
00/80:          .BSS
00/80:          
00/00:          	; COMMAND LINE ARGUMENTS
00/00: 00       .DEFL BYTE ARGC		0
00/01: 00000000
       00000000 .DEFL BYTE ARGV		0,0,0,0,0,0,0,0,
00/09: 00000000
       0000     			0,0,0,0,0,0
00/0F:          
00/0F:          	; COMMAND LINE FLAGS
00/0F: 00       .DEFL BYTE LFLAG	0
00/10:          
00/10:          	; VARIOUS MISC VARIABLES
00/10:          	; TO BE USED IN LEAF-FUNCTIONS
00/10: 00       .DEFL BYTE SPARK	0
00/11: 00       .DEFL BYTE CHAR		0
00/12:          
00/12:          	; 16 BIT MATH STUFF
00/12: 0000     .DEFL WORD VALUE	0
00/14: 0000     .DEFL WORD OPERAND	0
00/16: 0000     .DEFL WORD TEMP		0
00/18:          
00/18:          	; EXPRESSION PARSING STUFF
00/18: 00000000
       00000000
       0000     .DEFL WORD ESTACK	0,0,0,0,0
00/22: 00000000
       00000000
       0000     .DEFL WORD VSTACK	0,0,0,0,0
00/2C: 00       .DEFL BYTE EINDEX	0
00/2D: 00       .DEFL BYTE VINDEX	0
00/2E: 00       .DEFL BYTE ISDEF	0
00/2F:          STACKSZ	= 5
00/2F:          
00/2F:          	; LATEST TOKEN
00/2F: 00       .DEFL BYTE TOKEN	0
00/30:          
00/30:          	; TOKEN STREAM STATE
00/30: 00       .DEFL BYTE SRCINDX	0
00/31: 00       .DEFL BYTE SRCBLK	0
00/32: 00       .DEFL BYTE SRCBANK	0
00/33: 00       .DEFL BYTE SRCPNTR	0
00/34: 00       .DEFL BYTE SRCSTAT	0
00/35: 00       .DEFL BYTE SRCCHAR	0
00/36: 0000     .DEFL WORD SRCLINE	0
00/38:          
00/38:          	; TOKEN BUFFER
00/38: 00       .DEFL BYTE BUFPNTR	0
00/39: 00000000
       00000000
       0000     .DEFL BYTE TBUF		0,0,0,0,0,0,0,0,0,0
00/43: 00       .DEFL BYTE TBUFEND	0
00/44:          	
00/44:          	; ASSEMBLY STATE
00/44: 00       .DEFL BYTE PASS		0
00/45: 0000     .DEFL WORD LINENUM	0
00/47: 00       .DEFL BYTE CURRFIL	0
00/48: 00       .DEFL BYTE COUNTER	0
00/49: 00       .DEFL BYTE SEGMENT	0
00/4A: 00       .DEFL BYTE SELBANK	0
00/4B:          
00/4B:          	; OUTPUT STATE
00/4B: 00       .DEFL BYTE DIRTY	0
00/4C: 00       .DEFL BYTE FNEXT	0
00/4D: 00       .DEFL BYTE CURBANK	0
00/4E:          
00/4E:          	; SYMBOL STUFF
00/4E: 00       .DEFL BYTE NFREE	0
00/4F: 0000     .DEFL WORD NUMLOC	0
00/51: 00       .DEFL BYTE DFBANK	0
00/52: 00       .DEFL BYTE DFPNTR	0
00/53:          
00/53:          	; DEFINE STUFF
00/53: 00       .DEFL BYTE DEFSIZE	0
00/54:          
00/54:          	; ERROR BANK 0
00/54:          .BANK	BD
01/00:          .DATA
01/00:          ERR0_B	= BD
01/00:          
01/00:          	; INVALID ARGUMENTS
01/00: 494E5641
       4C494420
       41524755
       4D454E54
       530A0D   .DEFL BYTE ERROR00	"INVALID ARGUMENTS",0X0A,0X0D,
01/13: 55534147
       453A2041
       53205B2D
       4C5D2046
       494C4531
       2046494C
       4532202E
       2E2E0A0D
       00       			"USAGE: AS [-L] FILE1 FILE2 ...",0X0A,0X0D,0
01/34:          
01/34:          	; ERROR TABLE
01/34: 0200     .DEFL BYTE ETABLE	ERR1_B,ERROR10,	; ERROR 0X80: CANNOT OPEN FILE 
01/36: 0212     			ERR1_B,ERROR11,	; ERROR 0X81: UNEXPECTED CHAR IN NUMERIC
01/38: 022F     			ERR1_B,ERROR12,	; ERROR 0X82: UNDEFINED EXPRESSION
01/3A: 0246     			ERR1_B,ERROR13,	; ERROR 0X83: UNEXPECTED TOKEN
01/3C: 0259     			ERR1_B,ERROR14,	; ERROR 0X84: VALUE STACK OVERFLOW
01/3E: 0300     			ERR2_B,ERROR20,	; ERROR 0X85: EXPRESSION STACK OVERFLOW
01/40: 031C     			ERR2_B,ERROR21,	; ERROR 0X86: EXPRESSION STACK DEPLETION
01/42: 0334     			ERR2_B,ERROR22,	; ERROR 0X87: VALUE STACK DEPLETION
01/44: 0351     			ERR2_B,ERROR23,	; ERROR 0X88: PARENTHESIS MISMATCH
01/46: 0368     			ERR2_B,ERROR24,	; ERROR 0X89: DIVIDE BY ZERO
01/48: 0400     			ERR3_B,ERROR30,	; ERROR 0X8A: OUT OF MEMORY
01/4A: 0410     			ERR3_B,ERROR31,	; ERROR 0X8B: LOCAL OUT OF RANGE
01/4C: 0425     			ERR3_B,ERROR32,	; ERROR 0X8C: FILE I/O ERROR
01/4E: 0436     			ERR3_B,ERROR33,	; ERROR 0X8D: TEXT SEGMENT FULL
01/50: 044A     			ERR3_B,ERROR34,	; ERROR 0X8E: DATA SEGMENT FULL
01/52: 045E     			ERR3_B,ERROR35,	; ERROR 0X8F: DATA IN BSS
01/54: 0500     			ERR4_B,ERROR40,	; ERROR 0X90: UNKNOWN DIRECTIVE
01/56: 0514     			ERR4_B,ERROR41,	; ERROR 0X91: UNKNOWN DATA TYPE
01/58: 0528     			ERR4_B,ERROR42,	; ERROR 0X92: UNENCLOSED STRING
01/5A: 053C     			ERR4_B,ERROR43	; ERROR 0X93: VALUE OUT OF RANGE
01/5C:          
01/5C:          	; ERROR VALUES
01/5C:          E_COPEN	= 0X80
01/5C:          E_UXNUM	= 0X81
01/5C:          E_UDEFX = 0X82
01/5C:          E_UXTOK	= 0X83
01/5C:          E_VSTKO = 0X84
01/5C:          E_ESTKO = 0X85
01/5C:          E_VSTKD	= 0X86
01/5C:          E_ESTKD = 0X87
01/5C:          E_PAREN = 0X88
01/5C:          E_DZERO	= 0X89
01/5C:          E_OMEM	= 0X8A
01/5C:          E_LOBIG	= 0X8B
01/5C:          E_FIO	= 0X8C
01/5C:          E_TFULL	= 0X8D
01/5C:          E_DFULL	= 0X8E
01/5C:          E_BSS	= 0X8F
01/5C:          E_UDIR	= 0X90
01/5C:          E_UDATA	= 0X91
01/5C:          E_UCSTR	= 0X92
01/5C:          E_VBIG	= 0X93
01/5C:          
01/5C:          BD	= BD+1	
01/5C:          	
01/5C:          	; ERROR BANK 1
01/5C:          .BANK	BD
02/00:          .DATA
02/00:          ERR1_B	= BD
02/00:          
02/00: 43414E27
       54204F50
       454E2046
       494C450A
       0D00     .DEFL BYTE ERROR10	"CAN'T OPEN FILE",0X0A,0X0D,0
02/12: 554E4558
       50454354
       45442043
       48415220
       494E204E
       554D4552
       49430A0D
       00       .DEFL BYTE ERROR11	"UNEXPECTED CHAR IN NUMERIC",0X0A,0X0D,0
02/2F: 554E4445
       46494E45
       44204558
       50524553
       53494F4E
       0A0D00   .DEFL BYTE ERROR12	"UNDEFINED EXPRESSION",0X0A,0X0D,0
02/46: 554E4558
       50454354
       45442054
       4F4B454E
       0A0D00   .DEFL BYTE ERROR13	"UNEXPECTED TOKEN",0X0A,0X0D,0
02/59: 56414C55
       45205354
       41434B20
       4F564552
       464C4F57
       0A0D00   .DEFL BYTE ERROR14	"VALUE STACK OVERFLOW",0X0A,0X0D,0
02/70:          
02/70:          BD	= BD+1
02/70:          
02/70:          	; ERROR BANK 2
02/70:          .BANK	BD
03/00:          .DATA
03/00:          ERR2_B	= BD
03/00:          
03/00: 45585052
       45535349
       4F4E2053
       5441434B
       204F5645
       52464C4F
       570A0D00 .DEFL BYTE ERROR20	"EXPRESSION STACK OVERFLOW",0X0A,0X0D,0
03/1C: 56414C55
       45205354
       41434B20
       4445504C
       4554494F
       4E0A0D00 .DEFL BYTE ERROR21	"VALUE STACK DEPLETION",0X0A,0X0D,0
03/34: 45585052
       45535349
       4F4E2053
       5441434B
       20444550
       4C455449
       4F4E0A0D
       00       .DEFL BYTE ERROR22	"EXPRESSION STACK DEPLETION",0X0A,0X0D,0
03/51: 50415245
       4E544845
       53495320
       4D49534D
       41544348
       0A0D00   .DEFL BYTE ERROR23	"PARENTHESIS MISMATCH",0X0A,0X0D,0
03/68: 44495649
       44452042
       59205A45
       524F0A0D
       00       .DEFL BYTE ERROR24	"DIVIDE BY ZERO",0X0A,0X0D,0
03/79:          
03/79:          BD	= BD+1
03/79:          
03/79:          	; ERROR BANK 3
03/79:          .BANK	BD
04/00:          .DATA
04/00:          ERR3_B	= BD
04/00:          
04/00: 4F555420
       4F46204D
       454D4F52
       590A0D00 .DEFL BYTE ERROR30	"OUT OF MEMORY",0X0A,0X0D,0
04/10: 4C4F4341
       4C204F55
       54204F46
       2052414E
       47450A0D
       00       .DEFL BYTE ERROR31	"LOCAL OUT OF RANGE",0X0A,0X0D,0
04/25: 46494C45
       20492F4F
       20455252
       4F520A0D
       00       .DEFL BYTE ERROR32	"FILE I/O ERROR",0X0A,0X0D,0
04/36: 54455854
       20534547
       4D454E54
       2046554C
       4C0A0D00 .DEFL BYTE ERROR33	"TEXT SEGMENT FULL",0X0A,0X0D,0
04/4A: 44415441
       20534547
       4D454E54
       2046554C
       4C0A0D00 .DEFL BYTE ERROR34	"DATA SEGMENT FULL",0X0A,0X0D,0
04/5E: 44415441
       20494E20
       4253530A
       0D00     .DEFL BYTE ERROR35	"DATA IN BSS",0X0A,0X0D,0
04/6C:          
04/6C:          BD	= BD+1
04/6C:          
04/6C:          	; ERROR BANK 4
04/6C:          .BANK	BD
05/00:          .DATA
05/00:          ERR4_B	= BD
05/00:          
05/00: 554E4B4E
       4F574E20
       44495245
       43544956
       450A0D00 .DEFL BYTE ERROR40	"UNKNOWN DIRECTIVE",0X0A,0X0D,0
05/14: 554E4B4E
       4F574E20
       44415441
       20545950
       450A0D00 .DEFL BYTE ERROR41	"UNKNOWN DATA TYPE",0X0A,0X0D,0
05/28: 554E454E
       434C4F53
       45442053
       5452494E
       470A0D00 .DEFL BYTE ERROR42	"UNENCLOSED STRING",0X0A,0X0D,0
05/3C: 56414C55
       45204F55
       54204F46
       2052414E
       47450A0D
       00       .DEFL BYTE ERROR43	"VALUE OUT OF RANGE",0X0A,0X0D,0
05/51:          
05/51:          BD	= BD+1
05/51:          
05/51:          	; GENERAL PURPOSE STRINGS
05/51:          .BANK	BD
06/00:          .DATA
06/00:          STR_B	= BD
06/00:          
06/00:          	; OUTPUT STRNGS
06/00: 414F5554
       2E535600 .DEFL BYTE AOUT		"AOUT.SV",0
06/08: 43414E4E
       4F542043
       52454154
       4520414F
       55542E53
       560A0D00 .DEFL BYTE AOUTERR	"CANNOT CREATE AOUT.SV",0X0A,0X0D,0
06/20:          
06/20:          	; DIRECTIVE STRINGS
06/20: 4F524700
       A1       .DEFL BYTE S_ORG	"ORG",0,DIRORG
06/25: 54455854
       0098     .DEFL BYTE S_TEXT	"TEXT",0,DIRTEXT
06/2B: 44415441
       009B     .DEFL BYTE S_DATA	"DATA",0,DIRDATA
06/31: 42535300
       9E       .DEFL BYTE S_BSS	"BSS",0,DIRBSS
06/36: 44454600
       A5       .DEFL BYTE S_DEF	"DEF",0,DIRDEF
06/3B: 4445464C
       00B2     .DEFL BYTE S_DEFL	"DEFL",0,DIRDEFL
06/41: 42414E4B
       00A300   .DEFL BYTE S_BANK	"BANK",0,DIRBANK,0
06/48:          
06/48:          	; MISC STRINGS
06/48: 42595445
       0001     .DEFL BYTE S_BYTE	"BYTE",0,1
06/4E: 574F5244
       000200   .DEFL BYTE S_WORD	"WORD",0,2,0
06/55:          
06/55:          BD	= BD+1
06/55:          
06/55:          	; SOURCE READ BUFFER
06/55:          .BANK	BD
07/00:          .DATA
07/00:          SRC_B	= BD
07/00:          
07/00:          BD	= BD+4
07/00:          ; AS1.S
07/00:          ; ASSEMBLER MAIN LOGIC
07/00:          ; GAVIN TERSTEEG, 2024
07/00:          ; SDMAY24-14
07/00:          
07/00:          BI	= BI+1
07/00:          .TEXT
07/80:          .BANK	BI
03/80:          MAIN0_B	= BI
03/80:          
03/80:          	; START A PASS
03/80:          	; BEGIN BY REWINDING THE SOURCE STREAM
03/80: 3803     DOPASS:	LOADI	C,BI
03/81: BB01     	STOREF	[D+1],C
03/82: 3887     	LOADI	C,@+5
03/83: BB00     	STOREF	[D],C
03/84: 3409     	LOADI	B,TOK0_B
03/85: 388A     	LOADI	C,REWIND
03/86: FF7B     	JUMP	INDIR
03/88:          	
03/87:          	; RESET EMIT STATE
03/87: 388C     	LOADI	C,@+5
03/88: BB00     	STOREF	[D],C
03/89: 3415     	LOADI	B,EMIT0_B
03/8A: 389E     	LOADI	C,EMPASS
03/8B: FF76     	JUMP	INDIR
03/8D:          	
03/8C:          	; SET SEGMENT TO TEXT
03/8C: 3000     	LOADI	A,0
03/8D: 3892     	LOADI	C,@+5
03/8E: BB00     	STOREF	[D],C
03/8F: 3415     	LOADI	B,EMIT0_B
03/90: 38C2     	LOADI	C,SETSEG
03/91: FF70     	JUMP	INDIR
03/93:          	
03/92:          	; RESET LOCAL COUNTER
03/92: 3000     	LOADI	A,0
03/93: A04F     	STORE	[NUMLOC],A
03/94: A050     	STORE	[NUMLOC+1],A
03/96:          
03/95:          	; TAKE IN A NEW LINE OF SOURCE CODE
03/95: 3803     ASMLINE:LOADI	C,BI
03/96: BB01     	STOREF	[D+1],C
03/97: 389C     	LOADI	C,@+5
03/98: BB00     	STOREF	[D],C
03/99: 3409     	LOADI	B,TOK0_B
03/9A: 3880     	LOADI	C,NEXTTOK
03/9B: FF66     	JUMP	INDIR
03/9D:          	
03/9C:          	; ARE WE AT THE END?
03/9C: 802F     	LOAD	A,[TOKEN]
03/9D: 5000     	ADDI	A,0
03/9E: F60F     	BRZ	ASMDONE
03/A0:          	
03/9F:          	; IS IT NEWLINE?
03/9F: 700A     	SUBI	A,NEWLINE
03/A0: F6F4     	BRZ	ASMLINE
03/A2:          	
03/A1:          	; IS IT A SYMBOL?
03/A1: 7076     	SUBI	A,SYMBOL-NEWLINE
03/A2: 3404     	LOADI	B,MAIN1_B
03/A3: 3880     	LOADI	C,ASMSYM
03/A4: F65D     	BRZ	INDIR
03/A6:          	
03/A5:          	; IS IT A NUMERIC?
03/A5: 7001     	SUBI	A,NUMERIC-SYMBOL
03/A6: 3405     	LOADI	B,MAIN2_B
03/A7: 3880     	LOADI	C,ASMNUM
03/A8: F659     	BRZ	INDIR
03/AA:          	
03/A9:          	; IS IT A DIRECTIVE?
03/A9: 70AD     	SUBI	A,'.'-NUMERIC
03/AA: 3406     	LOADI	B,MAIN3_B
03/AB: 3880     	LOADI	C,ASMDIR
03/AC: F655     	BRZ	INDIR
03/AE:          	
03/AD: FFE7     	JUMP	ASMLINE
03/AF:          	
03/AE:          	; DO WE HAVE ANOTHER PASS?
03/AE: 8044     ASMDONE:LOAD	A,[PASS]
03/AF: 5000     	ADDI	A,0
03/B0: F703     	BRNZ	0F
03/B1: 5001     	ADDI	A,1
03/B2: A044     	STORE	[PASS],A
03/B3: FFCC     	JUMP	DOPASS
03/B5:          	
03/B4:          	; ONE FINAL CALL TO SETBANK TO MAKE SURE ALL BUFFER IS PURGED
03/B4: 3803     0:	LOADI	C,BI
03/B5: BB01     	STOREF	[D+1],C
03/B6: 38BB     	LOADI	C,@+5
03/B7: BB00     	STOREF	[D],C
03/B8: 3415     	LOADI	B,EMIT0_B
03/B9: 38B4     	LOADI	C,SETBANK
03/BA: FF47     	JUMP	INDIR
03/BC:          
03/BB:          	; EXIT
03/BB: 3401     	LOADI	B,CORE0_B
03/BC: 38D5     	LOADI	C,EXIT
03/BD: FF44     	JUMP	INDIR
03/BF:          	
03/BE:          BI	= BI+1
03/BE:          .TEXT
03/BE:          .BANK	BI
04/80:          MAIN1_B	= BI
04/80:          	
04/80:          	; LINE STARTS WITH A SYMBOL
04/80:          	; ATTEMPT TO DEFINE THIS SYMBOL
04/80: 3804     ASMSYM:	LOADI	C,BI
04/81: BB01     	STOREF	[D+1],C
04/82: 3887     	LOADI	C,@+5
04/83: BB00     	STOREF	[D],C
04/84: 3412     	LOADI	B,SYM0_B
04/85: 3880     	LOADI	C,DEFINE
04/86: FF7B     	JUMP	INDIR
04/88:          	
04/87:          	; CONSUME '=' SYMBOL
04/87: 388C     	LOADI	C,@+5
04/88: BB00     	STOREF	[D],C
04/89: 3409     	LOADI	B,TOK0_B
04/8A: 3880     	LOADI	C,NEXTTOK
04/8B: FF76     	JUMP	INDIR
04/8C: 802F     	LOAD	A,[TOKEN]
04/8D: 703D     	SUBI	A,'='
04/8E: F604     	BRZ	1F
04/90:          	
04/8F:          	; ERROR!
04/8F: 3083     	LOADI	A,E_UXTOK
04/90: 3401     	LOADI	B,CORE0_B
04/91: 38D7     	LOADI	C,ERROR
04/92: FF6F     	JUMP	INDIR
04/94:          
04/93:          	; ATTEMPT TO PARSE EXPRESSION
04/93: 3898     1:	LOADI	C,@+5
04/94: BB00     	STOREF	[D],C
04/95: 3409     	LOADI	B,TOK0_B
04/96: 3880     	LOADI	C,NEXTTOK
04/97: FF6A     	JUMP	INDIR
04/99:          	
04/98: 389D     	LOADI	C,@+5
04/99: BB00     	STOREF	[D],C
04/9A: 340B     	LOADI	B,EXP0_B
04/9B: 3880     	LOADI	C,PARSEX
04/9C: FF65     	JUMP	INDIR
04/9E:          	
04/9D:          	; DID THE EXPRESSION RETURN DEFINED?
04/9D: 5000     	ADDI	A,0
04/9E: F70E     	BRNZ	2F
04/A0:          
04/9F:          	; STORE VALUE AND DEFINE
04/9F: AC10     	STORE	[SPARK],D
04/A0: 8012     	LOAD	A,[VALUE]
04/A1: 8413     	LOAD	B,[VALUE+1]
04/A2: 8851     	LOAD	C,[DFBANK]
04/A3: 8C52     	LOAD	D,[DFPNTR]
04/A4: A880     	STORE	[DBANK],C
04/A5: B301     	STOREF	[D+1],A
04/A6: B702     	STOREF	[D+2],B
04/A7: 30FF     	LOADI	A,0XFF
04/A8: B300     	STOREF	[D],A
04/A9: 3000     	LOADI	A,0
04/AA: A080     	STORE	[DBANK],A
04/AB: 8C10     	LOAD	D,[SPARK]
04/AD:          	
04/AC: FF07     	JUMP	9F
04/AE:          
04/AD:          	; UN-DEFINE THE EXPRESSION
04/AD: 3000     2:	LOADI	A,0
04/AE: 8451     	LOAD	B,[DFBANK]
04/AF: 8852     	LOAD	C,[DFPNTR]
04/B0: A480     	STORE	[DBANK],B
04/B1: B200     	STOREF	[C],A
04/B2: A080     	STORE	[DBANK],A
04/B3: FF00     	JUMP	9F
04/B5:          	
04/B4:          	; GO BACK TO ASMLINE
04/B4: 3403     9:	LOADI	B,MAIN0_B
04/B5: 3895     	LOADI	C,ASMLINE
04/B6: FF4B     	JUMP	INDIR
04/B8:          	
04/B7:          BI	= BI+1
04/B7:          .TEXT
04/B7:          .BANK	BI
05/80:          MAIN2_B	= BI
05/80:          
05/80:          	; LINE STARTS WITH A NUMERIC
05/80:          	; ATTEMPT TO DEFINE A LOCAL SYMBOL
05/80: 3805     ASMNUM:	LOADI	C,BI
05/81: BB01     	STOREF	[D+1],C
05/82: 3887     	LOADI	C,@+5
05/83: BB00     	STOREF	[D],C
05/84: 340B     	LOADI	B,EXP0_B
05/85: 3883     	LOADI	C,PARSEN
05/86: FF7B     	JUMP	INDIR
05/88:          	
05/87:          	; MAKE SURE IT IS LESS THAN 10
05/87: 8012     	LOAD	A,[VALUE]
05/88: 5000     	ADDI	A,0
05/89: F704     	BRNZ	1F
05/8A: 8013     	LOAD	A,[VALUE+1]
05/8B: 340A     	LOADI	B,10
05/8C: D100     	CMP	A,B
05/8D: F104     	BRB	2F
05/8F:          
05/8E:          	; ERROR!
05/8E: 308B     1:	LOADI	A,E_LOBIG
05/8F: 3401     	LOADI	B,CORE0_B
05/90: 38D7     	LOADI	C,ERROR
05/91: FF70     	JUMP	INDIR
05/93:          
05/92:          	; NOW LETS (MAYBE) DEFINE IT
05/92: 8444     2:	LOAD	B,[PASS]
05/93: 5400     	ADDI	B,0
05/94: F706     	BRNZ	2F
05/95: 5030     	ADDI	A,'0'
05/96: 389B     	LOADI	C,@+5
05/97: BB00     	STOREF	[D],C
05/98: 3412     	LOADI	B,SYM0_B
05/99: 3883     	LOADI	C,ADDLOC
05/9A: FF67     	JUMP	INDIR
05/9C:          	
05/9B:          	; CONSUME ':' SYMBOL
05/9B: 38A0     2:	LOADI	C,@+5
05/9C: BB00     	STOREF	[D],C
05/9D: 3409     	LOADI	B,TOK0_B
05/9E: 3880     	LOADI	C,NEXTTOK
05/9F: FF62     	JUMP	INDIR
05/A0: 802F     	LOAD	A,[TOKEN]
05/A1: 703A     	SUBI	A,':'
05/A2: F604     	BRZ	3F
05/A4:          	
05/A3:          	; ERROR!
05/A3: 3083     	LOADI	A,E_UXTOK
05/A4: 3401     	LOADI	B,CORE0_B
05/A5: 38D7     	LOADI	C,ERROR
05/A6: FF5B     	JUMP	INDIR
05/A8:          	
05/A7:          	; INCREMENT LOCAL COUNTER
05/A7: 8050     3:	LOAD	A,[NUMLOC+1]
05/A8: 5001     	ADDI	A,1
05/A9: A050     	STORE	[NUMLOC+1],A
05/AA: F103     	BRNC	9F
05/AB: 804F     	LOAD	A,[NUMLOC]
05/AC: 5001     	ADDI	A,1
05/AD: A04F     	STORE	[NUMLOC],A
05/AF:          	
05/AE:          	; GO BACK TO ASMLINE
05/AE: 3403     9:	LOADI	B,MAIN0_B
05/AF: 3895     	LOADI	C,ASMLINE
05/B0: FF51     	JUMP	INDIR
05/B2:          	
05/B1:          BI	= BI+1
05/B1:          .TEXT
05/B1:          .BANK	BI
06/80:          MAIN3_B	= BI
06/80:          
06/80:          	; LINE STARTS WITH A DIRECTIVE
06/80:          	; WHICH ONE IS IT?
06/80: 3806     ASMDIR:	LOADI	C,BI
06/81: BB01     	STOREF	[D+1],C
06/82: 3887     	LOADI	C,@+5
06/83: BB00     	STOREF	[D],C
06/84: 3409     	LOADI	B,TOK0_B
06/85: 3880     	LOADI	C,NEXTTOK
06/86: FF7B     	JUMP	INDIR
06/88:          	
06/87:          	; CALL STRLOOK
06/87: 3020     	LOADI	A,S_ORG
06/88: 388B     	LOADI	C,@+3
06/89: BB00     	STOREF	[D],C
06/8A: FF52     	JUMP	STRLOOK
06/8B: A016     	STORE	[TEMP],A
06/8D:          	
06/8C:          	; GET NEXT TOKEN RIGHT OFF THE BAT
06/8C: 3891     	LOADI	C,@+5
06/8D: BB00     	STOREF	[D],C
06/8E: 3409     	LOADI	B,TOK0_B
06/8F: 3880     	LOADI	C,NEXTTOK
06/90: FF71     	JUMP	INDIR
06/92:          	
06/91:          	; NOW WE SEE WHAT WE GOT
06/91: 8816     	LOAD	C,[TEMP]
06/92: 5800     	ADDI	C,0
06/93: F402     	BRN	0F
06/95:          	
06/94:          	; HUH?
06/94: 3090     	LOADI	A,E_UDIR
06/95: FF44     	JUMP	9F
06/97:          
06/96:          	; WE RECOGNIZE IT, JUMP TO IT
06/96: 3408     0:	LOADI	B,MAIN5_B
06/97: FE68     	JUMPR	C
06/99:          	
06/98:          	; STUB TABLE
06/98: 3000     DIRTEXT:LOADI	A,0
06/99: 38AB     	LOADI	C,DIRSEG
06/9A: FF67     	JUMP	INDIR
06/9B: 3001     DIRDATA:LOADI	A,1
06/9C: 38AB     	LOADI	C,DIRSEG
06/9D: FF64     	JUMP	INDIR
06/9E: 3002     DIRBSS:LOADI	A,2
06/9F: 38AB     	LOADI	C,DIRSEG
06/A0: FF61     	JUMP	INDIR
06/A1: 3880     DIRORG:	LOADI	C,DIRORGA
06/A2: FF5F     	JUMP	INDIR
06/A3: 3891     DIRBANK:LOADI	C,DIRBANA
06/A4: FF5D     	JUMP	INDIR
06/A6:          
06/A5:          	
06/A5:          	; WE ARE DOING A DEFINE
06/A5:          	; GET THE DEFINE SIZE, CALL STRLOOK
06/A5: 802F     DIRDEF:	LOAD	A,[TOKEN]
06/A6: 7080     	SUBI	A,SYMBOL
06/A7: F71E     	BRNZ	DIRUXTO
06/A8: 3048     	LOADI	A,S_BYTE
06/A9: 38AC     	LOADI	C,@+3
06/AA: BB00     	STOREF	[D],C
06/AB: FF31     	JUMP	STRLOOK
06/AD:          	
06/AC: 5000     	ADDI	A,0
06/AD: F702     	BRNZ	0F
06/AF:          	
06/AE:          	; HUH?
06/AE: 3091     	LOADI	A,E_UDATA
06/AF: FF2A     	JUMP	9F
06/B1:          	
06/B0: A053     0:	STORE	[DEFSIZE],A
06/B1: FF25     	JUMP	7F
06/B3:          
06/B2:          	; WE ARE DOING A DEFINE LABEL
06/B2:          	; GET THE DEFINE SIZE, CALL STRLOOK
06/B2: 802F     DIRDEFL:LOAD	A,[TOKEN]
06/B3: 7080     	SUBI	A,SYMBOL
06/B4: F711     	BRNZ	DIRUXTO
06/B5: 3048     	LOADI	A,S_BYTE
06/B6: 38B9     	LOADI	C,@+3
06/B7: BB00     	STOREF	[D],C
06/B8: FF24     	JUMP	STRLOOK
06/BA:          	
06/B9: 5000     	ADDI	A,0
06/BA: F702     	BRNZ	0F
06/BC:          	
06/BB:          	; HUH?
06/BB: 3091     	LOADI	A,E_UDATA
06/BC: FF1D     	JUMP	9F
06/BE:          	
06/BD: A053     0:	STORE	[DEFSIZE],A
06/BF:          
06/BE:          	; NOW WE DEFINE A LABEL WITH THE CURRENT COUNTER VALUE
06/BE: 38C3     	LOADI	C,@+5
06/BF: BB00     	STOREF	[D],C
06/C0: 3409     	LOADI	B,TOK0_B
06/C1: 3880     	LOADI	C,NEXTTOK
06/C2: FF3F     	JUMP	INDIR
06/C4:          	
06/C3:          	; GOTTA BE A SYMBOL
06/C3: 802F     	LOAD	A,[TOKEN]
06/C4: 7080     	SUBI	A,SYMBOL
06/C5: F602     	BRZ	1F
06/C7:          	
06/C6:          	; ERROR! UNEXPECTED TOKEN
06/C6: 3083     DIRUXTO:LOADI	A,E_UXTOK
06/C7: FF12     	JUMP	9F
06/C9:          	
06/C8:          	; DEFINE SYMBOL NOW
06/C8: 38CD     1:	LOADI	C,@+5
06/C9: BB00     	STOREF	[D],C
06/CA: 3412     	LOADI	B,SYM0_B
06/CB: 3880     	LOADI	C,DEFINE
06/CC: FF35     	JUMP	INDIR
06/CE:          	
06/CD:          	; PUT COUNTER IN SYMBOL
06/CD: 8051     	LOAD	A,[DFBANK]
06/CE: 8452     	LOAD	B,[DFPNTR]
06/CF: 8848     	LOAD	C,[COUNTER]
06/D0: A080     	STORE	[DBANK],A
06/D1: B902     	STOREF	[B+2],C
06/D2: 3800     	LOADI	C,0
06/D3: B901     	STOREF	[B+1],C
06/D4: 30FF     	LOADI	A,0XFF
06/D5: B100     	STOREF	[B],A
06/D6: A880     	STORE	[DBANK],C
06/D8:          	
06/D7:          	; NOW WE CAN GO AND DO THE DEFINITION
06/D7: 3407     7:	LOADI	B,MAIN4_B
06/D8: 3880     	LOADI	C,DIRDDEF
06/D9: FF28     	JUMP	INDIR
06/DB:          	
06/DA:          
06/DA:          	; ERROR STUB
06/DA: 3401     9:	LOADI	B,CORE0_B
06/DB: 38D7     	LOADI	C,ERROR
06/DC: FF25     	JUMP	INDIR
06/DE:          	
06/DD:          	; LOOKUP A STRING IN THE STR_B
06/DD:          	; A = FIRST STRING TO CHECK AGAINST
06/DD:          	; RETURNS RESULT IN A
06/DD: AC10     STRLOOK:STORE	[SPARK],D
06/DE: 3439     STRNEXT:LOADI	B,TBUF
06/DF: 9900     0:	LOADF	C,[B]
06/E0: 3C06     	LOADI	D,STR_B
06/E1: AC80     	STORE	[DBANK],D
06/E2: 9C00     	LOADF	D,[A]
06/E3: DB00     	CMP	C,D
06/E4: F709     	BRNZ	2F
06/E5: 5800     	ADDI	C,0
06/E6: F605     	BRZ	1F
06/E7: 3C00     	LOADI	D,0
06/E8: AC80     	STORE	[DBANK],D
06/E9: 5001     	ADDI	A,1
06/EA: 5401     	ADDI	B,1
06/EB: FFF3     	JUMP	0B
06/ED:          	
06/EC:          	; WE GOT A MATCH
06/EC: 9001     1:	LOADF	A,[A+1]
06/ED: FF0B     	JUMP	5F
06/EF:          	
06/EE:          	; DOES NOT MATCH
06/EE: 9C00     2:	LOADF	D,[A]
06/EF: 5C00     	ADDI	D,0
06/F0: F602     	BRZ	3F
06/F1: 5001     	ADDI	A,1
06/F2: FFFB     	JUMP	2B
06/F3: 5002     3:	ADDI	A,2
06/F4: 9800     	LOADF	C,[A]
06/F5: AC80     	STORE	[DBANK],D
06/F6: 5800     	ADDI	C,0
06/F7: F7E6     	BRNZ	STRNEXT
06/F9:          	
06/F8:          	; OUT OF OPTIONS
06/F8: 3000     	LOADI	A,0
06/FA:          
06/F9:          	; EXIT
06/F9: 3C00     5:	LOADI	D,0
06/FA: AC80     	STORE	[DBANK],D
06/FB: 8C10     	LOAD	D,[SPARK]
06/FC: FF06     	JUMP	IRET
06/FE:          	
06/FD:          BI	= BI+1
06/FD:          .TEXT
06/FD:          .BANK	BI
07/80:          MAIN4_B	= BI
07/80:          
07/80:          	; ACTUALLY DO THE DEFINITION OPERATION HERE
07/80: 3807     DIRDDEF:LOADI	C,BI
07/81: BB01     	STOREF	[D+1],C
07/82: 3887     	LOADI	C,@+5
07/83: BB00     	STOREF	[D],C
07/84: 3409     	LOADI	B,TOK0_B
07/85: 3880     	LOADI	C,NEXTTOK
07/86: FF7B     	JUMP	INDIR
07/88:          	
07/87:          	; IF ITS A NEW LINE, WE ARE DONE
07/87: 802F     0:	LOAD	A,[TOKEN]
07/88: 5000     	ADDI	A,0
07/89: F655     	BRZ	8F
07/8A: 700A     	SUBI	A,NEWLINE
07/8B: F653     	BRZ	8F
07/8D:          	
07/8C:          	
07/8C:          	; SPECIAL CASE, IF WE JUST GOT A DQUOTE WE WILL JUST START OUTPUTTING ASCII CHARACTERS
07/8C: 7018     	SUBI	A,DQUOTE-NEWLINE
07/8D: F71B     	BRNZ	6F
07/8F:          	
07/8E: 3893     1:	LOADI	C,@+5
07/8F: BB00     	STOREF	[D],C
07/90: 3409     	LOADI	B,TOK0_B
07/91: 3880     	LOADI	C,NEXTTOK
07/92: FF6F     	JUMP	INDIR
07/94:          	
07/93:          	; JUST EMIT TOKENS STILL WE GET ANOTHER DQUOTE
07/93: 802F     	LOAD	A,[TOKEN]
07/94: 7022     	SUBI	A,DQUOTE
07/95: F60E     	BRZ	3F
07/96: 70E8     	SUBI	A,NEWLINE-DQUOTE
07/97: F60A     	BRZ	2F
07/98: 500A     	ADDI	A,NEWLINE
07/99: F608     	BRZ	2F
07/9B:          	
07/9A:          	; PLACE IN [VALUE]
07/9A: 3400     	LOADI	B,0
07/9B: A412     	STORE	[VALUE],B
07/9C: A013     	STORE	[VALUE+1],A
07/9E:          	
07/9D:          	; AND EMIT
07/9D: 388E     	LOADI	C,1B
07/9E: BB00     	STOREF	[D],C
07/9F: 3415     	LOADI	B,EMIT0_B
07/A0: 38BF     	LOADI	C,EMIT
07/A1: FF60     	JUMP	INDIR
07/A3:          
07/A2:          	; STRING IS BAD!
07/A2: 3092     2:	LOADI	A,E_UCSTR
07/A3: FF3E     	JUMP	9F
07/A5:          
07/A4:          	; GRAB THE TOKEN AFTER THE DOUBLE QUOTES
07/A4: 38CC     3:	LOADI	C,7F
07/A5: BB00     	STOREF	[D],C
07/A6: 3409     	LOADI	B,TOK0_B
07/A7: 3880     	LOADI	C,NEXTTOK
07/A8: FF59     	JUMP	INDIR
07/AA:          
07/A9:          	; HMM, MUST BE AN EXPRESSION
07/A9:          	; LETS PARSE IT
07/A9: 38AE     6:	LOADI	C,@+5
07/AA: BB00     	STOREF	[D],C
07/AB: 340B     	LOADI	B,EXP0_B
07/AC: 3880     	LOADI	C,PARSEX
07/AD: FF54     	JUMP	INDIR
07/AF:          	
07/AE:          	; WHAT PASS ARE WE ON?
07/AE: 8444     	LOAD	B,[PASS]
07/AF: 5400     	ADDI	B,0
07/B0: F603     	BRZ	1F
07/B2:          	
07/B1:          	; WE ARE ON PASS 2, MAKE SURE IT ISN'T UNDEFINED
07/B1: 5000     	ADDI	A,0
07/B2: 3082     	LOADI	A,E_UDEFX
07/B3: F42E     	BRN	9F
07/B5:          
07/B4:          	; IF WE ARE IN THE DATA SEGMENT AND DEFSIZE IS 2, EMIT VALUE IN TWO PARTS
07/B4: 8049     1:	LOAD	A,[SEGMENT]
07/B5: 5000     	ADDI	A,0
07/B6: F610     	BRZ	2F
07/B7: 8053     	LOAD	A,[DEFSIZE]
07/B8: 7001     	SUBI	A,1
07/B9: F60D     	BRZ	2F
07/BB:          	
07/BA:          	; EMIT IN TWO PARTS
07/BA: 8013     	LOAD	A,[VALUE+1]
07/BB: A016     	STORE	[TEMP],A
07/BC: 8012     	LOAD	A,[VALUE]
07/BD: A013     	STORE	[VALUE+1],A
07/BE: 3000     	LOADI	A,0
07/BF: A012     	STORE	[VALUE],A
07/C1:          	
07/C0:          	; EMIT FIRST VALUE
07/C0: 38C5     	LOADI	C,@+5
07/C1: BB00     	STOREF	[D],C
07/C2: 3415     	LOADI	B,EMIT0_B
07/C3: 38BF     	LOADI	C,EMIT
07/C4: FF3D     	JUMP	INDIR
07/C6:          	
07/C5:          	; EMIT SECOND VALUE
07/C5: 8016     	LOAD	A,[TEMP]
07/C6: A013     	STORE	[VALUE+1],A
07/C8:          	
07/C7:          	; EMIT VALUE
07/C7: 38CC     2:	LOADI	C,@+5
07/C8: BB00     	STOREF	[D],C
07/C9: 3415     	LOADI	B,EMIT0_B
07/CA: 38BF     	LOADI	C,EMIT
07/CB: FF36     	JUMP	INDIR
07/CD:          
07/CC:          	; CHECK IF ITS A COMMA
07/CC: 802F     7:	LOAD	A,[TOKEN]
07/CD: 702C     	SUBI	A,','
07/CE: F709     	BRNZ	DIRNEWL
07/D0:          	
07/CF:          	; CONSUME TOKENS TILL IT'S NO LONGER A NEWLINE
07/CF: 38D4     1:	LOADI	C,@+5
07/D0: BB00     	STOREF	[D],C
07/D1: 3409     	LOADI	B,TOK0_B
07/D2: 3880     	LOADI	C,NEXTTOK
07/D3: FF2E     	JUMP	INDIR
07/D4: 802F     	LOAD	A,[TOKEN]
07/D5: 700A     	SUBI	A,NEWLINE
07/D6: F6F8     	BRZ	1B
07/D7: FFAF     	JUMP	0B
07/D9:          
07/D8:          	; THIS BETTER BE A NEWLINE
07/D8: 802F     DIRNEWL:LOAD	A,[TOKEN]
07/D9: 5000     	ADDI	A,0
07/DA: F604     	BRZ	8F
07/DB: 700A     	SUBI	A,NEWLINE
07/DC: F602     	BRZ	8F
07/DE:          	
07/DD:          	; NOPE 
07/DD: 3083     	LOADI	A,E_UXTOK
07/DE: FF03     	JUMP	9F
07/E0:          
07/DF:          
07/DF:          	; GO BACK TO ASMLINE
07/DF: 3403     8:	LOADI	B,MAIN0_B
07/E0: 3895     	LOADI	C,ASMLINE
07/E1: FF20     	JUMP	INDIR
07/E3:          	
07/E2:          
07/E2:          	; ERROR STUB
07/E2: 3401     9:	LOADI	B,CORE0_B
07/E3: 38D7     	LOADI	C,ERROR
07/E4: FF1D     	JUMP	INDIR
07/E6:          
07/E5:          BI	= BI+1
07/E5:          .TEXT
07/E5:          .BANK	BI
08/80:          MAIN5_B	= BI
08/80:          
08/80:          	; SET THE COUNTER ORIGIN MANUALLY
08/80: 3808     DIRORGA:LOADI	C,BI
08/81: BB01     	STOREF	[D+1],C
08/82: 3887     	LOADI	C,@+5
08/83: BB00     	STOREF	[D],C
08/84: 340B     	LOADI	B,EXP0_B
08/85: 3880     	LOADI	C,PARSEX
08/86: FF7B     	JUMP	INDIR
08/87: 5000     	ADDI	A,0
08/88: 3082     	LOADI	A,E_UDEFX
08/89: F734     	BRNZ	9F
08/8B:          	
08/8A:          	; SET [COUNTER] TO [VALUE]
08/8A: 8013     	LOAD	A,[VALUE+1]
08/8B: A048     	STORE	[COUNTER],A
08/8C: 8012     	LOAD	A,[VALUE]
08/8D: 5000     	ADDI	A,0
08/8E: 3093     	LOADI	A,E_VBIG
08/8F: F72E     	BRNZ	9F
08/91:          	
08/90:          	; MAKE SURE IT ENDS WITH A NEWLINE
08/90: FF23     	JUMP	7F
08/92:          	
08/91:          	; SET THE BANK ORIGIN MANUALLY
08/91: 884A     DIRBANA:LOAD	C,[SELBANK]
08/92: A853     	STORE	[DEFSIZE],C
08/93: 3808     	LOADI	C,BI
08/94: BB01     	STOREF	[D+1],C
08/95: 389A     	LOADI	C,@+5
08/96: BB00     	STOREF	[D],C
08/97: 340B     	LOADI	B,EXP0_B
08/98: 3880     	LOADI	C,PARSEX
08/99: FF68     	JUMP	INDIR
08/9A: 5000     	ADDI	A,0
08/9B: 3082     	LOADI	A,E_UDEFX
08/9C: F721     	BRNZ	9F
08/9E:          	
08/9D:          	; SET [SELBANK] TO [VALUE]
08/9D: 8013     	LOAD	A,[VALUE+1]
08/9E: A04A     	STORE	[SELBANK],A
08/9F: 8012     	LOAD	A,[VALUE]
08/A0: 5000     	ADDI	A,0
08/A1: 3093     	LOADI	A,E_VBIG
08/A2: F71B     	BRNZ	9F
08/A4:          	
08/A3:          	; RESET THE SEGMENT
08/A3: 8053     	LOAD	A,[DEFSIZE]
08/A4: A016     	STORE	[TEMP],A
08/A5: 8049     	LOAD	A,[SEGMENT]
08/A6: 38B4     	LOADI	C,7F
08/A7: BB00     	STOREF	[D],C
08/A8: 3415     	LOADI	B,EMIT0_B
08/A9: 38C2     	LOADI	C,SETSEG
08/AA: FF57     	JUMP	INDIR
08/AC:          
08/AB:          	; SET THE SEGMENT
08/AB: 884A     DIRSEG:	LOAD	C,[SELBANK]
08/AC: A816     	STORE	[TEMP],C
08/AD: 3808     	LOADI	C,BI
08/AE: BB01     	STOREF	[D+1],C
08/AF: 38B4     	LOADI	C,7F
08/B0: BB00     	STOREF	[D],C
08/B1: 3415     	LOADI	B,EMIT0_B
08/B2: 38C2     	LOADI	C,SETSEG
08/B3: FF4E     	JUMP	INDIR
08/B5:          	
08/B4:          	; THIS BETTER BE A NEWLINE
08/B4: 802F     7:	LOAD	A,[TOKEN]
08/B5: 5000     	ADDI	A,0
08/B6: F604     	BRZ	8F
08/B7: 700A     	SUBI	A,NEWLINE
08/B8: F602     	BRZ	8F
08/BA:          	
08/B9:          	; NOPE 
08/B9: 3083     	LOADI	A,E_UXTOK
08/BA: FF03     	JUMP	9F
08/BC:          
08/BB:          	; GO BACK TO ASMLINE
08/BB: 3403     8:	LOADI	B,MAIN0_B
08/BC: 3895     	LOADI	C,ASMLINE
08/BD: FF44     	JUMP	INDIR
08/BF:          
08/BE:          	; ERROR STUB
08/BE: 3401     9:	LOADI	B,CORE0_B
08/BF: 38D7     	LOADI	C,ERROR
08/C0: FF41     	JUMP	INDIR
08/C2:          ; AS2.S
08/C1:          ; SOURCE INPUT AND TOKENIZER
08/C1:          ; GAVIN TERSTEEG, 2024
08/C1:          ; SDMAY24-14
08/C1:          
08/C1:          ; NEW LINE CHARACTER
08/C1:          NEWLINE	= 0X0A
08/C1:          SEMICOL	= 0X3B
08/C1:          SQUOTE	= 0X27
08/C1:          DQUOTE	= 0X22
08/C1:          SYMBOL	= 0X80
08/C1:          NUMERIC	= 0X81
08/C1:          
08/C1:          
08/C1:          BI	= BI+1
08/C1:          .TEXT
08/C1:          .BANK	BI
09/80:          TOK0_B	= BI
09/80:          
09/80:          	; GETS THE NEXT TOKEN
09/80:          	; TOKEN TYPE IS RETURNED IN [TOKEN]
09/80:          	; SPECIAL TYPES ARE:
09/80:          	; 'A' -> ALPHANUMERIC
09/80:          	; '0' -> NUMERIC
09/80:          	; NEWLINE -> NEW LINE
09/80:          	; ALL WHITESPACE IS IGNORED, UNLESS WE ARE INSIDE
09/80:          	; A STRING OR DEFINED CHAR
09/80:          	; 'A' AND '0' TOKENS WILL POPULATE THE TOKEN BUFFER
09/80:          	; AS WELL
09/80: 7C02     NEXTTOK:SUBI	D,2
09/82:          
09/81:          	; STORE RETURN ADDRESS
09/81: 340A     	LOADI	B,TOK1_B
09/82: B701     	STOREF	[D+1],B
09/84:          	
09/83:          	; CHECK SRCSTAT
09/83: 388B     	LOADI	C,NEXTTOB
09/84: 8034     	LOAD	A,[SRCSTAT]
09/85: 5001     	ADDI	A,1
09/86: F77B     	BRNZ	INDIR
09/87: A034     	STORE	[SRCSTAT],A
09/89:          	
09/88: 3880     	LOADI	C,NEXTTOA
09/89: FF78     	JUMP	INDIR
09/8B:          
09/8A:          	; RESETS THE STATE OF THE TOKEN STREAM BACK TO
09/8A:          	; BEGINNING OF SOURCE INPUT
09/8A: 30FF     REWIND:	LOADI	A,0-1
09/8B: A030     	STORE	[SRCINDX],A
09/8D:          	
09/8C:          	; SET FIRST CHAR AS INVALID
09/8C: 3080     	LOADI	A,0X80
09/8D: A035     	STORE	[SRCCHAR],A
09/8F:          	
09/8E:          	; RESET STAT
09/8E: 30FF     	LOADI	A,0XFF
09/8F: A034     	STORE	[SRCSTAT],A
09/91:          	
09/90:          	; GET THE NEXT FILE
09/90:          	; ALL POINTERS WILL BE RESET FOR FILE READ IN
09/90:          	; SRCINDX == ARGC IF WE ARE DONE READING IN BLOCK
09/90: 7C02     NEXTSRC:SUBI	D,2
09/92:          
09/91:          	; RESET POINTER, BLOCK, AND SRCLINE
09/91: 3000     	LOADI	A,0
09/92: A033     	STORE	[SRCPNTR],A
09/93: A031     	STORE	[SRCBLK],A
09/94: A036     	STORE	[SRCLINE],A
09/95: A037     	STORE	[SRCLINE+1],A
09/97:          	
09/96:          	; RESET BANK
09/96: 3007     	LOADI	A,SRC_B
09/97: A032     	STORE	[SRCBANK],A
09/99:          
09/98:          	; INCREMENT SOURCE INDEX
09/98: 8030     0:	LOAD	A,[SRCINDX]
09/99: 5001     	ADDI	A,1
09/9A: A030     	STORE	[SRCINDX],A
09/9C:          
09/9B:          	; CHECK BOUNDS OF INDEX
09/9B: 8400     	LOAD	B,[ARGC]
09/9C: D100     	CMP	A,B
09/9D: F01C     	BRAE	9F
09/9F:          	
09/9E:          	; ATTEMPT TO OPEN FILE
09/9E: 8472     	LOAD	B,[CMDL_B]
09/9F: A46C     	STORE	[ARG_BNK],B
09/A0: 9001     	LOADF	A,[A+ARGV]
09/A1: 3809     	LOADI	C,BI
09/A2: BB01     	STOREF	[D+1],C
09/A3: 38A5     	LOADI	C,@+2
09/A4: 3406     	LOADI	B,S_OPEN
09/A5: 38A7     	LOADI	C,@+2
09/A6: FF5D     	JUMP	SYSCALL
09/A7: 5000     	ADDI	A,0
09/A8: F609     	BRZ	1F
09/AA:          	
09/A9:          	; ERROR
09/A9:          	; ALSO SET LINENUM AND CURRFIL
09/A9: 8030     	LOAD	A,[SRCINDX]
09/AA: A047     	STORE	[CURRFIL],A
09/AB: 3000     	LOADI	A,0
09/AC: A045     	STORE	[LINENUM],A
09/AD: A046     	STORE	[LINENUM+1],A
09/AE: 3080     	LOADI	A,E_COPEN
09/AF: 3401     	LOADI	B,CORE0_B
09/B0: 38D7     	LOADI	C,ERROR
09/B1: FF50     	JUMP	INDIR
09/B3:          
09/B2:          	; ATTEMPT TO READ THE FIRST BLOCK
09/B2: 3407     1:	LOADI	B,SRC_B
09/B3: A46C     	STORE	[ARG_BNK],B
09/B4: 3000     	LOADI	A,0
09/B5: 3408     	LOADI	B,S_READ
09/B6: 38B8     	LOADI	C,@+2
09/B7: FF4C     	JUMP	SYSCALL
09/B9:          	
09/B8:          	; IF IT DIDN'T WORK, GET THE NEXT BLOCK
09/B8: 5000     	ADDI	A,0
09/B9: F7DE     	BRNZ	0B
09/BB:          
09/BA:          	; RETURN
09/BA: 5C02     9:	ADDI	D,2
09/BB: FF47     	JUMP	IRET
09/BD:          	
09/BC:          	; GET THE NEXT CHARACTER IN THE STREAM
09/BC:          	; RETURNS CHARACTER IN [SRCCHAR]
09/BC:          	; IF THERE ARE NO CHARACTER, 0 WILL BE RETURNED
09/BC: 7C02     NEXTCHR:SUBI	D,2
09/BE:          
09/BD:          	; CHECK SRCINDX != ARGC
09/BD: 8030     	LOAD	A,[SRCINDX]
09/BE: 8400     	LOAD	B,[ARGC]
09/BF: D100     	CMP	A,B
09/C0: F627     	BRZ	8F
09/C2:          
09/C1:          	; CHECK IF SRCPNTR IS VALID
09/C1: 8033     	LOAD	A,[SRCPNTR]
09/C2: 8432     	LOAD	B,[SRCBANK]
09/C3: 5000     	ADDI	A,0
09/C4: F40C     	BRN	3F
09/C6:          	
09/C5:          	; ALRIGHT, LETS JUST GRAB A CHARACTER FROM THE BANK
09/C5: A480     1:	STORE	[DBANK],B
09/C6: 9800     	LOADF	C,[A]
09/C7: 3400     	LOADI	B,0
09/C8: A480     	STORE	[DBANK],B
09/CA:          	
09/C9:          	; INCREMENT POINTER
09/C9: 5001     	ADDI	A,1
09/CA: A033     	STORE	[SRCPNTR],A
09/CC:          	
09/CB:          	; CAN WE RETURN?
09/CB: A835     2:	STORE	[SRCCHAR],C
09/CC: 5800     	ADDI	C,0
09/CD: F71C     	BRNZ	9F
09/CE: 380A     	LOADI	C,NEWLINE
09/CF: A835     	STORE	[SRCCHAR],C
09/D0: FF15     	JUMP	7F
09/D2:          	
09/D1:          	; INCREMENT BANK
09/D1: 3000     3:	LOADI	A,0
09/D2: 5401     	ADDI	B,1
09/D3: A432     	STORE	[SRCBANK],B
09/D4: 380B     	LOADI	C,SRC_B+4
09/D5: D600     	CMP	B,C
09/D6: F1EE     	BRB	1B
09/D8:          	
09/D7:          	; READ A NEW BLOCK
09/D7: 8031     	LOAD	A,[SRCBLK]
09/D8: 5001     	ADDI	A,1
09/D9: F00C     	BRC	7F
09/DA: A031     	STORE	[SRCBLK],A
09/DB: 3809     	LOADI	C,BI
09/DC: BB01     	STOREF	[D+1],C
09/DD: 3408     	LOADI	B,S_READ
09/DE: 38E0     	LOADI	C,@+2
09/DF: FF24     	JUMP	SYSCALL
09/E0: 5000     	ADDI	A,0
09/E1: F704     	BRNZ	7F
09/E3:          	
09/E2:          	; GO READ A CHARACTER NOW
09/E2: 3000     	LOADI	A,0
09/E3: 3407     	LOADI	B,SRC_B
09/E4: A432     	STORE	[SRCBANK],B
09/E5: FFDF     	JUMP	1B
09/E7:          
09/E6:          	; WE ARE DONE WITH THIS FILE
09/E6:          	; MOVE ON TO THE NEXT
09/E6: 5C02     7:	ADDI	D,2
09/E7: FFA8     	JUMP	NEXTSRC
09/E9:          	
09/E8:          	; STORE A ZERO IN SRCCHAR
09/E8: 3000     8:	LOADI	A,0
09/E9: A035     	STORE	[SRCCHAR],A
09/EB:          	
09/EA:          	; RETURN
09/EA: 5C02     9:	ADDI	D,2
09/EB: FF17     	JUMP	IRET
09/ED:          	
09/EC:          BI	= BI+1
09/EC:          .TEXT
09/EC:          .BANK	BI
0A/80:          TOK1_B	= BI
0A/80:          	
0A/80:          	; SHADOW OF NEXTTOK
0A/80:          	; DO WE NEED TO INCREMENT THE LINE?
0A/80:          	; YES WE DO, UPDATE CURRENT FILE
0A/80: 8030     NEXTTOA:LOAD	A,[SRCINDX]
0A/81: A047     	STORE	[CURRFIL],A
0A/83:          	
0A/82:          	; INCRMENT SOURCE LINE
0A/82: 8037     	LOAD	A,[SRCLINE+1]
0A/83: 5001     	ADDI	A,1
0A/84: A037     	STORE	[SRCLINE+1],A
0A/85: 8436     	LOAD	B,[SRCLINE]
0A/86: F102     	BRNC	1F
0A/87: 5401     	ADDI	B,1
0A/88: A436     	STORE	[SRCLINE],B
0A/8A:          	
0A/89:          	; REFLECT ON LINE NUMBER
0A/89: A445     1:	STORE	[LINENUM],B
0A/8A: A046     	STORE	[LINENUM+1],A
0A/8C:          
0A/8B:          
0A/8B:          	; CHECK THE NEXT CHARACTER IN THE STREAM
0A/8B: 8035     NEXTTOB:LOAD	A,[SRCCHAR]
0A/8C: 5000     	ADDI	A,0
0A/8D: F66C     	BRZ	8F
0A/8E: F43D     	BRN	5F
0A/90:          
0A/8F:          	; IS IT A NEWLINE?
0A/8F: 340A     	LOADI	B,NEWLINE
0A/90: D100     	CMP	A,B
0A/91: F703     	BRNZ	1F
0A/93:          	
0A/92:          	; NEW LINE
0A/92: 34FF     	LOADI	B,0XFF
0A/93: A434     	STORE	[SRCSTAT],B
0A/94: FF65     	JUMP	8F
0A/96:          
0A/95:          	; CHECK STATE STUFF
0A/95: 8834     1:	LOAD	C,[SRCSTAT]
0A/96: 343B     	LOADI	B,SEMICOL
0A/97: D600     	CMP	B,C
0A/98: F633     	BRZ	5F
0A/99: 5800     	ADDI	C,0
0A/9A: F71B     	BRNZ	4F
0A/9C:          
0A/9B:          	; IS IT WHITESPACE?
0A/9B: 3420     	LOADI	B,0X20
0A/9C: D100     	CMP	A,B
0A/9D: F92E     	BRBE	5F
0A/9F:          	
0A/9E:          	; IS IT A NUMBER?
0A/9E: 3430     	LOADI	B,'0'
0A/9F: D100     	CMP	A,B
0A/A0: F104     	BRB	2F
0A/A1: 3439     	LOADI	B,'9'
0A/A2: D100     	CMP	A,B
0A/A3: 3481     	LOADI	B,NUMERIC
0A/A4: F92C     	BRBE	0F
0A/A6:          	
0A/A5:          	; NOPE, IS IT IS LETTER?
0A/A5:          	; FIRST CONVERT FROM LOWERCASE TO UPPERCASE
0A/A5: 3461     2:	LOADI	B,'A'+0X20
0A/A6: D100     	CMP	A,B
0A/A7: F104     	BRB	3F
0A/A8: 347A     	LOADI	B,'Z'+0X20
0A/A9: D100     	CMP	A,B
0A/AA: F801     	BRA	3F
0A/AB: 7020     	SUBI	A,0X20
0A/AD:          	
0A/AC:          	; CHECK FOR UPPER CASE LETTER
0A/AC: 345F     3:	LOADI	B,'_'
0A/AD: D100     	CMP	A,B
0A/AE: F605     	BRZ	2F
0A/AF: 3441     	LOADI	B,'A'
0A/B0: D100     	CMP	A,B
0A/B1: F104     	BRB	4F
0A/B2: 345A     	LOADI	B,'Z'
0A/B3: D100     	CMP	A,B
0A/B4: 3480     2:	LOADI	B,SYMBOL
0A/B5: F91B     	BRBE	0F
0A/B7:          	
0A/B6:          	; NOPE, PROCESS AS A LITERAL
0A/B6: 8834     4:	LOAD	C,[SRCSTAT]
0A/B7: D200     	CMP	A,C
0A/B8: F703     	BRNZ	4F
0A/BA:          	
0A/B9:          	; END OF ENCLOSED SECTION
0A/B9: 3800     	LOADI	C,0
0A/BA: A834     	STORE	[SRCSTAT],C
0A/BB: FF3E     	JUMP	8F
0A/BD:          	
0A/BC:          	; IF ENCLOSED, JUST SEND DIRECTLY TO OUTPUT
0A/BC: 5800     4:	ADDI	C,0
0A/BD: F73C     	BRNZ	8F
0A/BF:          
0A/BE:          	; IS IT A COMMENT?
0A/BE: 343B     	LOADI	B,SEMICOL
0A/BF: D100     	CMP	A,B
0A/C0: F702     	BRNZ	4F
0A/C2:          	
0A/C1:          	; SET COMMENT MODE
0A/C1: A034     	STORE	[SRCSTAT],A
0A/C2: FF09     	JUMP	5F
0A/C4:          
0A/C3:          	; IS IT A SINGLE OR DOUBLE QUOTE?
0A/C3: 3427     4:	LOADI	B,SQUOTE
0A/C4: D100     	CMP	A,B
0A/C5: F604     	BRZ	4F
0A/C6: 3422     	LOADI	B,DQUOTE
0A/C7: D100     	CMP	A,B
0A/C8: F601     	BRZ	4F
0A/C9: FF30     	JUMP	8F
0A/CB:          
0A/CA:          	; YES IT IS, SET THE STATE AND EXIT
0A/CA: A034     4:	STORE	[SRCSTAT],A
0A/CB: FF2E     	JUMP	8F
0A/CD:          	
0A/CC:          	; GRAB A NEW CHARACTER FROM THE STREAM
0A/CC: 388B     5:	LOADI	C,NEXTTOB
0A/CD: BB00     	STOREF	[D],C
0A/CE: 3409     	LOADI	B,TOK0_B
0A/CF: 38BC     	LOADI	C,NEXTCHR
0A/D0: FF31     	JUMP	INDIR
0A/D2:          
0A/D1:          	; COPY THE SYMBOL OR NUMERIC INTO THE BUFFER
0A/D1: A42F     0:	STORE	[TOKEN],B
0A/D3:          
0A/D2:          	; PREPARE TO COPY
0A/D2: 3839     	LOADI	C,TBUF
0A/D4:          	
0A/D3:          	; STORE CHARACTER
0A/D3: B200     1:	STOREF	[C],A
0A/D4: A838     	STORE	[BUFPNTR],C
0A/D6:          
0A/D5:          	; GET NEXT CHARACTER
0A/D5: 38DA     2:	LOADI	C,@+5
0A/D6: BB00     	STOREF	[D],C
0A/D7: 3409     	LOADI	B,TOK0_B
0A/D8: 38BC     	LOADI	C,NEXTCHR
0A/D9: FF28     	JUMP	INDIR
0A/DB:          	
0A/DA:          	; CHECK CHARACTER TYPE
0A/DA: 8838     	LOAD	C,[BUFPNTR]
0A/DB: 8035     	LOAD	A,[SRCCHAR]
0A/DD:          	
0A/DC:          	; IS IT A NUMBER?
0A/DC: 3430     	LOADI	B,'0'
0A/DD: D100     	CMP	A,B
0A/DE: F118     	BRB	7F
0A/DF: 3439     	LOADI	B,'9'
0A/E0: D100     	CMP	A,B
0A/E1: F910     	BRBE	4F
0A/E3:          	
0A/E2:          	; NOPE, IS IT IS LETTER?
0A/E2:          	; FIRST CONVERT FROM LOWERCASE TO UPPERCASE
0A/E2: 3461     	LOADI	B,'A'+0X20
0A/E3: D100     	CMP	A,B
0A/E4: F104     	BRB	3F
0A/E5: 347A     	LOADI	B,'Z'+0X20
0A/E6: D100     	CMP	A,B
0A/E7: F801     	BRA	3F
0A/E8: 7020     	SUBI	A,0X20
0A/EA:          	
0A/E9:          	; CHECK FOR UPPER CASE LETTER
0A/E9: 345F     3:	LOADI	B,'_'
0A/EA: D100     	CMP	A,B
0A/EB: F606     	BRZ	4F
0A/EC: 3441     	LOADI	B,'A'
0A/ED: D100     	CMP	A,B
0A/EE: F108     	BRB	7F
0A/EF: 345A     	LOADI	B,'Z'
0A/F0: D100     	CMP	A,B
0A/F1: F805     	BRA	7F
0A/F3:          	
0A/F2:          	; ADD TO THE STRING
0A/F2: 5801     4:	ADDI	C,1
0A/F3: 3443     	LOADI	B,TBUFEND
0A/F4: D600     	CMP	B,C
0A/F5: F6DF     	BRZ	2B
0A/F6: FFDC     	JUMP	1B
0A/F8:          	
0A/F7:          	; TERMINATE
0A/F7: 3000     7:	LOADI	A,0
0A/F8: B201     	STOREF	[C+1],A
0A/F9: FF03     	JUMP	9F
0A/FB:          	
0A/FA:          	; SAVE TOKEN TYPE AND CONSUME THE SRCCHAR
0A/FA: 3480     8:	LOADI	B,0X80
0A/FB: A435     	STORE	[SRCCHAR],B
0A/FC: A02F     	STORE	[TOKEN],A
0A/FE:          	
0A/FD:          	; RETURN
0A/FD: 5C02     9:	ADDI	D,2
0A/FE: FF04     	JUMP	IRET
0A/100:          	
0A/FF:          ; AS3.S
0A/FF:          ; EXPRESSION HANDLING
0A/FF:          ; GAVIN TERSTEEG, 2024
0A/FF:          ; SDMAY24-14
0A/FF:          
0A/FF:          BI	= BI+1
0A/FF:          .TEXT
0A/FF:          .BANK	BI
0B/80:          EXP0_B	= BI
0B/80:          
0B/80:          	; PARSE AN EXPRESSION
0B/80:          	; THE FIRST PART OF THE EXPRESSION SHOULD BE IN THE TOKEN BUFFER
0B/80:          	; IF PARSING IS SUCCESSFUL, THE RESULT WILL BE PLACED IN [VALUE]
0B/80:          	; IF A SYMBOL IS UNDEFINED, AN ERROR CODE WILL BE RETURNED IN
0B/80:          	; REGISTER A, OTHERWISE A = 0X00 WILL BE RETURNED.
0B/80:          PRECED	= CHAR
0B/80: 340C     PARSEX: LOADI	B,EXP1_B
0B/81: 3880     	LOADI	C,PARSEXA
0B/82: FF7F     	JUMP	INDIR
0B/84:          
0B/83:          	; PARSE A NUMERIC VALUE
0B/83:          	; THE NUMERIC TO BE PARSED SHOULD BE IN THE TOKEN BUFFER
0B/83:          	; IF THE PARSING IS SUCCESSFUL, THE RESULT WILL BE PLACED IN [VALUE]
0B/83:          	; DEFAULT RADIX IS 10
0B/83:          RADIX	= TEMP
0B/83: 300A     PARSEN:	LOADI	A,10
0B/84: A016     	STORE	[RADIX],A
0B/86:          	
0B/85:          	; RESET VALUE AS WELL
0B/85: 3000     	LOADI	A,0
0B/86: A012     	STORE	[VALUE],A
0B/87: A013     	STORE	[VALUE+1],A
0B/89:          	
0B/88:          	; RESET BUFFER POINTER
0B/88: 3039     	LOADI	A,TBUF
0B/8A:          	
0B/89:          	; DETECT LEADING ZERO
0B/89: 9400     	LOADF	B,[A]
0B/8A: 5400     	ADDI	B,0
0B/8B: F677     	BRZ	IRET
0B/8C: 7430     	SUBI	B,'0'
0B/8D: F709     	BRNZ	1F
0B/8F:          	
0B/8E:          	; SET RADIX TO 8
0B/8E: 3408     	LOADI	B,8
0B/8F: A416     	STORE	[RADIX],B
0B/91:          	
0B/90:          	; GET NEXT CHARACTER, COMPARE WITH 9
0B/90: 5001     	ADDI	A,1
0B/91: 9400     	LOADF	B,[A]
0B/92: 3839     	LOADI	C,'9'
0B/93: D600     	CMP	B,C
0B/94: F902     	BRBE	1F
0B/96:          	
0B/95:          	; RADIX FORMAT IS "0?..."
0B/95: 5001     	ADDI	A,1
0B/96: FF0E     	JUMP	4F
0B/98:          	
0B/97:          	; CHECK END OF NUMBER FOR RADIX
0B/97: 2800     1:	MOV	C,A
0B/98: 9600     2:	LOADF	B,[C]
0B/99: 5400     	ADDI	B,0
0B/9A: F602     	BRZ	3F
0B/9B: 5801     	ADDI	C,1
0B/9C: FFFB     	JUMP	2B
0B/9E:          	
0B/9D:          	; LOOK AT LAST CHARACTER
0B/9D: 96FF     3:	LOADF	B,[C+0-1]
0B/9E: 7439     	SUBI	B,'9'
0B/9F: F915     	BRBE	0F
0B/A0: 5439     	ADDI	B,'9'
0B/A1: A038     	STORE	[BUFPNTR],A
0B/A2: 3000     	LOADI	A,0
0B/A3: B2FF     	STOREF	[C+0-1],A
0B/A4: 8038     	LOAD	A,[BUFPNTR]
0B/A6:          
0B/A5:          	; B = POTENTIAL RADIX
0B/A5: 3810     4:	LOADI	C,16
0B/A6: 7458     	SUBI	B,'X'
0B/A7: F60C     	BRZ	5F
0B/A8: 74F0     	SUBI	B,'H'-'X'
0B/A9: F60A     	BRZ	5F
0B/AA: 3808     	LOADI	C,8
0B/AB: 7407     	SUBI	B,'O'-'H'
0B/AC: F607     	BRZ	5F
0B/AD: 3802     	LOADI	C,2
0B/AE: 74F3     	SUBI	B,'B'-'O'
0B/AF: F604     	BRZ	5F
0B/B1:          	
0B/B0:          	; ISSUE WITH PARSING NUMERIC
0B/B0: 3081     8:	LOADI	A,E_UXNUM
0B/B1: 3401     	LOADI	B,CORE0_B
0B/B2: 38D7     	LOADI	C,ERROR
0B/B3: FF4E     	JUMP	INDIR
0B/B5:          	
0B/B4:          	; C = RADIX
0B/B4: A816     5:	STORE	[RADIX],C
0B/B6:          	
0B/B5:          	; START PARSING THE NUMERIC
0B/B5: A038     0:	STORE	[BUFPNTR],A
0B/B7:          	
0B/B6:          	; GRAB A CHARACTER
0B/B6: 9000     	LOADF	A,[A]
0B/B7: 5000     	ADDI	A,0
0B/B8: F64A     	BRZ	IRET
0B/BA:          	
0B/B9:          	; MULTIPLY BY RADIX (SLOWISH)
0B/B9: AC10     	STORE	[SPARK],D
0B/BA: 8412     	LOAD	B,[VALUE]
0B/BB: 8813     	LOAD	C,[VALUE+1]
0B/BC: 8C16     	LOAD	D,[RADIX]
0B/BE:          	
0B/BD: 7C01     1:	SUBI	D,1
0B/BE: F609     	BRZ	3F
0B/BF: 8013     	LOAD	A,[VALUE+1]
0B/C0: 4200     	ADD	A,C
0B/C1: A013     	STORE	[VALUE+1],A
0B/C2: 8012     	LOAD	A,[VALUE]
0B/C3: F101     	BRNC	2F
0B/C4: 5001     	ADDI	A,1
0B/C5: 4100     2:	ADD	A,B
0B/C6: A012     	STORE	[VALUE],A
0B/C7: FFF5     	JUMP	1B
0B/C9:          	
0B/C8:          	; GET THE CHARACTER AGAIN, AND INCREMENT POINTER
0B/C8: 8C10     3:	LOAD	D,[SPARK]
0B/C9: 8038     	LOAD	A,[BUFPNTR]
0B/CA: 9800     	LOADF	C,[A]
0B/CB: 5001     	ADDI	A,1
0B/CD:          	
0B/CC:          	; CHECK BOUNDS
0B/CC: 3430     	LOADI	B,'0'
0B/CD: D900     	CMP	C,B
0B/CE: F1E1     	BRB	8B 
0B/CF: 3439     	LOADI	B,'9'
0B/D0: D900     	CMP	C,B
0B/D1: F907     	BRBE	4F
0B/D3:          	
0B/D2: 3441     	LOADI	B,'A'
0B/D3: D900     	CMP	C,B
0B/D4: F1DB     	BRB	8B
0B/D5: 3446     	LOADI	B,'F'
0B/D6: D900     	CMP	C,B
0B/D7: F8D8     	BRA	8B
0B/D9:          	
0B/D8: 7807     	SUBI	C,'A'-('0'+10)
0B/DA:          	
0B/D9:          	; CONVERT FROM ASCII
0B/D9: 7830     4:	SUBI	C,'0'
0B/DB:          
0B/DA:          	; COMPARE WITH RADIX
0B/DA: 8416     	LOAD	B,[RADIX]
0B/DB: D900     	CMP	C,B
0B/DC: F0D3     	BRAE	8B
0B/DE:          	
0B/DD:          	; ADD TO VALUE
0B/DD: 8413     	LOAD	B,[VALUE+1]
0B/DE: 4600     	ADD	B,C
0B/DF: A413     	STORE	[VALUE+1],B
0B/E0: F1D4     	BRNC	0B
0B/E1: 8412     	LOAD	B,[VALUE]
0B/E2: 5401     	ADDI	B,1
0B/E3: A412     	STORE	[VALUE],B
0B/E4: FFD0     	JUMP	0B
0B/E6:          
0B/E5:          BI	= BI+1
0B/E5:          .TEXT
0B/E5:          .BANK	BI
0C/80:          EXP1_B	= BI
0C/80:          
0C/80:          	; SHADOW OF PARSEX
0C/80: 7C02     PARSEXA:SUBI	D,2
0C/82:          
0C/81:          	; RESET ISDEF
0C/81: 3000     	LOADI	A,0
0C/82: A02E     	STORE	[ISDEF],A
0C/84:          
0C/83:          	; RESET VALUE AND EXPRESSION STACKS
0C/83: 3022     	LOADI	A,VSTACK
0C/84: A02D     	STORE	[VINDEX],A
0C/85: 3018     	LOADI	A,ESTACK
0C/86: A02C     	STORE	[EINDEX],A
0C/88:          	
0C/87:          	; PROCESS TOKEN (VALUES AND LEFT PARENTHESIS)
0C/87:          	; ALSO SET RETURN ADDRESS
0C/87: 380C     0:	LOADI	C,BI
0C/88: BB01     	STOREF	[D+1],C
0C/89: 3000     	LOADI	A,0
0C/8A: A012     	STORE	[VALUE],A
0C/8B: 802F     	LOAD	A,[TOKEN]
0C/8D:          
0C/8C:          	; IS IT A NUMERIC?
0C/8C: 7081     	SUBI	A,NUMERIC
0C/8D: F71D     	BRNZ	7F
0C/8F:          	
0C/8E:          	; CHECK FOR LOCAL SYMBOLS
0C/8E: 803B     	LOAD	A,[TBUF+2]
0C/8F: 5000     	ADDI	A,0
0C/90: F715     	BRNZ	2F
0C/91: 803A     	LOAD	A,[TBUF+1]
0C/92: 7042     	SUBI	A,'B'
0C/93: F603     	BRZ	1F
0C/94: 7004     	SUBI	A,'F'-'B'
0C/95: F710     	BRNZ	2F
0C/97:          	
0C/96:          	; WE ARE GOING FORWARDS
0C/96: 3001     	LOADI	A,1
0C/98:          	
0C/97:          	; PROCESS LOCAL SYMBOL
0C/97: A011     1:	STORE	[CHAR],A
0C/98: 884F     	LOAD	C,[NUMLOC]
0C/99: A814     	STORE	[OPERAND],C
0C/9A: 8850     	LOAD	C,[NUMLOC+1]
0C/9B: A815     	STORE	[OPERAND+1],C
0C/9D:          	
0C/9C:          	; LOOK SYMBOL UP
0C/9C: 8039     	LOAD	A,[TBUF]
0C/9D: 38A2     	LOADI	C,@+5
0C/9E: BB00     	STOREF	[D],C
0C/9F: 3412     	LOADI	B,SYM0_B
0C/A0: 38BE     	LOADI	C,GETLOC
0C/A1: FF60     	JUMP	INDIR
0C/A3:          	
0C/A2:          	; IS IT DEFINED?
0C/A2: 5000     	ADDI	A,0
0C/A3: F625     	BRZ	8F
0C/A4: A02E     	STORE	[ISDEF],A
0C/A5: FF23     	JUMP	8F
0C/A7:          
0C/A6:          	; PARSE NUMERIC
0C/A6: 38C9     2:	LOADI	C,8F
0C/A7: BB00     	STOREF	[D],C
0C/A8: 340B     	LOADI	B,EXP0_B
0C/A9: 3883     	LOADI	C,PARSEN
0C/AA: FF57     	JUMP	INDIR
0C/AC:          	
0C/AB:          	; IS IT A SYMBOL?
0C/AB: 70FF     7:	SUBI	A,SYMBOL-NUMERIC
0C/AC: F709     	BRNZ	7F
0C/AE:          
0C/AD:          	; PROCESS SYMBOL
0C/AD: 38B2     	LOADI	C,@+5
0C/AE: BB00     	STOREF	[D],C
0C/AF: 3412     	LOADI	B,SYM0_B
0C/B0: 3886     	LOADI	C,GETSYM
0C/B1: FF50     	JUMP	INDIR
0C/B3:          	
0C/B2:          	; IS IT DEFINED?
0C/B2: 5000     	ADDI	A,0
0C/B3: F615     	BRZ	8F
0C/B4: A02E     	STORE	[ISDEF],A
0C/B5: FF13     	JUMP	8F
0C/B7:          
0C/B6:          	; IS IT A SINGLE QUOTE?
0C/B6: 70A7     7:	SUBI	A,SQUOTE-SYMBOL
0C/B7: F70D     	BRNZ	7F
0C/B9:          	
0C/B8:          	; GET THE NEXT TOKEN
0C/B8: 38BA     	LOADI	C,@+2
0C/B9: FF31     	JUMP	PARNEXT
0C/BB:          	
0C/BA:          	; SET IT AS THE VALUE
0C/BA: 802F     	LOAD	A,[TOKEN]
0C/BB: A013     	STORE	[VALUE+1],A
0C/BD:          
0C/BC:          	; CONSUME NEXT SINGLE QUOTE
0C/BC: 38BE     	LOADI	C,@+2
0C/BD: FF2D     	JUMP	PARNEXT
0C/BF:          	
0C/BE:          	; MAKE SURE IT IS A SINGLE QUOTE
0C/BE: 802F     	LOAD	A,[TOKEN]
0C/BF: 7027     	SUBI	A,SQUOTE
0C/C0: F608     	BRZ	8F
0C/C2:          	
0C/C1:          	; ERROR!
0C/C1: 3083     	LOADI	A,E_UXTOK
0C/C2: 3401     	LOADI	B,CORE0_B
0C/C3: 38D7     	LOADI	C,ERROR
0C/C4: FF3D     	JUMP	INDIR
0C/C6:          
0C/C5:          	; IS IT A '@'?
0C/C5: 7019     7:	SUBI	A,'@'-SQUOTE
0C/C6: F70E     	BRNZ	7F
0C/C8:          
0C/C7:          	; PROCESS COUNTER
0C/C7: 8048     	LOAD	A,[COUNTER]
0C/C8: A013     	STORE	[VALUE+1],A
0C/CA:          
0C/C9:          	; PLACE [VALUE] ONTO THE VSTACK
0C/C9: 842D     8:	LOAD	B,[VINDEX]
0C/CA: 3027     	LOADI	A,VSTACK+STACKSZ
0C/CB: D400     	CMP	B,A
0C/CC: 3084     	LOADI	A,E_VSTKO
0C/CD: F017     	BRAE	8F	; ERROR!
0C/CE: 8012     	LOAD	A,[VALUE]
0C/CF: B100     	STOREF	[B],A
0C/D0: 8013     	LOAD	A,[VALUE+1]
0C/D1: B101     	STOREF	[B+1],A
0C/D2: 5402     	ADDI	B,2
0C/D3: A42D     	STORE	[VINDEX],B
0C/D4: FF13     	JUMP	PARSEXC
0C/D6:          	
0C/D5:          	; IS IT A '('?
0C/D5: 70E8     7:	SUBI	A,'('-'@'
0C/D6: F70D     	BRNZ	7F
0C/D8:          	
0C/D7: A011     	STORE	[PRECED],A
0C/D9:          	
0C/D8:          	; PLACE LEFT PARENTHESIS ON ESTACK
0C/D8: 842C     PARSEXB:LOAD	B,[EINDEX]
0C/D9: 301D     	LOADI	A,ESTACK+STACKSZ
0C/DA: D400     	CMP	B,A
0C/DB: 3085     	LOADI	A,E_ESTKO
0C/DC: F008     	BRAE	8F	; ERROR!
0C/DD: 802F     	LOAD	A,[TOKEN]
0C/DE: B100     	STOREF	[B],A
0C/DF: 8011     	LOAD	A,[PRECED]
0C/E0: B101     	STOREF	[B+1],A
0C/E1: 5402     	ADDI	B,2
0C/E2: A42C     	STORE	[EINDEX],B
0C/E3: FF04     	JUMP	PARSEXC
0C/E5:          	
0C/E4:          	; ERROR!
0C/E4: 3083     7:	LOADI	A,E_UXTOK
0C/E5: 3401     8:	LOADI	B,CORE0_B
0C/E6: 38D7     	LOADI	C,ERROR
0C/E7: FF1A     	JUMP	INDIR
0C/E9:          
0C/E8:          	; GET THE NEXT TOKEN
0C/E8: 380C     PARSEXC:LOADI	C,BI
0C/E9: BB01     	STOREF	[D+1],C
0C/EA: 38EF     	LOADI	C,@+5
0C/EB: BB00     PARNEXT:STOREF	[D],C
0C/EC: 3409     	LOADI	B,TOK0_B
0C/ED: 3880     	LOADI	C,NEXTTOK
0C/EE: FF13     	JUMP	INDIR
0C/F0:          	
0C/EF:          	; LOOK FOR SPECIAL VALUES
0C/EF: 802F     	LOAD	A,[TOKEN]
0C/F0: A011     	STORE	[CHAR],A
0C/F1: 7081     	SUBI	A,NUMERIC
0C/F2: F694     	BRZ	0B
0C/F3: 70FF     	SUBI	A,SYMBOL-NUMERIC
0C/F4: F692     	BRZ	0B
0C/F5: 70A7     	SUBI	A,SQUOTE-SYMBOL
0C/F6: F690     	BRZ	0B
0C/F7: 7019     	SUBI	A,'@'-SQUOTE
0C/F8: F68E     	BRZ	0B
0C/F9: 70E8     	SUBI	A,'('-'@'
0C/FA: F68C     	BRZ	0B
0C/FC:          	
0C/FB:          	; THIS IS SOME SORT OF OPERATION
0C/FB: 340D     	LOADI	B,EXP2_B
0C/FC: 3880     	LOADI	C,PARSEXD
0C/FD: FF04     	JUMP	INDIR
0C/FF:          
0C/FE:          BI	= BI+1
0C/FE:          .TEXT
0C/FE:          .BANK	BI
0D/80:          EXP2_B	= BI
0D/80:          
0D/80:          	; HANDLE OTHER CHARACTERS IN EXPRESSION
0D/80:          	; ALSO GET PRECEDENCE OF CHARACTER
0D/80: 380D     PARSEXD:LOADI	C,BI
0D/81: BB01     	STOREF	[D+1],C
0D/82: 3802     	LOADI	C,2
0D/83: 7003     	SUBI	A,'+'-'('
0D/84: F63C     	BRZ	5F
0D/85: 7002     	SUBI	A,'-'-'+'
0D/86: F63A     	BRZ	5F
0D/87: 3803     	LOADI	C,3
0D/88: 70FD     	SUBI	A,'*'-'-'
0D/89: F637     	BRZ	5F
0D/8A: 7005     	SUBI	A,'/'-'*'
0D/8B: F635     	BRZ	5F
0D/8C: 70F6     	SUBI	A,'%'-'/'
0D/8D: F633     	BRZ	5F
0D/8E: 3807     	LOADI	C,7
0D/8F: 7057     	SUBI	A,'|'-'%'
0D/90: F630     	BRZ	5F
0D/91: 3805     	LOADI	C,5
0D/92: 70AA     	SUBI	A,'&'-'|'
0D/93: F62D     	BRZ	5F
0D/94: 3801     	LOADI	C,1
0D/95: 70FB     	SUBI	A,'!'-'&'
0D/96: F62A     	BRZ	5F
0D/97: 3806     	LOADI	C,6
0D/98: 703D     	SUBI	A,'^'-'!'
0D/99: F627     	BRZ	5F
0D/9A: 70CB     	SUBI	A,')'-'^'
0D/9B: F713     	BRNZ	3F
0D/9D:          	
0D/9C:          	; PROCESS RIGHT PARENTHESIS
0D/9C: 802C     0:	LOAD	A,[EINDEX]
0D/9D: 3418     	LOADI	B,ESTACK
0D/9E: D100     	CMP	A,B
0D/9F: F804     	BRA	1F
0D/A1:          	
0D/A0:          	; ERROR! PARENTHESIS ARE MISMATCHED
0D/A0: 3088     	LOADI	A,E_PAREN
0D/A1: 3401     	LOADI	B,CORE0_B
0D/A2: 38D7     	LOADI	C,ERROR
0D/A3: FF5E     	JUMP	INDIR
0D/A5:          	
0D/A4:          	; CHECK TOP OF ESTACK
0D/A4: 94FE     1:	LOADF	B,[A+0-2]
0D/A5: 7428     	SUBI	B,'('
0D/A6: F605     	BRZ	2F
0D/A8:          	
0D/A7:          	; POP OFF OF ESTACK
0D/A7: 389C     	LOADI	C,0B
0D/A8: BB00     	STOREF	[D],C
0D/A9: 340E     	LOADI	B,EXP3_B
0D/AA: 3880     	LOADI	C,ESTKPOP
0D/AB: FF56     	JUMP	INDIR
0D/AD:          
0D/AC:          	; DO FINAL POP AND EXIT
0D/AC: 7002     2:	SUBI	A,2
0D/AD: A02C     	STORE	[EINDEX],A
0D/AE: FF23     	JUMP	6F
0D/B0:          	
0D/AF:          	; CHECK FOR SHIFTS
0D/AF: 7015     3:	SUBI	A,'>'-')'
0D/B0: F602     	BRZ	4F
0D/B1: 70FE     	SUBI	A,'<'-'>'
0D/B2: F722     	BRNZ	9F
0D/B4:          
0D/B3:          	; IT'S A '<<' OR '>>' (HOPEFULLY)
0D/B3:          	; GET THE NEXT TOKEN TO CONFIRM
0D/B3: 38B8     4:	LOADI	C,@+5
0D/B4: BB00     	STOREF	[D],C
0D/B5: 3409     	LOADI	B,TOK0_B
0D/B6: 3880     	LOADI	C,NEXTTOK
0D/B7: FF4A     	JUMP	INDIR
0D/B9:          	
0D/B8:          	; IF THE NEXT TOKEN IS THE SAME AS THE LAST, WE ARE GOOD
0D/B8: 802F     	LOAD	A,[TOKEN]
0D/B9: 8411     	LOAD	B,[CHAR]
0D/BA: D100     	CMP	A,B
0D/BB: 3804     	LOADI	C,4
0D/BC: F604     	BRZ	5F
0D/BE:          	
0D/BD:          	; BOO! ERROR!
0D/BD: 3083     	LOADI	A,E_UXTOK
0D/BE: 3401     	LOADI	B,CORE0_B
0D/BF: 38D7     	LOADI	C,ERROR
0D/C0: FF41     	JUMP	INDIR
0D/C2:          
0D/C1:          	; WE HAVE A SPECIAL CHARACTER
0D/C1:          	; C = PRECEDENCE
0D/C1: A811     5:	STORE	[PRECED],C
0D/C3:          	
0D/C2:          	; CHECK EINDEX
0D/C2: 802C     0:	LOAD	A,[EINDEX]
0D/C3: 3418     	LOADI	B,ESTACK
0D/C4: D100     	CMP	A,B
0D/C5: F609     	BRZ	5F
0D/C7:          
0D/C6:          	; COMPARE PRECEDENCE OF THE TOP OF THE ESTACK WITH OP PRECEDENCE
0D/C6: 94FF     	LOADF	B,[A+0-1]
0D/C7: 8011     	LOAD	A,[PRECED]
0D/C8: D100     	CMP	A,B
0D/C9: F805     	BRA	5F
0D/CB:          	
0D/CA:          	; POP OFF OF ESTACK
0D/CA: 38C2     	LOADI	C,0B
0D/CB: BB00     	STOREF	[D],C
0D/CC: 340E     	LOADI	B,EXP3_B
0D/CD: 3880     	LOADI	C,ESTKPOP
0D/CE: FF33     	JUMP	INDIR
0D/D0:          	
0D/CF:          	; PUSH ONTO ESTACK
0D/CF: 340C     5:	LOADI	B,EXP1_B
0D/D0: 38D8     	LOADI	C,PARSEXB
0D/D1: FF30     	JUMP	INDIR
0D/D3:          
0D/D2:          	; GET THE NEXT TOKEN
0D/D2: 340C     6:	LOADI	B,EXP1_B
0D/D3: 38E8     	LOADI	C,PARSEXC
0D/D4: FF2D     	JUMP	INDIR
0D/D6:          	
0D/D5:          	; CAN'T RECOGNIZE CHARACTER, END OF EXPRESSION
0D/D5:          	; AND WE ARE DONE
0D/D5: 802C     9:	LOAD	A,[EINDEX]
0D/D6: 3418     	LOADI	B,ESTACK
0D/D7: D100     	CMP	A,B
0D/D8: F605     	BRZ	0F
0D/DA:          	
0D/D9:          	; POP OFF THE EXPRESSION STACK
0D/D9: 38D5     	LOADI	C,9B
0D/DA: BB00     	STOREF	[D],C
0D/DB: 340E     	LOADI	B,EXP3_B
0D/DC: 3880     	LOADI	C,ESTKPOP
0D/DD: FF24     	JUMP	INDIR
0D/DF:          	
0D/DE:          	; ESTACK IS EMPTY
0D/DE:          	; MAKE SURE THERE IS 1 IN VSTACK
0D/DE: 802D     0:	LOAD	A,[VINDEX]
0D/DF: 3424     	LOADI	B,VSTACK+2
0D/E0: D100     	CMP	A,B
0D/E1: F604     	BRZ	1F
0D/E3:          
0D/E2:          	; ERROR :(
0D/E2: 3084     	LOADI	A,E_VSTKO
0D/E3: 3401     	LOADI	B,CORE0_B
0D/E4: 38D7     	LOADI	C,ERROR
0D/E5: FF1C     	JUMP	INDIR
0D/E7:          
0D/E6:          	; SET RESULT TO VALUE
0D/E6: 98FF     1:	LOADF	C,[A+0-1]
0D/E7: 94FE     	LOADF	B,[A+0-2]
0D/E8: A412     	STORE	[VALUE],B
0D/E9: A813     	STORE	[VALUE+1],C
0D/EB:          
0D/EA:          	; RETURN
0D/EA: 802E     	LOAD	A,[ISDEF]
0D/EB: 5C02     	ADDI	D,2
0D/EC: FF16     	JUMP	IRET
0D/EE:          
0D/ED:          BI	= BI+1
0D/ED:          .TEXT
0D/ED:          .BANK	BI
0E/80:          EXP3_B	= BI
0E/80:          
0E/80:          	; POP A VALUE OFF OF THE ESTACK
0E/80:          	; CHECK IF EXPRESSION STACK IS EMPTY
0E/80: 3087     ESTKPOP:LOADI	A,E_ESTKD
0E/81: 842C     	LOAD	B,[EINDEX]
0E/82: 3818     	LOADI	C,ESTACK
0E/83: D600     	CMP	B,C
0E/84: F966     	BRBE	9F
0E/86:          	
0E/85:          	; POP VALUE OFF ESTACK
0E/85: 7402     	SUBI	B,2
0E/86: A42C     	STORE	[EINDEX],B
0E/88:          	
0E/87:          	; CHECK IF VALUE STACK HAS TWO VALUES
0E/87: 3086     	LOADI	A,E_VSTKD
0E/88: 842D     	LOAD	B,[VINDEX]
0E/89: 3824     	LOADI	C,VSTACK+2
0E/8A: D600     	CMP	B,C
0E/8B: F95F     	BRBE	9F
0E/8D:          
0E/8C:          	; MOVE TWO VSTACK VALUES INTO [VALUE] AND [OPERAND]
0E/8C: 91FF     	LOADF	A,[B+0-1]
0E/8D: A015     	STORE	[OPERAND+1],A
0E/8E: 91FE     	LOADF	A,[B+0-2]
0E/8F: A014     	STORE	[OPERAND],A
0E/90: 91FD     	LOADF	A,[B+0-3]
0E/91: A013     	STORE	[VALUE+1],A
0E/92: 91FC     	LOADF	A,[B+0-4]
0E/93: A012     	STORE	[VALUE],A
0E/95:          	
0E/94:          	; RESPOSITION VSTACK POINTER
0E/94: 7402     	SUBI	B,2
0E/95: A42D     	STORE	[VINDEX],B
0E/97:          	
0E/96:          	; ARE WE DEFINED?
0E/96: 802E     	LOAD	A,[ISDEF]
0E/97: 5000     	ADDI	A,0
0E/98: F74C     	BRNZ	8F
0E/9A:          	
0E/99:          	; GRAB THE OPERATION
0E/99: 802C     	LOAD	A,[EINDEX]
0E/9A: 9000     	LOADF	A,[A]
0E/9C:          	
0E/9B:          	; CHECK FOR ADDITION '+'
0E/9B: 702B     	SUBI	A,'+'
0E/9C: F70B     	BRNZ	7F
0E/9E:          	
0E/9D:          	; DO ADDITION OPERATION
0E/9D: 8013     	LOAD	A,[VALUE+1]
0E/9E: 8415     	LOAD	B,[OPERAND+1]
0E/9F: 4100     	ADD	A,B
0E/A0: A013     	STORE	[VALUE+1],A
0E/A1: 8012     	LOAD	A,[VALUE]
0E/A2: 8414     	LOAD	B,[OPERAND]
0E/A3: F101     	BRNC	1F
0E/A4: 5001     	ADDI	A,1
0E/A5: 4100     1:	ADD	A,B
0E/A6: A012     	STORE	[VALUE],A
0E/A7: FF3D     	JUMP	8F
0E/A9:          	
0E/A8:          	; CHECK FOR SUBTRACTION '-'
0E/A8: 7002     7:	SUBI	A,'-'-'+'
0E/A9: F70B     	BRNZ	7F
0E/AB:          	
0E/AA:          	; DO SUBTRACTION OPERATION
0E/AA: 8013     	LOAD	A,[VALUE+1]
0E/AB: 8415     	LOAD	B,[OPERAND+1]
0E/AC: 6100     	SUB	A,B
0E/AD: A013     	STORE	[VALUE+1],A
0E/AE: 8012     	LOAD	A,[VALUE]
0E/AF: 8414     	LOAD	B,[OPERAND]
0E/B0: F001     	BRC	1F
0E/B1: 7001     	SUBI	A,1
0E/B2: 6100     1:	SUB	A,B
0E/B3: A012     	STORE	[VALUE],A
0E/B4: FF30     	JUMP	8F
0E/B6:          	
0E/B5:          	; CHECK FOR MULTIPLICATION
0E/B5: 70FD     7:	SUBI	A,'*'-'-'
0E/B6: F72B     	BRNZ	7F
0E/B8:          	
0E/B7:          	; DO MULTIPLICATION OPERATION
0E/B7: AC10     	STORE	[SPARK],D
0E/B8: 8812     	LOAD	C,[VALUE]
0E/B9: 8C13     	LOAD	D,[VALUE+1]
0E/BA: 3000     	LOADI	A,0
0E/BB: A012     	STORE	[VALUE],A
0E/BC: A013     	STORE	[VALUE+1],A
0E/BE:          	
0E/BD:          	; ARE WE DONE YET?
0E/BD: 5800     0:	ADDI	C,0
0E/BE: F704     	BRNZ	1F
0E/BF: 5C00     	ADDI	D,0
0E/C0: F702     	BRNZ	1F
0E/C1: 8C10     	LOAD	D,[SPARK]
0E/C2: FF22     	JUMP	8F
0E/C4:          	
0E/C3:          	; SHIFT 'CD' RIGHT
0E/C3:          	; IF BIT ZERO OF D IS NOT SET, THEN SKIP ADDING
0E/C3:          	; [OPERAND] TO [VALUE]
0E/C3: CD00     1:	SHIFTR	D
0E/C4: F004     	BRC	3F
0E/C5: C900     	SHIFTR	C
0E/C6: F10F     	BRNC	6F
0E/C7: 5C80     	ADDI	D,0X80
0E/C8: FF0D     2:	JUMP	6F
0E/C9: C900     3:	SHIFTR	C
0E/CA: F101     	BRNC	4F
0E/CB: 5C80     	ADDI	D,0X80
0E/CD:          
0E/CC:          	; ADD [OPERAND] TO [VALUE]
0E/CC: 8013     4:	LOAD	A,[VALUE+1]
0E/CD: 8415     	LOAD	B,[OPERAND+1]
0E/CE: 4100     	ADD	A,B
0E/CF: A013     	STORE	[VALUE+1],A
0E/D0: 8012     	LOAD	A,[VALUE]
0E/D1: 8414     	LOAD	B,[OPERAND]
0E/D2: F101     	BRNC	5F
0E/D3: 5001     	ADDI	A,1
0E/D4: 4100     5:	ADD	A,B
0E/D5: A012     	STORE	[VALUE],A
0E/D7:          
0E/D6:          	; SHIFT [OPERAND] LEFT
0E/D6: 8015     6:	LOAD	A,[OPERAND+1]
0E/D7: 4000     	SHIFTL	A
0E/D8: A015     	STORE	[OPERAND+1],A
0E/D9: 8014     	LOAD	A,[OPERAND]
0E/DA: F104     	BRNC	6F
0E/DB: 4000     	SHIFTL	A
0E/DC: 5001     	ADDI	A,1
0E/DD: A014     	STORE	[OPERAND],A
0E/DE: FFDE     	JUMP	0B
0E/DF: 4000     6:	SHIFTL	A
0E/E0: A014     	STORE	[OPERAND],A
0E/E1: FFDB     	JUMP	0B
0E/E3:          
0E/E2:          	; SWITCH INSTRUCTION BANK
0E/E2: 340F     7:	LOADI	B,EXP4_B
0E/E3: 3880     	LOADI	C,ESTKPOA
0E/E4: FF1D     	JUMP	INDIR
0E/E6:          
0E/E5:          	; PLACE [VALUE] ON STACK AND RETURN
0E/E5: 802D     8:	LOAD	A,[VINDEX]
0E/E6: 8413     	LOAD	B,[VALUE+1]
0E/E7: B4FF     	STOREF	[A+0-1],B
0E/E8: 8412     	LOAD	B,[VALUE]
0E/E9: B4FE     	STOREF	[A+0-2],B
0E/EA: FF18     	JUMP	IRET
0E/EC:          
0E/EB:          	; HANDLE ERROR
0E/EB: 3401     9:	LOADI	B,CORE0_B
0E/EC: 38D7     	LOADI	C,ERROR
0E/ED: FF14     	JUMP	INDIR
0E/EF:          	
0E/EE:          BI	= BI+1
0E/EE:          .TEXT
0E/EE:          .BANK	BI
0F/80:          EXP4_B	= BI
0F/80:          
0F/80:          	; CONTINUATION OF ESTKPOP
0F/80:          	; CHECK FOR DIVISION OR MODULUS
0F/80: 7005     ESTKPOA:SUBI	A,'/'-'*'
0F/81: F602     	BRZ	0F
0F/82: 70F6     	SUBI	A,'%'-'/'
0F/83: F74F     	BRNZ	7F
0F/85:          	
0F/84:          	; MAKE SURE OPERAND ISN'T ZERO
0F/84:          DVCOUNT	= CHAR
0F/84: 8014     0:	LOAD	A,[OPERAND]
0F/85: 5000     	ADDI	A,0
0F/86: F705     	BRNZ	0F
0F/87: 8015     	LOAD	A,[OPERAND+1]
0F/88: 5000     	ADDI	A,0 
0F/89: F702     	BRNZ	0F
0F/8B:          
0F/8A:          	; ERROR! DIVIDE BY ZERO
0F/8A: 3089     	LOADI	A,E_DZERO
0F/8B: FF50     	JUMP	9F
0F/8D:          	
0F/8C:          	; DO DIVISION
0F/8C: AC10     0:	STORE	[SPARK],D
0F/8E:          	
0F/8D:          	; RESET REMAINDER
0F/8D: 3800     	LOADI	C,0
0F/8E: 3C00     	LOADI	D,0
0F/90:          
0F/8F:          	; RESET COUNTER
0F/8F: 3010     	LOADI	A,16
0F/91:          
0F/90:          	; SHIFT QUOTIENT LEFT
0F/90:          	; MAIN DIVISOR LOOP
0F/90: A011     0:	STORE	[DVCOUNT],A
0F/91: 8013     	LOAD	A,[VALUE+1]
0F/92: 4000     	SHIFTL	A
0F/93: A013     	STORE	[VALUE+1],A
0F/94: 8012     	LOAD	A,[VALUE]
0F/95: F109     	BRNC	2F
0F/96: 4000     	SHIFTL	A
0F/97: F003     	BRC	1F
0F/98: 5001     	ADDI	A,1
0F/99: A012     	STORE	[VALUE],A
0F/9A: FF06     	JUMP	3F
0F/9B: 5001     1:	ADDI	A,1
0F/9C: 7000     	SUBI	A,0
0F/9D: A012     	STORE	[VALUE],A 
0F/9E: FF02     	JUMP	3F
0F/9F: 4000     2:	SHIFTL	A
0F/A0: A012     	STORE	[VALUE],A
0F/A2:          	
0F/A1:          	; SHIFT REMAINDER LEFT + CARRY
0F/A1: F002     3:	BRC	1F
0F/A2: 4F00     	SHIFTL	D
0F/A3: FF06     	JUMP	3F 
0F/A5:          	
0F/A4:          	; SHIFT BOTTOM 8 BITS (SHIFT IN)
0F/A4: 4F00     1:	SHIFTL	D
0F/A5: F002     	BRC	2F
0F/A6: 5C01     	ADDI	D,1
0F/A7: FF02     	JUMP	3F
0F/A8: 5C01     2:	ADDI	D,1
0F/A9: 7C00     	SUBI	D,0
0F/AB:          
0F/AA:          	; DO TOP 8 BITS
0F/AA: F002     3:	BRC	1F
0F/AB: 4A00     	SHIFTL	C
0F/AC: FF06     	JUMP	3F 
0F/AE:          	
0F/AD:          	; SHIFT TOP 8 BITS (SHIFT IN)
0F/AD: 4A00     1:	SHIFTL	C
0F/AE: F002     	BRC	2F
0F/AF: 5801     	ADDI	C,1
0F/B0: FF02     	JUMP	3F
0F/B1: 5801     2:	ADDI	C,1
0F/B2: 7800     	SUBI	C,0
0F/B4:          	
0F/B3:          	; SUBTRACT BY DIVISOR ([OPERAND])
0F/B3: 8015     3:	LOAD	A,[OPERAND+1]
0F/B4: 6C00     	SUB	D,A
0F/B5: 8014     	LOAD	A,[OPERAND]
0F/B6: F005     	BRC	1F
0F/B8:          	
0F/B7:          	; SUBTRACT THE CARRY
0F/B7: 7801     	SUBI	C,1
0F/B8: F003     	BRC	1F
0F/B9: 6800     	SUB	C,A
0F/BA: 5000     	ADDI	A,0
0F/BB: FF01     	JUMP	2F
0F/BD:          	
0F/BC: 6800     1:	SUB	C,A
0F/BE:          
0F/BD:          	; IF CARRY IS SET, SKIP ADD AND INCREMENT 
0F/BD: F007     2:	BRC	2F
0F/BF:          
0F/BE:          	; ADD DIVISOR TO REMAINDER
0F/BE: 8015     	LOAD	A,[OPERAND+1]
0F/BF: 4C00     	ADD	D,A
0F/C0: F101     	BRNC	1F
0F/C1: 5801     	ADDI	C,1
0F/C2: 8014     1:	LOAD	A,[OPERAND]
0F/C3: 4800     	ADD	C,A
0F/C4: FF03     	JUMP	3F
0F/C6:          	
0F/C5:          	; INCREMENT [VALUE+1]
0F/C5: 8013     2:	LOAD	A,[VALUE+1]
0F/C6: 5001     	ADDI	A,1
0F/C7: A013     	STORE	[VALUE+1],A
0F/C9:          	
0F/C8:          	; DECREMENT COUNTER
0F/C8: 8011     3:	LOAD	A,[DVCOUNT]
0F/C9: 7001     	SUBI	A,1
0F/CA: F7C5     	BRNZ	0B
0F/CC:          
0F/CB:          	; DONE, REGRAB THE OPERATION
0F/CB: 802C     6:	LOAD	A,[EINDEX]
0F/CC: 9000     	LOADF	A,[A]
0F/CD: 702F     	SUBI	A,'/'
0F/CE: F602     	BRZ	6F
0F/D0:          	
0F/CF:          	; SET [VALUE] TO REMAINDER
0F/CF: A812     	STORE	[VALUE],C
0F/D0: AC13     	STORE	[VALUE+1],D
0F/D2:          
0F/D1:          	; RESTORE STACK
0F/D1: 8C10     6:	LOAD	D,[SPARK]
0F/D2: FF03     	JUMP	8F
0F/D4:          
0F/D3:          	; SWITCH INSTRUCTION BANK
0F/D3: 3410     7:	LOADI	B,EXP5_B
0F/D4: 3880     	LOADI	C,ESTKPOB
0F/D5: FF2C     	JUMP	INDIR
0F/D7:          
0F/D6:          	; PLACE [VALUE] ON STACK AND RETURN
0F/D6: 802D     8:	LOAD	A,[VINDEX]
0F/D7: 8413     	LOAD	B,[VALUE+1]
0F/D8: B4FF     	STOREF	[A+0-1],B
0F/D9: 8412     	LOAD	B,[VALUE]
0F/DA: B4FE     	STOREF	[A+0-2],B
0F/DB: FF27     	JUMP	IRET
0F/DD:          
0F/DC:          	; HANDLE ERROR
0F/DC: 3401     9:	LOADI	B,CORE0_B
0F/DD: 38D7     	LOADI	C,ERROR
0F/DE: FF23     	JUMP	INDIR
0F/E0:          	
0F/DF:          BI	= BI+1
0F/DF:          .TEXT
0F/DF:          .BANK	BI
10/80:          EXP5_B	= BI
10/80:          
10/80:          	; CONTINUATION OF ESTKPOP
10/80:          	; CHECK FOR RIGHT SHIFT
10/80: 7019     ESTKPOB:SUBI	A,'>'-'%'
10/81: F715     	BRNZ	7F
10/83:          	
10/82:          	; GET THE COUNT
10/82: 8814     	LOAD	C,[OPERAND]
10/83: 5800     	ADDI	C,0
10/84: 3410     	LOADI	B,16
10/85: F704     	BRNZ	0F
10/86: 8815     	LOAD	C,[OPERAND+1]
10/87: D600     	CMP	B,C
10/88: F901     	BRBE	0F
10/89: 2600     	MOV	B,C
10/8B:          
10/8A:          	; CHECK COUNTER
10/8A: 5400     0:	ADDI	B,0
10/8B: F663     	BRZ	8F
10/8D:          	
10/8C:          	; SHIFT [VALUE] RIGHT
10/8C: 8012     	LOAD	A,[VALUE]
10/8D: C100     	SHIFTR	A
10/8E: A012     	STORE	[VALUE],A
10/8F: 8013     	LOAD	A,[VALUE+1]
10/90: F104     	BRNC	1F
10/91: C100     	SHIFTR	A
10/92: 5080     	ADDI	A,0X80
10/93: A013     	STORE	[VALUE+1],A
10/94: FF19     	JUMP	2F
10/95: C100     1:	SHIFTR	A
10/96: A013     	STORE	[VALUE+1],A
10/98:          	
10/97:          	; CHECK FOR LEFT SHIFT
10/97: 70FE     7:	SUBI	A,'<'-'>'
10/98: F717     	BRNZ	7F
10/9A:          	
10/99:          	; GET THE COUNT
10/99: 8814     	LOAD	C,[OPERAND]
10/9A: 5800     	ADDI	C,0
10/9B: 3410     	LOADI	B,16
10/9C: F704     	BRNZ	0F
10/9D: 8815     	LOAD	C,[OPERAND+1]
10/9E: D600     	CMP	B,C
10/9F: F901     	BRBE	0F
10/A0: 2600     	MOV	B,C
10/A2:          
10/A1:          	; CHECK COUNTER
10/A1: 5400     0:	ADDI	B,0
10/A2: F64C     	BRZ	8F
10/A4:          	
10/A3:          	; SHIFT [VALUE] LEFT
10/A3: 8013     	LOAD	A,[VALUE+1]
10/A4: 4000     	SHIFTL	A
10/A5: A013     	STORE	[VALUE+1],A
10/A6: 8012     	LOAD	A,[VALUE]
10/A7: F104     	BRNC	1F
10/A8: 4000     	SHIFTL	A
10/A9: 5001     	ADDI	A,1
10/AA: A012     	STORE	[VALUE],A
10/AB: FF02     	JUMP	2F
10/AC: 4000     1:	SHIFTL	A
10/AD: A012     	STORE	[VALUE],A
10/AF:          
10/AE: 7401     2:	SUBI	B,1
10/AF: FFF1     	JUMP	0B
10/B1:          	
10/B0:          	; CHECK FOR LOGICAL AND
10/B0: 70EA     7:	SUBI	A,'&'-'<'
10/B1: F71B     	BRNZ	7F
10/B3:          	
10/B2:          	; DO LOGICAL AND BETWEEN [VALUE] AND [OPERAND]
10/B2: 8012     	LOAD	A,[VALUE]
10/B3: 8414     	LOAD	B,[OPERAND]
10/B4: 3808     	LOADI	C,8
10/B6:          	
10/B5: 4000     0:	SHIFTL	A
10/B6: F104     	BRNC	1F
10/B7: 4500     	SHIFTL	B
10/B8: F103     	BRNC	2F
10/B9: 5001     	ADDI	A,1
10/BA: FF01     	JUMP	2F
10/BB: 4500     1:	SHIFTL	B
10/BC: 7801     2:	SUBI	C,1
10/BD: F7F7     	BRNZ	0B
10/BE: A012     	STORE	[VALUE],A
10/C0:          	
10/BF:          	; DO LOGICAL AND BETWEEN [VALUE+1] AND [OPERAND+1]
10/BF: 8013     	LOAD	A,[VALUE+1]
10/C0: 8415     	LOAD	B,[OPERAND+1]
10/C1: 3808     	LOADI	C,8
10/C3:          	
10/C2: 4000     0:	SHIFTL	A
10/C3: F104     	BRNC	1F
10/C4: 4500     	SHIFTL	B
10/C5: F103     	BRNC	2F
10/C6: 5001     	ADDI	A,1
10/C7: FF01     	JUMP	2F
10/C8: 4500     1:	SHIFTL	B
10/C9: 7801     2:	SUBI	C,1
10/CA: F7F7     	BRNZ	0B
10/CB: A013     	STORE	[VALUE+1],A
10/CC: FF22     	JUMP	8F
10/CE:          	
10/CD:          	; CHECK FOR LOGICAL OR
10/CD: 7056     7:	SUBI	A,'|'-'&'
10/CE: F71D     	BRNZ	7F
10/D0:          	
10/CF:          	; DO LOGICAL OR BETWEEN [VALUE] AND [OPERAND]
10/CF: 8012     	LOAD	A,[VALUE]
10/D0: 8414     	LOAD	B,[OPERAND]
10/D1: 3808     	LOADI	C,8
10/D3:          	
10/D2: 4000     0:	SHIFTL	A
10/D3: F103     	BRNC	1F
10/D4: 4500     	SHIFTL	B
10/D5: 5001     	ADDI	A,1
10/D6: FF03     	JUMP	2F
10/D7: 4500     1:	SHIFTL	B
10/D8: F101     	BRNC	2F
10/D9: 5001     	ADDI	A,1
10/DA: 7801     2:	SUBI	C,1
10/DB: F7F6     	BRNZ	0B
10/DC: A012     	STORE	[VALUE],A
10/DE:          
10/DD:          	; DO LOGICAL OR BETWEEN [VALUE+1] AND [OPERAND+1]
10/DD: 8013     	LOAD	A,[VALUE+1]
10/DE: 8415     	LOAD	B,[OPERAND+1]
10/DF: 3808     	LOADI	C,8
10/E1:          	
10/E0: 4000     0:	SHIFTL	A
10/E1: F103     	BRNC	1F
10/E2: 4500     	SHIFTL	B
10/E3: 5001     	ADDI	A,1
10/E4: FF03     	JUMP	2F
10/E5: 4500     1:	SHIFTL	B
10/E6: F101     	BRNC	2F
10/E7: 5001     	ADDI	A,1
10/E8: 7801     2:	SUBI	C,1
10/E9: F7F6     	BRNZ	0B
10/EA: A013     	STORE	[VALUE+1],A
10/EB: FF03     	JUMP	8F
10/ED:          	
10/EC:          	; SWITCH INSTRUCTION BANK
10/EC: 3411     7:	LOADI	B,EXP6_B
10/ED: 3880     	LOADI	C,ESTKPOC
10/EE: FF13     	JUMP	INDIR
10/F0:          
10/EF:          	; PLACE [VALUE] ON STACK AND RETURN
10/EF: 802D     8:	LOAD	A,[VINDEX]
10/F0: 8413     	LOAD	B,[VALUE+1]
10/F1: B4FF     	STOREF	[A+0-1],B
10/F2: 8412     	LOAD	B,[VALUE]
10/F3: B4FE     	STOREF	[A+0-2],B
10/F4: FF0E     	JUMP	IRET
10/F6:          	
10/F5:          BI	= BI+1
10/F5:          .TEXT
10/F5:          .BANK	BI
11/80:          EXP6_B	= BI
11/80:          
11/80:          	; CONTINUATION OF ESTKPOP
11/80:          	; CHECK FOR XOR
11/80: 70E2     ESTKPOC:SUBI	A,'^'-'|'
11/81: F71F     	BRNZ	7F
11/83:          	
11/82:          	; DO LOGICAL XOR BETWEEN [VALUE] AND [OPERAND]
11/82: 8012     	LOAD	A,[VALUE]
11/83: 8414     	LOAD	B,[OPERAND]
11/84: 3808     	LOADI	C,8
11/86:          	
11/85: 4000     0:	SHIFTL	A
11/86: F104     	BRNC	1F
11/87: 4500     	SHIFTL	B
11/88: F005     	BRC	2F
11/89: 5001     	ADDI	A,1
11/8A: FF03     	JUMP	2F
11/8B: 4500     1:	SHIFTL	B
11/8C: F101     	BRNC	2F
11/8D: 5001     	ADDI	A,1
11/8E: 7801     2:	SUBI	C,1
11/8F: F7F5     	BRNZ	0B
11/90: A012     	STORE	[VALUE],A
11/92:          	
11/91:          	; DO LOGICAL XOR BETWEEN [VALUE+1] AND [OPERAND+1]
11/91: 8013     	LOAD	A,[VALUE+1]
11/92: 8415     	LOAD	B,[OPERAND+1]
11/93: 3808     	LOADI	C,8
11/95:          	
11/94: 4000     0:	SHIFTL	A
11/95: F104     	BRNC	1F
11/96: 4500     	SHIFTL	B
11/97: F005     	BRC	2F
11/98: 5001     	ADDI	A,1
11/99: FF03     	JUMP	2F
11/9A: 4500     1:	SHIFTL	B
11/9B: F101     	BRNC	2F
11/9C: 5001     	ADDI	A,1
11/9D: 7801     2:	SUBI	C,1
11/9E: F7F5     	BRNZ	0B
11/9F: A013     	STORE	[VALUE+1],A
11/A0: FF29     	JUMP	8F
11/A2:          	
11/A1:          	; CHECK FOR NOT-OR
11/A1: 70C3     7:	SUBI	A,'!'-'^'
11/A2: F721     	BRNZ	7F
11/A4:          	
11/A3:          	; DO LOGICAL NOT-OR BETWEEN [VALUE] AND [OPERAND]
11/A3: 8012     	LOAD	A,[VALUE]
11/A4: 8814     	LOAD	C,[OPERAND]
11/A5: 34FF     	LOADI	B,0XFF
11/A6: 6600     	SUB	B,C
11/A7: 3808     	LOADI	C,8
11/A9:          	
11/A8: 4000     0:	SHIFTL	A
11/A9: F103     	BRNC	1F
11/AA: 4500     	SHIFTL	B
11/AB: 5001     	ADDI	A,1
11/AC: FF03     	JUMP	2F
11/AD: 4500     1:	SHIFTL	B
11/AE: F101     	BRNC	2F
11/AF: 5001     	ADDI	A,1
11/B0: 7801     2:	SUBI	C,1
11/B1: F7F6     	BRNZ	0B
11/B2: A012     	STORE	[VALUE],A
11/B4:          
11/B3:          	; DO LOGICAL NOT-OR BETWEEN [VALUE+1] AND [OPERAND+1]
11/B3: 8013     	LOAD	A,[VALUE+1]
11/B4: 8815     	LOAD	C,[OPERAND+1]
11/B5: 34FF     	LOADI	B,0XFF
11/B6: 6600     	SUB	B,C
11/B7: 3808     	LOADI	C,8
11/B9:          	
11/B8: 4000     0:	SHIFTL	A
11/B9: F103     	BRNC	1F
11/BA: 4500     	SHIFTL	B
11/BB: 5001     	ADDI	A,1
11/BC: FF03     	JUMP	2F
11/BD: 4500     1:	SHIFTL	B
11/BE: F101     	BRNC	2F
11/BF: 5001     	ADDI	A,1
11/C0: 7801     2:	SUBI	C,1
11/C1: F7F6     	BRNZ	0B
11/C2: A013     	STORE	[VALUE+1],A
11/C3: FF06     	JUMP	8F
11/C5:          	
11/C4:          	; ENSURE THIS ISN'T A LEFT PARENTHESIS
11/C4: 7007     7:	SUBI	A,'('-'!'
11/C5: F704     	BRNZ	8F	; IDK WHAT IT IS AT THIS POINT
11/C7:          	
11/C6:          	; ERROR! PARENTHESIS ARE MISMATCHED
11/C6: 3088     	LOADI	A,E_PAREN
11/C7: 3401     	LOADI	B,CORE0_B
11/C8: 38D7     	LOADI	C,ERROR
11/C9: FF38     	JUMP	INDIR
11/CB:          
11/CA:          	; PLACE [VALUE] ON STACK AND RETURN
11/CA: 802D     8:	LOAD	A,[VINDEX]
11/CB: 8413     	LOAD	B,[VALUE+1]
11/CC: B4FF     	STOREF	[A+0-1],B
11/CD: 8412     	LOAD	B,[VALUE]
11/CE: B4FE     	STOREF	[A+0-2],B
11/CF: FF33     	JUMP	IRET
11/D1:          ; AS4.S
11/D0:          ; ASSEMBLER SYMBOL MANAGEMENT
11/D0:          ; GAVIN TERSTEEG, 2024
11/D0:          ; SDMAY24-14
11/D0:          
11/D0:          BI	= BI+1
11/D0:          .TEXT
11/D0:          .BANK	BI
12/80:          SYM0_B	= BI
12/80:          
12/80:          	; DEFINES OR UPDATES A SYMBOL IN THE TABLE
12/80:          	; [TBUF] = SYMBOL NAME
12/80:          	; RETURNS POINTER TO THE SYMBOL VALUE IN [DFBANK] AND [DFPNTR]
12/80: 3413     DEFINE:	LOADI	B,SYM1_B
12/81: 3880     	LOADI	C,DEFINEA
12/82: FF7F     	JUMP	INDIR
12/84:          	
12/83:          	; ADDS A NEW LOCAL SYMBOL TO THE TABLE
12/83:          	; A = SYMBOL NAME
12/83:          	; [COUNTER] = SYMBOL VALUE
12/83: 3414     ADDLOC:	LOADI	B,SYM2_B
12/84: 3880     	LOADI	C,ADDLOCA
12/85: FF7C     	JUMP	INDIR
12/87:          	
12/86:          	; GET A SYMBOL VALUE
12/86:          	; [TBUF] = SYMBOL NAME
12/86:          	; RETURNS VALUE OF SYMBOL IN [VALUE]
12/86:          	; A = 0X00 IF DEFINE, 0XFF IF UNDEFINED 
12/86: AC10     GETSYM:STORE	[SPARK],D
12/88:          
12/87:          	; START BY SEARCHING THE SYMBOL TABLE FOR EXISTING SYMBOLS
12/87: 340B     	LOADI	B,STAB_B
12/88: 3C01     0:	LOADI	D,ST_NAME
12/89: A416     	STORE	[TEMP],B
12/8B:          	
12/8A:          	; DO NAME CHECK
12/8A: 38F8     1:	LOADI	C,0-8
12/8C:          
12/8B:          	; COMPARE TBUF AND CURRENT SYMBOL
12/8B: 5808     2:	ADDI	C,8
12/8C: 9239     	LOADF	A,[C+TBUF]
12/8D: 8416     	LOAD	B,[TEMP]
12/8E: A480     	STORE	[DBANK],B
12/8F: 9700     	LOADF	B,[D]
12/90: D100     	CMP	A,B
12/91: F715     	BRNZ	3F
12/92: 5000     	ADDI	A,0
12/93: F606     	BRZ	2F
12/94: 3000     	LOADI 	A,0
12/95: A080     	STORE	[DBANK],A
12/96: 5C01     	ADDI	D,1
12/97: 7807     	SUBI	C,7
12/98: F7F2     	BRNZ	2B
12/99: 3808     	LOADI	C,8
12/9B:          	
12/9A:          	; STRING TERMINATES, FIX POINTER AND RETURN
12/9A: 6E00     2:	SUB	D,C
12/9B: 5C08     	ADDI	D,8
12/9D:          	
12/9C:          	; FOUND THE SYMBOL, GRAB THE VALUE
12/9C: 9301     	LOADF	A,[D+1]
12/9D: 9702     	LOADF	B,[D+2]
12/9E: 9F00     	LOADF	D,[D]
12/9F: 3800     	LOADI	C,0
12/A0: A880     	STORE	[DBANK],C
12/A1: A012     	STORE	[VALUE],A
12/A2: A413     	STORE	[VALUE+1],B
12/A3: 30FF     	LOADI	A,0XFF
12/A4: 6300     	SUB	A,D
12/A5: 8C10     	LOAD	D,[SPARK]
12/A6: FF5C     	JUMP	IRET
12/A8:          
12/A7:          	; SYMBOL DOES NOT MATCH
12/A7: 6E00     3:	SUB	D,C
12/A8: 9300     	LOADF	A,[D]
12/A9: 5000     	ADDI	A,0
12/AA: F60E     	BRZ	5F
12/AC:          	
12/AB:          	; EXIT SYMBOL ENTRY
12/AB: 5C16     	ADDI	D,ST_SIZE*2
12/AC: F404     	BRN	4F
12/AD: 7C0B     	SUBI	D,ST_SIZE
12/AE: 3000     	LOADI	A,0
12/AF: A080     	STORE	[DBANK],A
12/B0: FFD9     	JUMP	1B
12/B2:          
12/B1:          	; NEXT BANK
12/B1: 8000     4:	LOAD	A,[ST_NEXT]
12/B2: 5000     	ADDI	A,0
12/B3: 3800     	LOADI	C,0
12/B4: A880     	STORE	[DBANK],C
12/B5: F603     	BRZ	5F
12/B6: A016     	STORE	[TEMP],A
12/B7: 3C01     	LOADI	D,ST_NAME
12/B8: FFD1     	JUMP	1B
12/BA:          
12/B9:          	; CANNOT FIND SYMBOL!
12/B9: 3800     5:	LOADI	C,0
12/BA: A880     	STORE	[DBANK],C
12/BB: 8C10     	LOAD	D,[SPARK]
12/BC: 30FF     	LOADI	A,0XFF
12/BD: FF45     	JUMP	IRET
12/BF:          	
12/BE:          	; GETS THE VALUE OF A LOCAL SYMBOL
12/BE:          	; A COUNTER MUST BE SUPPLIED TO DETERMINE
12/BE:          	; HOW MANY ENTRIES WILL BE SKIPPED BEFORE
12/BE:          	; A MATCH CAN BE MADE
12/BE:          	; A = NAME OF LOCAL SYMBOL
12/BE:          	; [CHAR] = DIRECTION (0 = BACKWARDS, 1 = FORWARDS)
12/BE:          	; [OPERAND] = # OF LOCALS TO SKIP
12/BE:          	; RETURNS A = 0XFF IF UNDEFINED, 0X00 OTHERWISE
12/BE:          	; VALUE IS RETURNED IN [VALUE]
12/BE:          LASTLOC	= TEMP
12/BE: AC10     GETLOC:	STORE	[SPARK],D
12/C0:          	
12/BF:          	; ZERO OUT LAST
12/BF: 3400     	LOADI	B,0
12/C0: A416     	STORE	[LASTLOC],B
12/C2:          	
12/C1:          	; START AT BEGINNING OF TABLE
12/C1: 3803     	LOADI	C,LT_NAME+(LT_SIZE-1)
12/C2: 3C0C     	LOADI	D,LTAB_B
12/C4:          	
12/C3:          	; CHECK ENTRY
12/C3: AC80     0:	STORE	[DBANK],D
12/C4: 96FF     	LOADF	B,[C+0-(LT_SIZE-1)]
12/C5: D100     	CMP	A,B
12/C6: 3400     	LOADI	B,0
12/C7: A480     	STORE	[DBANK],B
12/C8: F708     	BRNZ	2F
12/CA:          	
12/C9:          	; IT MATCHES
12/C9:          	; IS INDEX ZERO?
12/C9: 8415     	LOAD	B,[OPERAND+1]
12/CA: 5400     	ADDI	B,0
12/CB: F703     	BRNZ	1F
12/CC: 8414     	LOAD	B,[OPERAND]
12/CD: 5400     	ADDI	B,0
12/CE: F614     	BRZ	4F
12/D0:          	
12/CF:          	; INDEX IS NOT ZERO, RECORD POINTER
12/CF: AC16     1:	STORE	[LASTLOC],D
12/D0: A817     	STORE	[LASTLOC+1],C
12/D2:          	
12/D1:          	; DECREMENT INDEX IF NOT ZERO
12/D1: 8415     2:	LOAD	B,[OPERAND+1]
12/D2: 7401     	SUBI	B,1
12/D3: A415     	STORE	[OPERAND+1],B
12/D4: F007     	BRC	3F
12/D5: 8414     	LOAD	B,[OPERAND]
12/D6: 7401     	SUBI	B,1
12/D7: A415     	STORE	[OPERAND+1],B
12/D8: F003     	BRC	3F
12/D9: 3400     	LOADI	B,0
12/DA: A414     	STORE	[OPERAND],B
12/DB: A415     	STORE	[OPERAND+1],B
12/DD:          
12/DC:          	; NEXT ENTRY
12/DC: 5802     3:	ADDI	C,LT_SIZE
12/DD: F5E5     	BRNN	0B
12/DE: 3803     	LOADI	C,LT_NAME+(LT_SIZE-1)
12/DF: AC80     	STORE	[DBANK],D
12/E0: 8C00     	LOAD	D,[LT_NEXT]
12/E1: 5C00     	ADDI	D,0
12/E2: F7E0     	BRNZ	0B
12/E4:          	
12/E3:          	; LOOP EXIT
12/E3: 3400     4:	LOADI	B,0
12/E4: A480     	STORE	[DBANK],B
12/E6:          	
12/E5:          	; BACKWARD OR FORWARDS?
12/E5: 8411     	LOAD	B,[CHAR]
12/E6: 5400     	ADDI	B,0
12/E7: F702     	BRNZ	1F
12/E9:          	
12/E8:          	; BACKWARDS IT IS
12/E8: 8C16     	LOAD	D,[LASTLOC]
12/E9: 8817     	LOAD	C,[LASTLOC+1]
12/EB:          	
12/EA:          	; DID WE ACTUALLY GET SOMETHING?
12/EA: 30FF     1:	LOADI	A,0XFF
12/EB: 5C00     	ADDI	D,0
12/EC: F606     	BRZ	9F
12/EE:          	
12/ED:          	; OUTPUT VALUE
12/ED: AC80     	STORE	[DBANK],D
12/EE: 9600     	LOADF	B,[C+1-(LT_SIZE-1)]
12/EF: 3000     	LOADI	A,0
12/F0: A080     	STORE	[DBANK],A
12/F1: A012     	STORE	[VALUE],A
12/F2: A413     	STORE	[VALUE+1],B
12/F4:          
12/F3:          	; EXIT
12/F3: 8C10     9:	LOAD	D,[SPARK]
12/F4: FF0E     	JUMP	IRET
12/F6:          
12/F5:          
12/F5:          BI	= BI+1
12/F5:          .TEXT
12/F5:          .BANK	BI
13/80:          SYM1_B	= BI
13/80:          
13/80:          	; SHADOW OF DEFINE
13/80: AC10     DEFINEA:STORE	[SPARK],D
13/82:          
13/81:          	; START BY SEARCHING THE SYMBOL TABLE FOR EXISTING SYMBOLS
13/81: 340B     	LOADI	B,STAB_B
13/82: 3C01     0:	LOADI	D,ST_NAME
13/83: A451     	STORE	[DFBANK],B
13/85:          	
13/84:          	; DO NAME CHECK
13/84: 38F8     1:	LOADI	C,0-8
13/86:          
13/85:          	; COMPARE TBUF AND CURRENT SYMBOL
13/85: 5808     2:	ADDI	C,8
13/86: 9239     	LOADF	A,[C+TBUF]
13/87: 8451     	LOAD	B,[DFBANK]
13/88: A480     	STORE	[DBANK],B
13/89: 9700     	LOADF	B,[D]
13/8A: D100     	CMP	A,B
13/8B: F70F     	BRNZ	3F
13/8C: 5000     	ADDI	A,0
13/8D: F606     	BRZ	2F
13/8E: 3000     	LOADI 	A,0
13/8F: A080     	STORE	[DBANK],A
13/90: 5C01     	ADDI	D,1
13/91: 7807     	SUBI	C,7
13/92: F7F2     	BRNZ	2B
13/93: 3808     	LOADI	C,8
13/95:          	
13/94:          	; STRING TERMINATES, FIX POINTER AND RETURN
13/94: 6E00     2:	SUB	D,C
13/95: 5C08     	ADDI	D,8
13/97:          	
13/96:          	; FOUND THE SYMBOL, SAVE POINTER
13/96: 3000     9:	LOADI	A,0
13/97: A080     	STORE	[DBANK],A
13/98: AC52     	STORE	[DFPNTR],D
13/99: 8C10     	LOAD	D,[SPARK]
13/9A: FF68     	JUMP	IRET
13/9C:          
13/9B:          	; SYMBOL DOES NOT MATCH
13/9B: 6E00     3:	SUB	D,C
13/9C: 9300     	LOADF	A,[D]
13/9D: 5000     	ADDI	A,0
13/9E: F626     	BRZ	0F
13/A0:          	
13/9F:          	; EXIT SYMBOL ENTRY
13/9F: 5C16     	ADDI	D,ST_SIZE*2
13/A0: F404     	BRN	4F
13/A1: 7C0B     	SUBI	D,ST_SIZE
13/A2: 3000     	LOADI	A,0
13/A3: A080     	STORE	[DBANK],A
13/A4: FFDF     	JUMP	1B
13/A6:          
13/A5:          	; NEXT BANK
13/A5: 8000     4:	LOAD	A,[ST_NEXT]
13/A6: 5000     	ADDI	A,0
13/A7: 3800     	LOADI	C,0
13/A8: A880     	STORE	[DBANK],C
13/A9: F603     	BRZ	5F
13/AA: A051     	STORE	[DFBANK],A
13/AB: 3C01     	LOADI	D,ST_NAME
13/AC: FFD7     	JUMP	1B
13/AE:          	
13/AD:          	; ALLOCATE A NEW BANK
13/AD: 844E     5:	LOAD	B,[NFREE]
13/AE: 8071     	LOAD	A,[MAX_DB]
13/AF: D400     	CMP	B,A
13/B0: F904     	BRBE	6F
13/B2:          	
13/B1:          	; ERROR! OUT OF MEMORY
13/B1: 308A     	LOADI	A,E_OMEM
13/B2: 3401     	LOADI	B,CORE0_B
13/B3: 38D7     	LOADI	C,ERROR
13/B4: FF4D     	JUMP	INDIR
13/B6:          	
13/B5:          	; SETUP NEW BANK 
13/B5: 5401     6:	ADDI	B,1
13/B6: A44E     	STORE	[NFREE],B
13/B7: 7401     	SUBI	B,1
13/B8: 8051     	LOAD	A,[DFBANK]
13/B9: A080     	STORE	[DBANK],A
13/BA: A400     	STORE	[ST_NEXT],B
13/BB: A480     	STORE	[DBANK],B
13/BD:          	
13/BC: 3000     	LOADI	A,0
13/BD: 3801     	LOADI	C,ST_NAME
13/BE: A000     	STORE	[ST_NEXT],A
13/BF: B200     7:	STOREF	[C+(ST_NAME-ST_NAME)],A
13/C0: B208     	STOREF	[C+(ST_DEF-ST_NAME)],A
13/C1: 580B     	ADDI	C,ST_SIZE
13/C2: F5FC     	BRNN	7B
13/C4:          	
13/C3: A080     	STORE	[DBANK],A
13/C4: FFBD     	JUMP	0B
13/C6:          	
13/C5:          	; EMPTY SLOT, PUT THE SYMBOL HERE
13/C5: 3808     0:	LOADI	C,8
13/C6: 5C08     	ADDI	D,8
13/C7: 3400     1:	LOADI	B,0
13/C8: A480     	STORE	[DBANK],B
13/C9: 7C01     	SUBI	D,1
13/CA: 7801     	SUBI	C,1
13/CB: F105     	BRNC	2F
13/CC: 9239     	LOADF	A,[C+TBUF]
13/CD: 8451     	LOAD	B,[DFBANK]
13/CE: A480     	STORE	[DBANK],B
13/CF: B300     	STOREF	[D],A
13/D0: FFF6     	JUMP	1B
13/D2:          
13/D1:          	; GO PLACE THE POINTER
13/D1: 5C09     2:	ADDI	D,9
13/D2: FFC3     	JUMP	9B
13/D4:          	
13/D3:          BI	= BI+1
13/D3:          .TEXT
13/D3:          .BANK	BI
14/80:          SYM2_B	= BI
14/80:          
14/80:          	; SHADOW OF ADDLOC
14/80:          	; FIND THE END OF THE TABLE
14/80: 340C     ADDLOCA:LOADI	B,LTAB_B
14/81: 2900     0:	MOV	C,B
14/82: A880     	STORE	[DBANK],C
14/83: 8400     	LOAD	B,[LT_NEXT]
14/84: 5400     	ADDI	B,0
14/85: F7FB     	BRNZ	0B
14/87:          	
14/86:          	; IS THERE SPACE TO STORE A NEW LOCAL HERE?
14/86: 8401     	LOAD	B,[LT_FREE]
14/87: 5401     	ADDI	B,LT_SIZE-1
14/88: F51E     	BRNN	3F
14/8A:          	
14/89:          	; ALLOCATE A NEW BANK
14/89: 3400     	LOADI	B,0
14/8A: A480     	STORE	[DBANK],B
14/8B: AC10     	STORE	[SPARK],D
14/8C: 844E     	LOAD	B,[NFREE]
14/8D: 8C71     	LOAD	D,[MAX_DB]
14/8E: D700     	CMP	B,D
14/8F: 8C10     	LOAD	D,[SPARK]
14/90: F904     	BRBE	1F
14/92:          	
14/91:          	; ERROR! OUT OF MEMORY
14/91: 308A     	LOADI	A,E_OMEM
14/92: 3401     	LOADI	B,CORE0_B
14/93: 38D7     	LOADI	C,ERROR
14/94: FF6D     	JUMP	INDIR
14/96:          	
14/95:          	; LINK AND SETUP
14/95: 5401     1:	ADDI	B,1
14/96: A44E     	STORE	[NFREE],B
14/97: A880     	STORE	[DBANK],C
14/98: A400     	STORE	[LT_NEXT],B
14/99: 2900     	MOV	C,B
14/9A: A880     	STORE	[DBANK],C
14/9B: 3C02     	LOADI	D,LT_NAME
14/9C: AC01     	STORE	[LT_FREE],D
14/9D: 3400     	LOADI	B,0
14/9E: A400     	STORE	[LT_NEXT],B
14/A0:          
14/9F:          	; ZERO OUT ALL NAMES
14/9F: B700     2:	STOREF	[D],B
14/A0: 5C02     	ADDI	D,LT_SIZE
14/A1: F5FD     	BRNN	2B
14/A2: 3400     	LOADI	B,0
14/A3: A480     	STORE	[DBANK],B
14/A4: 8C10     	LOAD	D,[SPARK]
14/A5: A880     	STORE	[DBANK],C
14/A6: 3403     	LOADI	B,LT_NAME+(LT_SIZE-1)
14/A8:          
14/A7:          	; THERE IS SPACE, LETS USE IT
14/A7: 7401     3:	SUBI	B,LT_SIZE-1
14/A8: B100     	STOREF	[B],A
14/A9: 3000     	LOADI	A,0
14/AA: A080     	STORE	[DBANK],A
14/AB: 8048     	LOAD	A,[COUNTER]
14/AC: A880     	STORE	[DBANK],C
14/AD: B101     	STOREF	[B+1],A
14/AE: 5402     	ADDI	B,LT_SIZE
14/AF: A401     	STORE	[LT_FREE],B
14/B0: 3000     	LOADI	A,0
14/B1: A080     	STORE	[DBANK],A
14/B2: FF50     	JUMP	IRET
14/B4:          
14/B3:          	; START OF SYMBOL TABLE
14/B3:          .BANK	BD
0B/E5:          .DATA
0B/00:          STAB_B	= BD
0B/00:          
0B/00:          	; SYMBOL TABLE DEFINITION
0B/00:          	; 0X00     : NEXT BANK
0B/00:          	; 0X01-0X08: SYMBOL 0 NAME
0B/00:          	; 0X09     : SYMBOL 0 DEFINED
0B/00:          	; 0X0A-0X0B: SYMBOL 0 VALUE
0B/00:          	; 0X0C-0X14: SYMBOL 1 NAME
0B/00:          	; 0X15     : SYMBOL 1 DEFINED
0B/00:          	; 0X16-0X17: SYMBOL 1 VALUE
0B/00:          	
0B/00:          	; IF A SYMBOL NAME STARTS WITH 0X00, IT IS UNALLOCATED
0B/00:          
0B/00: 00       .DEFL BYTE ST_NEXT	0
0B/01: 00000000
       00000000 .DEFL BYTE ST_NAME	0,0,0,0,0,0,0,0
0B/09: 00       .DEFL BYTE ST_DEF	0
0B/0A: 0000     .DEFL BYTE ST_VAL	0,0
0B/0C:          ST_SIZE	= @-ST_NAME
0B/0C:          
0B/0C:          BD	= BD+1
0B/0C:          
0B/0C:          	; START OF LOCAL TABLE
0B/0C:          .BANK	BD
0C/00:          .DATA
0C/00:          LTAB_B	= BD
0C/00:          
0C/00:          	; LOCAL TABLE DEFINITION
0C/00:          	; 0X00: NEXT BANK
0C/00:          	; 0X01: NEXT FREE SYMBOL
0C/00:          	; 0X02: SYMBOL 0 NAME
0C/00:          	; 0X03: SYMBOL 0 VALUE
0C/00:          	; 0X04: SYMBOL 1 NAME
0C/00:          	; 0X05: SYMBOL 1 VALUE
0C/00:          	
0C/00: 00       .DEFL BYTE LT_NEXT	0
0C/01: 02       .DEFL BYTE LT_FREE	2
0C/02: 00       .DEFL BYTE LT_NAME	0
0C/03: 00       .DEFL BYTE LT_VAL	0
0C/04:          LT_SIZE = @-LT_NAME
0C/04:          LT_CNT	= (128-LT_NAME)/LT_SIZE
0C/04:          	
0C/04:          BD	= BD+1
0C/04:          ; AS5.S
0C/04:          ; ASSEMBLY OUTPUT GENERATOR
0C/04:          ; GAVIN TERSTEEG, 2024
0C/04:          ; SDMAY24-14
0C/04:          
0C/04:          BI	= BI+1
0C/04:          .TEXT
0C/FE:          .BANK	BI
15/80:          EMIT0_B	= BI
15/80:          
15/80:          	; INITALIZE THE EMISSION SECTION
15/80:          	; CREATE THE OUTPUT FILE, AND RESET ALL BANK STATE INFORMATION
15/80: 3000     EMINIT:	LOADI	A,0
15/81: A04C     	STORE	[FNEXT],A
15/83:          	
15/82:          	; CLEAR ALLOCATION TABLE
15/82: 3400     	LOADI	B,0
15/83: 300F     	LOADI	A,ALLOC_B
15/84: 3886     	LOADI	C,@+2
15/85: FF31     	JUMP	9F
15/86: 3010     	LOADI	A,ALLOC_B+1
15/87: 3889     	LOADI	C,@+2
15/88: FF2E     	JUMP	9F
15/8A:          	
15/89:          	; CREATE 'AOUT' FILE
15/89: 7C02     	SUBI	D,2
15/8A: 3406     	LOADI	B,STR_B
15/8B: A46C     	STORE	[ARG_BNK],B
15/8C: 3000     	LOADI	A,AOUT
15/8D: 3815     	LOADI	C,BI
15/8E: BB01     	STOREF	[D+1],C
15/8F: 340D     	LOADI	B,S_CREAT
15/90: 3892     	LOADI	C,@+2
15/91: FF72     	JUMP	SYSCALL
15/92: 5000     	ADDI	A,0
15/93: F606     	BRZ	1F
15/95:          	
15/94:          	; ERROR!
15/94: 3008     	LOADI	A,AOUTERR
15/95: 3404     	LOADI	B,S_PUTS
15/96: 3898     	LOADI	C,@+2
15/97: FF6C     	JUMP	SYSCALL
15/98: 3400     	LOADI	B,S_EXIT
15/99: FF6A     	JUMP	SYSCALL
15/9B:          	
15/9A:          	; RESET DIRTY
15/9A: 3000     1:	LOADI	A,0
15/9B: A04B     	STORE	[DIRTY],A
15/9D:          
15/9C: 5C02     	ADDI	D,2
15/9D: FF65     	JUMP	IRET
15/9F:          
15/9E:          	; RESET COUNTERS FOR THE NEXT PASS
15/9E:          	; ALSO OPENS UP BANK 1
15/9E: 3400     EMPASS:	LOADI	B,0
15/9F: 3011     	LOADI	A,DCNT_B
15/A0: 38A2     	LOADI	C,@+2
15/A1: FF15     	JUMP	9F
15/A2: 3012     	LOADI	A,DCNT_B+1
15/A3: 38A5     	LOADI	C,@+2
15/A4: FF12     	JUMP	9F
15/A6:          
15/A5:          	; DO WE START IN THE LOWER SECTION?
15/A5: 800F     	LOAD	A,[LFLAG]
15/A6: 5000     	ADDI	A,0
15/A7: F701     	BRNZ	1F
15/A8: 3480     	LOADI	B,0X80
15/AA:          	
15/A9:          	; RESET CODE MEMORY COUNTERS
15/A9: 3013     1:	LOADI	A,CCNT_B
15/AA: 38AC     	LOADI	C,@+2
15/AB: FF0B     	JUMP	9F
15/AC: 3014     	LOADI	A,CCNT_B+1
15/AD: 38AF     	LOADI	C,@+2
15/AE: FF08     	JUMP	9F
15/B0:          	
15/AF:          	; ALSO SET THE COUNTER
15/AF: A448     	STORE	[COUNTER],B
15/B1:          	
15/B0:          	; SET DEFAULT SEGMENT TO TEXT
15/B0: 3000     	LOADI	A,0
15/B1: A049     	STORE	[SEGMENT],A
15/B3:          	
15/B2:          	; FALL THROUGH TO SETBANK
15/B2: 3001     	LOADI	A,1
15/B3: A04A     	STORE	[SELBANK],A
15/B5:          	
15/B4:          	; UPDATES CURBANK TO BE EQUAL TO SELBANK
15/B4:          	; [SELBANK] = BANK TO EMIT INTO
15/B4: 3416     SETBANK:LOADI	B,EMIT1_B
15/B5: 3880     	LOADI	C,SETBANA
15/B6: FF4B     	JUMP	INDIR
15/B8:          
15/B7:          	; SERVICE FUNCTION TO FILL A BANK
15/B7:          	; A = BANK TO CLEAR
15/B7:          	; B = FILL BYTE
15/B7:          	; C = RETURN ADDRESS
15/B7: A080     9:	STORE	[DBANK],A
15/B8: 3000     	LOADI	A,0
15/B9: B400     0:	STOREF	[A],B
15/BA: 5001     	ADDI	A,1
15/BB: F5FD     	BRNN	0B
15/BC: 3000     	LOADI	A,0
15/BD: A080     	STORE	[DBANK],A
15/BE: FE41     	JUMPR	C
15/C0:          	
15/BF:          	; EMITS A BYTE OR WORD INTO THE OUTPUT BINARY
15/BF:          	; [VALUE] = VALUE TO EMIT
15/BF:          	; [COUNTER] = LOCATION IN OUTPUT BINARY TO EMIT
15/BF:          	; [SEGMENT] = SEGMENT TO EMIT INTO
15/BF: 3418     EMIT:	LOADI	B,EMIT3_B
15/C0: 3880     	LOADI	C,EMITA
15/C1: FF40     	JUMP	INDIR
15/C3:          	
15/C2:          	; SETS THE CURRENT SEGMENT
15/C2:          	; A = SEGMENT TO SET
15/C2:          	; [TEMP] = PREVIOUS BANK
15/C2: 3419     SETSEG:	LOADI	B,EMIT4_B
15/C3: 3880     	LOADI	C,SETSEGA
15/C4: FF3D     	JUMP	INDIR
15/C6:          	
15/C5:          BI	= BI+1
15/C5:          .TEXT
15/C5:          .BANK	BI
16/80:          EMIT1_B	= BI
16/80:          
16/80:          	; SHADOW OF SETBANK
16/80: 7C02     SETBANA:SUBI	D,2
16/82:          
16/81:          	; ITS POSSIBLE WE MAY BE WRITING TO THE OUTPUT FILE, LETS OPEN IT
16/81: 3406     	LOADI	B,STR_B
16/82: A46C     	STORE	[ARG_BNK],B
16/83: 3000     	LOADI	A,AOUT
16/84: 3816     	LOADI	C,BI
16/85: BB01     	STOREF	[D+1],C
16/86: 3406     	LOADI	B,S_OPEN
16/87: 3889     	LOADI	C,@+2
16/88: FF7B     	JUMP	SYSCALL
16/89: 5000     	ADDI	A,0
16/8A: 3080     	LOADI	A,E_COPEN
16/8B: 3401     	LOADI	B,CORE0_B
16/8C: 38D7     	LOADI	C,ERROR
16/8D: F774     	BRNZ	INDIR
16/8F:          	
16/8E:          	; FIRST THING'S FIRST, DO WE NEED TO SAVE THE CURRENT BANK
16/8E: 804B     	LOAD	A,[DIRTY]
16/8F: 5000     	ADDI	A,0
16/90: 3417     	LOADI	B,EMIT2_B
16/91: 3880     	LOADI	C,SETBANB
16/92: F66F     	BRZ	INDIR
16/94:          	
16/93:          	; THIS BANK IS DIRTY, LETS WRITE IT TO DISK
16/93:          	; HAS IT BEEN ALLOCATED YET?
16/93: 804D     	LOAD	A,[CURBANK]
16/94: 340F     	LOADI	B,ALLOC_B
16/95: 4000     	SHIFTL	A
16/96: F101     	BRNC	3F
16/97: 5401     	ADDI	B,1
16/98: C100     3:	SHIFTR	A
16/99: A480     	STORE	[DBANK],B
16/9A: 9800     	LOADF	C,[A]
16/9B: 5800     	ADDI	C,0
16/9C: F606     	BRZ	4F
16/9E:          	
16/9D:          	; BANK IS ALLOCATED, GET THE BLOCK #
16/9D: 7402     	SUBI	B,ALLOC_B-BTAB_B
16/9E: A480     	STORE	[DBANK],B
16/9F: 9800     	LOADF	C,[A]
16/A0: 3000     	LOADI	A,0
16/A1: A080     	STORE	[DBANK],A
16/A2: FF0D     	JUMP	5F
16/A4:          
16/A3:          	; BANK IS NOT ALLOCATED, DO SO
16/A3: 38FF     4:	LOADI	C,0XFF
16/A4: B800     	STOREF	[A],C
16/A5: 3800     	LOADI	C,0
16/A6: A880     	STORE	[DBANK],C
16/A8:          	
16/A7:          	; GET NEXT FREE BLOCK
16/A7: 884C     	LOAD	C,[FNEXT]
16/A8: 5801     	ADDI	C,1
16/A9: A84C     	STORE	[FNEXT],C
16/AA: 7801     	SUBI	C,1
16/AC:          	
16/AB:          	; PUT IN BLOCK TABLE
16/AB: 7402     	SUBI	B,ALLOC_B-BTAB_B
16/AC: A480     	STORE	[DBANK],B
16/AD: B800     	STOREF	[A],C
16/AE: 3000     	LOADI	A,0
16/AF: A080     	STORE	[DBANK],A
16/B1:          	
16/B0:          	; WRITE THE BLOCK
16/B0: 2200     5:	MOV	A,C
16/B1: 3415     	LOADI	B,WORK_B
16/B2: A46C     	STORE	[ARG_BNK],B
16/B3: 3409     	LOADI	B,S_WRITE
16/B4: 38B6     	LOADI	C,@+2
16/B5: FF4E     	JUMP	SYSCALL
16/B6: 5000     	ADDI	A,0
16/B7: 308C     	LOADI	A,E_FIO
16/B8: 3401     	LOADI	B,CORE0_B
16/B9: 38D7     	LOADI	C,ERROR
16/BA: F747     	BRNZ	INDIR
16/BC:          	
16/BB:          	; NOW WE CAN READ THE NEXT BANK IN
16/BB: 3417     	LOADI	B,EMIT2_B
16/BC: 3880     	LOADI	C,SETBANB
16/BD: FF44     	JUMP	INDIR
16/BF:          	
16/BE:          BI	= BI+1
16/BE:          .TEXT
16/BE:          .BANK	BI
17/80:          EMIT2_B	= BI
17/80:          
17/80:          	; CONTINUATION OF SETBANK
17/80:          	; LETS NOW READ THE NEXT BANK IN  (IF IT EXISTS)
17/80: 3817     SETBANB:LOADI	C,BI
17/81: BB01     	STOREF	[D+1],C
17/83:          	
17/82:          	; HAS IT BEEN ALLOCATED YET?
17/82: 804A     	LOAD	A,[SELBANK]
17/83: 340F     	LOADI	B,ALLOC_B
17/84: 4000     	SHIFTL	A
17/85: F101     	BRNC	0F
17/86: 5401     	ADDI	B,1
17/87: C100     0:	SHIFTR	A
17/88: A480     	STORE	[DBANK],B
17/89: 9800     	LOADF	C,[A]
17/8A: 5800     	ADDI	C,0
17/8B: F611     	BRZ	1F
17/8D:          	
17/8C:          	; YEP, WE CAN JUST READ IT IN
17/8C: 7402     	SUBI	B,ALLOC_B-BTAB_B
17/8D: A480     	STORE	[DBANK],B
17/8E: 9800     	LOADF	C,[A]
17/8F: 3000     	LOADI	A,0
17/90: A080     	STORE	[DBANK],A
17/92:          	
17/91:          	; DO FILE READ OPERATION
17/91: 2200     	MOV	A,C
17/92: 3415     	LOADI	B,WORK_B
17/93: A46C     	STORE	[ARG_BNK],B
17/94: 3408     	LOADI	B,S_READ
17/95: 3897     	LOADI	C,@+2
17/96: FF6D     	JUMP	SYSCALL
17/97: 5000     	ADDI	A,0
17/98: 308C     	LOADI	A,E_FIO
17/99: 3401     	LOADI	B,CORE0_B
17/9A: 38D7     	LOADI	C,ERROR
17/9B: F766     	BRNZ	INDIR
17/9C: FF19     	JUMP	8F
17/9E:          
17/9D:          	; UH OH, THIS IS A NEW BANK
17/9D:          	; LETS INIT WORK_B
17/9D: 3400     1:	LOADI	B,0
17/9E: A480     	STORE	[DBANK],B
17/9F: 804A     	LOAD	A,[SELBANK]
17/A0: 3415     	LOADI	B,WORK_B
17/A1: A480     	STORE	[DBANK],B
17/A2: A002     	STORE	[2],A
17/A3: 3002     	LOADI	A,0X02
17/A4: A000     	STORE	[0],A
17/A5: 3081     	LOADI	A,0X81
17/A6: A001     	STORE	[1],A
17/A7: 3003     	LOADI	A,0X03
17/A8: 34FF     	LOADI	B,0XFF
17/A9: B400     2:	STOREF	[A],B
17/AA: 5001     	ADDI	A,1
17/AB: F5FD     	BRNN	2B
17/AD:          	
17/AC:          	; CLEAR READ OF WORK_B
17/AC: 3400     	LOADI	B,0
17/AD: 3016     	LOADI	A,WORK_B+1
17/AE: 38B0     	LOADI	C,@+2
17/AF: FF1B     	JUMP	9F
17/B0: 3017     	LOADI	A,WORK_B+2
17/B1: 38B3     	LOADI	C,@+2
17/B2: FF18     	JUMP	9F
17/B3: 3018     	LOADI	A,WORK_B+3
17/B4: 38B6     	LOADI	C,@+2
17/B5: FF15     	JUMP	9F
17/B7:          	
17/B6:          	; ALL DONE, LETS RE-OPEN THE INPUT FILE
17/B6:          	; MAYBE?
17/B6: 8030     8:	LOAD	A,[SRCINDX]
17/B7: 8400     	LOAD	B,[ARGC]
17/B8: D100     	CMP	A,B
17/B9: F00B     	BRAE	8F
17/BA: 8472     	LOAD	B,[CMDL_B]
17/BB: A46C     	STORE	[ARG_BNK],B
17/BC: 9001     	LOADF	A,[A+ARGV]	
17/BD: 3406     	LOADI	B,S_OPEN
17/BE: 38C0     	LOADI	C,@+2
17/BF: FF44     	JUMP	SYSCALL
17/C0: 5000     	ADDI	A,0
17/C1: 3080     	LOADI	A,E_COPEN
17/C2: 3401     	LOADI	B,CORE0_B
17/C3: 38D7     	LOADI	C,ERROR
17/C4: F73D     	BRNZ	INDIR
17/C6:          	
17/C5:          	; SET CURBANK TO SELBANK
17/C5: 804A     8:	LOAD	A,[SELBANK]
17/C6: A04D     	STORE	[CURBANK],A
17/C8:          	
17/C7:          	; RESET DIRTY
17/C7: 3000     	LOADI	A,0
17/C8: A04B     	STORE	[DIRTY],A
17/CA:          
17/C9: 5C02     	ADDI	D,2
17/CA: FF38     	JUMP	IRET
17/CC:          	
17/CB:          	; SERVICE FUNCTION TO FILL A BANK
17/CB:          	; A = BANK TO CLEAR
17/CB:          	; B = FILL BYTE
17/CB:          	; C = RETURN ADDRESS
17/CB: A080     9:	STORE	[DBANK],A
17/CC: 3000     	LOADI	A,0
17/CD: B400     0:	STOREF	[A],B
17/CE: 5001     	ADDI	A,1
17/CF: F5FD     	BRNN	0B
17/D0: 3000     	LOADI	A,0
17/D1: A080     	STORE	[DBANK],A
17/D2: FE2D     	JUMPR	C
17/D4:          
17/D3:          BI	= BI+1
17/D3:          .TEXT
17/D3:          .BANK	BI
18/80:          EMIT3_B	= BI
18/80:          
18/80:          	; SHADOW OF EMIT
18/80: 7C02     EMITA:	SUBI	D,2
18/82:          
18/81:          	; DON'T DO ANYTHING IF WE ARE ON THE FIRST PASS
18/81: 8044     	LOAD	A,[PASS]
18/82: 5000     	ADDI	A,0
18/83: F640     	BRZ	9F
18/85:          
18/84:          	; DOES SELBANK MATCH CURBANK?
18/84:          	; IF NOT, LETS FIX THAT
18/84: 804D     	LOAD	A,[CURBANK]
18/85: 844A     	LOAD	B,[SELBANK]
18/86: D100     	CMP	A,B
18/87: F607     	BRZ	0F
18/88: 3818     	LOADI	C,BI
18/89: BB01     	STOREF	[D+1],C
18/8A: 388F     	LOADI	C,@+5
18/8B: BB00     	STOREF	[D],C
18/8C: 3415     	LOADI	B,EMIT0_B
18/8D: 38B4     	LOADI	C,SETBANK
18/8E: FF73     	JUMP	INDIR
18/90:          	
18/8F:          	; WHAT SEGMENT ARE WE IN?
18/8F: 8049     0:	LOAD	A,[SEGMENT]
18/90: 5000     	ADDI	A,0
18/91: F71A     	BRNZ	5F
18/93:          	
18/92:          	; TEXT SEGMENT!
18/92:          	; LETS MAKE SURE THE COUNTER ISN'T OUT OF BOUNDS
18/92: 8048     	LOAD	A,[COUNTER]
18/93: 840F     	LOAD	B,[LFLAG]
18/94: 5400     	ADDI	B,0
18/95: F701     	BRNZ	1F
18/97:          	
18/96:          	; CORRECT ADDRESS
18/96: 7080     	SUBI	A,0X80
18/98:          
18/97:          	; MAKE SURE IT ISN'T NEGATIVE
18/97: 5000     1:	ADDI	A,0
18/98: F504     	BRP	3F
18/99: 308D     2:	LOADI	A,E_TFULL
18/9A: 3401     	LOADI	B,CORE0_B
18/9B: 38D7     	LOADI	C,ERROR
18/9C: FF65     	JUMP	INDIR
18/9E:          
18/9D:          	; PLACE [VALUE] INTO BUFFER
18/9D: 3417     3:	LOADI	B,WORK_B+2
18/9E: 4000     	SHIFTL	A
18/9F: F101     	BRNC	4F
18/A0: 5401     	ADDI	B,1
18/A1: 8812     4:	LOAD	C,[VALUE]
18/A2: A480     	STORE	[DBANK],B
18/A3: B800     	STOREF	[A],C
18/A4: 3800     	LOADI	C,0
18/A5: A880     	STORE	[DBANK],C
18/A6: 8813     	LOAD	C,[VALUE+1]
18/A7: A480     	STORE	[DBANK],B
18/A8: B801     	STOREF	[A+1],C
18/A9: 3800     	LOADI	C,0
18/AA: A880     	STORE	[DBANK],C
18/AB: FF16     	JUMP	8F
18/AD:          
18/AC:          	; DATA SEGMENT! (OR BSS)
18/AC:          	; LETS MAKE SURE THE COUNTER ISN'T OUT OF BOUNDS
18/AC: 8048     5:	LOAD	A,[COUNTER]
18/AD: 5000     	ADDI	A,0
18/AE: F504     	BRP	6F
18/B0:          	
18/AF:          	; ERROR!
18/AF: 308E     	LOADI	A,E_DFULL
18/B0: 3401     	LOADI	B,CORE0_B
18/B1: 38D7     	LOADI	C,ERROR
18/B2: FF4F     	JUMP	INDIR
18/B4:          	
18/B3:          	; ARE WE IN BSS SPACE?
18/B3: 8449     6:	LOAD	B,[SEGMENT]
18/B4: 8813     	LOAD	C,[VALUE+1]
18/B5: 7401     	SUBI	B,1
18/B6: F606     	BRZ	7F
18/B8:          	
18/B7:          	; BSS SEGMENT!
18/B7: 5800     	ADDI	C,0
18/B8: F60B     	BRZ	9F
18/B9: 308F     	LOADI	A,E_BSS
18/BA: 3401     	LOADI	B,CORE0_B
18/BB: 38D7     	LOADI	C,ERROR
18/BC: FF45     	JUMP	INDIR
18/BE:          
18/BD:          	; DATA SEGMENT!
18/BD: 3416     7:	LOADI	B,WORK_B+1
18/BE: A480     	STORE	[DBANK],B
18/BF: B800     	STOREF	[A],C
18/C0: 3800     	LOADI	C,0
18/C1: A880     	STORE	[DBANK],C
18/C3:          	
18/C2:          	; SET DIRTY
18/C2: 30FF     8:	LOADI	A,0XFF
18/C3: A04B     	STORE	[DIRTY],A
18/C5:          
18/C4:          	; INCREMENT COUNTER
18/C4: 8048     9:	LOAD	A,[COUNTER]
18/C5: 5001     	ADDI	A,1
18/C6: A048     	STORE	[COUNTER],A
18/C8:          
18/C7:          	; DONE
18/C7: 5C02     	ADDI	D,2
18/C8: FF3A     	JUMP	IRET
18/CA:          	
18/C9:          BI	= BI+1
18/C9:          .TEXT
18/C9:          .BANK	BI
19/80:          EMIT4_B	= BI
19/80:          
19/80:          	; SHADOW OF SETSEG
19/80: 8449     SETSEGA:LOAD	B,[SEGMENT]
19/81: A049     	STORE	[SEGMENT],A
19/83:          	
19/82:          	; WAS THE OLD SEGMENT TEXT OR DATA (BSS)
19/82: 5400     	ADDI	B,0
19/83: F602     	BRZ	0F
19/84: 3411     	LOADI	B,DCNT_B
19/85: FF01     	JUMP	1F
19/86: 3413     0:	LOADI	B,CCNT_B
19/88:          
19/87:          	; WHAT BANK DO WE PUT IT IN?
19/87: 8016     1:	LOAD	A,[TEMP]
19/88: 4000     	SHIFTL	A
19/89: F101     	BRNC	2F
19/8A: 5401     	ADDI	B,1
19/8B: C100     2:	SHIFTR	A
19/8C: 8848     	LOAD	C,[COUNTER]
19/8D: A480     	STORE	[DBANK],B
19/8E: B800     	STOREF	[A],C
19/8F: 3000     	LOADI	A,0
19/90: A080     	STORE	[DBANK],A
19/92:          	
19/91:          	; IS THE NEW SEGMENT TEXT OR DATA (BSS)
19/91: 8449     	LOAD	B,[SEGMENT]
19/92: 5400     	ADDI	B,0
19/93: F602     	BRZ	0F
19/94: 3411     	LOADI	B,DCNT_B
19/95: FF01     	JUMP	1F
19/96: 3413     0:	LOADI	B,CCNT_B
19/98:          
19/97:          	; WHAT BANK DO WE GET IT FROM?
19/97: 804A     1:	LOAD	A,[SELBANK]
19/98: 4000     	SHIFTL	A
19/99: F101     	BRNC	2F
19/9A: 5401     	ADDI	B,1
19/9B: C100     2:	SHIFTR	A
19/9C: A480     	STORE	[DBANK],B
19/9D: 9800     	LOADF	C,[A]
19/9E: 3000     	LOADI	A,0
19/9F: A080     	STORE	[DBANK],A
19/A0: A848     	STORE	[COUNTER],C
19/A2:          	
19/A1:          	; DONE
19/A1: FF61     	JUMP	IRET
19/A3:          
19/A2:          	; BLOCK ADDRESS TABLE
19/A2:          	; TURNS A LOGIC SAV BLOCK INTO A PHYSICAL FILE BLOCK
19/A2:          .BANK	BD
0D/ED:          .BSS
0D/00:          BTAB_B	= BD
0D/00:          
0D/00:          
0D/00:          BD	= BD+2
0D/00:          
0D/00:          	; BLOCK ALLOCATION TABLE
0D/00:          	; MARKS IF A LOGICAL SAV BLOCK HAS BEEN ALLOCATED YET
0D/00:          .BANK	BD
0F/00:          .BSS
0F/00:          ALLOC_B	= BD
0F/00:          
0F/00:          
0F/00:          BD	= BD+2
0F/00:          
0F/00:          	; DATA BANK COUNTERS
0F/00:          	; STORES DATA COUNTERS FOR EACH BANK
0F/00:          .BANK	BD
11/00:          .BSS
11/00:          DCNT_B	= BD
11/00:          
11/00:          
11/00:          BD	= BD+2
11/00:          
11/00:          	; CODE BANK COUNTERS
11/00:          	; STORES CODE COUNTERS FOR EACH BANK
11/00:          .BANK	BD
13/00:          .BSS
13/00:          CCNT_B	= BD
13/00:          
13/00:          
13/00:          BD	= BD+2
13/00:          
13/00:          	; WORK BANK FOR STORAGE .SAV RECORDS
13/00:          	; WORK_B + 0 = RECORD HEADER
13/00:          	; WORK_B + 1 = DATA SEGMENT
13/00:          	; WORK_B + 2 = ISR SEGMENT 128-191
13/00:          	; WORK_B + 3 = ISR SEGMENT 192-255
13/00:          .BANK	BD
15/00:          .BSS
15/00:          WORK_B	= BD
15/00:          
15/00:          
15/00:          BD	= BD+4
