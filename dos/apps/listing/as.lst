00/00:          ; DOSDEF.S
01/80:          ; THIS FILE CONTAINS IMPORTANT DEFINES USED IN DOS/281
01/80:          
01/80:          ; BIOS CALLS
01/80:          BOOT	= 0
01/80:          ALTBOOT = 1
01/80:          INDIR	= 2
01/80:          IRET	= 3
01/80:          SYSCALL	= 4
01/80:          SYSJUMP	= 5
01/80:          PRGM	= 6
01/80:          IWRITE	= 7
01/80:          ZSTART	= 8
01/80:          
01/80:          HALT	= 0X7F
01/80:          
01/80:          ; SYSTEM CALLS
01/80:          S_EXIT	= 0
01/80:          S_PUTC	= 1
01/80:          S_GETC	= 2
01/80:          S_STAT	= 3
01/80:          S_PUTS	= 4
01/80:          S_INPUT	= 5
01/80:          S_OPEN	= 6
01/80:          S_CLOSE	= 7
01/80:          S_READ	= 8
01/80:          S_WRITE	= 9
01/80:          S_FSRCH	= 10
01/80:          S_NEXT	= 11
01/80:          S_DELET	= 12
01/80:          S_CREAT	= 13
01/80:          S_FREE	= 14
01/80:          S_EXEC	= 15
01/80:          
01/80:          ; MEMORY AREAS
01/80:          CF_NAME	= 0X60
01/80:          CF_SIZE	= 0X68
01/80:          CF_USR	= 0X6A
01/80:          DFT_USR	= 0X6B
01/80:          ARG_BNK	= 0X6C
01/80:          BD_FREE	= 0X6E
01/80:          MAX_IB	= 0X70
01/80:          MAX_DB	= 0X71
01/80:          CMDL_B	= 0X72
01/80:          AUTO_B	= 0X73
01/80:          KERNMEM	= 0X78
01/80:          BIOSMEM	= 0X7C
01/80:          
01/80:          ; DATA BANK ADDRESS
01/80:          DBANK	= 0X80		
01/80:          
01/80:          
01/80:          ; AS0.S
01/80:          ; ASSEMBLER CORE
01/80:          ; GAVIN TERSTEEG, 2024
01/80:          ; SDMAY24-14
01/80:          
01/80:          ; BANK ALLOCATION STUFF
01/80:          BI	= 1
01/80:          BD	= 1
01/80:          
01/80:          ; MAXIMUM ARGUMENTS
01/80:          MAXARGS	= 15
01/80:          
01/80:          .TEXT
01/80:          .BANK	BI
01/80:          CORE0_B	= BI
01/80:          
01/80:          	; START BY PROCESSING THE ARGUMENTS
01/80: 3000     START:	LOADI	A,0
01/81: A080     	STORE	[DBANK],A
01/83:          	
01/82:          	; RESET ARG STATE
01/82: A000     	STORE	[ARGC],A
01/83: A011     	STORE	[LFLAG],A
01/85:          	
01/84:          	; SET UP STACK
01/84: 3C5E     	LOADI	D,0X60-2
01/86:          	
01/85:          	; SYSCALL RETURN BANK
01/85: 3801     	LOADI	C,1	
01/86: BB01     	STOREF	[D+1],C
01/88:          	
01/87:          	; SET UP POINTER
01/87: 3800     	LOADI	C,0
01/89:          	
01/88:          	; GO TO ARGUMENT BANK
01/88: 8072     0:	LOAD	A,[CMDL_B]
01/89: A06C     	STORE	[ARG_BNK],A
01/8A: A080     	STORE	[DBANK],A
01/8C:          
01/8B:          	; SKIP THE CURRENT ARGUMENT
01/8B: 9200     1:	LOADF	A,[C]
01/8C: 3420     	LOADI	B,0X20
01/8D: D100     	CMP	A,B
01/8E: F902     	BRBE	2F
01/8F: 5801     	ADDI	C,1
01/90: FFFA     	JUMP	1B
01/92:          
01/91:          	; LOOK FOR AN ARGUMENT
01/91: 9200     2:	LOADF	A,[C]
01/92: 5000     	ADDI	A,0
01/93: F62E     	BRZ	ARGDONE
01/94: D100     	CMP	A,B
01/95: F802     	BRA	3F
01/96: 5801     	ADDI	C,1
01/97: FFF9     	JUMP	2B
01/99:          
01/98:          	; IS IT A FLAG?
01/98: 342D     3:	LOADI	B,'-'
01/99: D100     	CMP	A,B
01/9A: F714     	BRNZ	5F
01/9C:          	
01/9B:          	; HANDLE FLAGS HERE	
01/9B: 5801     4:	ADDI	C,1
01/9C: 9200     	LOADF	A,[C]
01/9D: 5000     	ADDI	A,0
01/9E: F623     	BRZ	ARGDONE
01/9F: 3420     	LOADI	B,0X20
01/A0: D100     	CMP	A,B
01/A1: F9EF     	BRBE	2B
01/A3:          	
01/A2:          	; REGISTER THE FLAG
01/A2: 3400     	LOADI	B,0
01/A3: A480     	STORE	[DBANK],B
01/A5:          	
01/A4: 704C     	SUBI	A,'L'
01/A5: F701     	BRNZ	@+2
01/A6: 3411     	LOADI	B,LFLAG
01/A8:          	
01/A7:          	; IS IT A RECOGNIZED FLAG?
01/A7: 5400     	ADDI	B,0
01/A8: F60F     	BRZ	ARGBAD
01/A9: 3001     	LOADI	A,1
01/AA: B100     	STOREF	[B],A
01/AC:          
01/AB:          	; THERE MAY BE ANOTHER FLAG
01/AB: 8472     	LOAD	B,[CMDL_B]
01/AC: A46C     	STORE	[ARG_BNK],B
01/AD: A480     	STORE	[DBANK],B
01/AE: FFEC     	JUMP	4B
01/B0:          
01/AF:          	; SAVE THE ARGUMENT
01/AF: 3400     5:	LOADI	B,0
01/B0: A480     	STORE	[DBANK],B
01/B1: 8400     	LOAD	B,[ARGC]
01/B2: B901     	STOREF	[B+ARGV],C
01/B4:          	
01/B3:          	; DID WE EXCEED THE ALLOWED NUMBER OF ARGUMENTS
01/B3: 740F     	SUBI	B,MAXARGS
01/B4: F003     	BRC	ARGBAD
01/B5: 5410     	ADDI	B,MAXARGS+1
01/B6: A400     	STORE	[ARGC],B
01/B7: FFD0     	JUMP	0B
01/B9:          	
01/B8:          	; BAD ARGUMENT
01/B8: 3000     ARGBAD:	LOADI	A,0
01/B9: A080     	STORE	[DBANK],A
01/BB:          	
01/BA: 3001     	LOADI	A,ERR0_B
01/BB: A06C     	STORE	[ARG_BNK],A
01/BC: 3000     	LOADI	A,ERROR00
01/BE:          	
01/BD:          	; PRINT ERROR MESSAGE
01/BD: 3404     PRNTERR:LOADI	B,S_PUTS
01/BE: 38CC     	LOADI	C,EXIT
01/BF: FF44     	JUMP	SYSCALL	
01/C1:          
01/C0:          	; EXIT PROGRAM
01/C0: 3400     EXIT:	LOADI	B,0
01/C1: FF43     	JUMP	SYSJUMP
01/C3:          	
01/C2:          	; ARGUMENT PROCESSING DONE
01/C2: 3000     ARGDONE:LOADI	A,0
01/C3: A080     	STORE	[DBANK],A
01/C5:          	
01/C4:          	; CHECK ARG COUNT
01/C4: 8000     	LOAD	A,[ARGC]
01/C5: 5000     	ADDI	A,0
01/C6: F6F1     	BRZ	ARGBAD
01/C8:          	
01/C7:          	; RESET PASS TO FIRST
01/C7: 3000     	LOADI	A,0
01/C8: A019     	STORE	[PASS],A
01/CA:          	
01/C9:          	; BEGIN ASSEMBLY
01/C9: 3402     	LOADI	B,CORE1_B
01/CA: 3880     	LOADI	C,DOPASS
01/CB: FF36     	JUMP	INDIR
01/CD:          
01/CC:          	; EXIT PROGRAM
01/CC: 3400     EXIT:	LOADI	B,S_EXIT
01/CD: FF37     	JUMP	SYSJUMP
01/CF:          	
01/CE:          	; DO AN ERROR
01/CE: 3401     ERROR:	LOADI	B,BI
01/CF: B701     	STOREF	[D+1],B
01/D0: FFEC     	JUMP	PRNTERR
01/D2:          	
01/D1:          BI	= BI+1
01/D1:          .TEXT
01/D1:          .BANK	BI
02/80:          CORE1_B	= BI
02/80:          
02/80:          	; START A PASS
02/80:          	; BEGIN BY REWINDING THE SOURCE STREAM
02/80: 3802     DOPASS:	LOADI	C,BI
02/81: BB01     	STOREF	[D+1],C
02/82: 3887     	LOADI	C,@+5
02/83: BB00     	STOREF	[D],C
02/84: 3403     	LOADI	B,TOK0_B
02/85: 3880     	LOADI	C,REWIND
02/86: FF7B     	JUMP	INDIR
02/88:          
02/87:          	; TAKE IN A NEW LINE OF SOURCE CODE
02/87: 3802     ASMLINE:LOADI	C,BI
02/88: BB01     	STOREF	[D+1],C
02/89: 388E     	LOADI	C,@+5
02/8A: BB00     	STOREF	[D],C
02/8B: 3403     	LOADI	B,TOK0_B
02/8C: 38AA     	LOADI	C,NEXTCHR
02/8D: FF74     	JUMP	INDIR
02/8F:          	
02/8E:          	; ARE WE AT THE END?
02/8E: 8018     	LOAD	A,[SRCCHAR]
02/8F: 5000     	ADDI	A,0
02/90: F7F6     	BRNZ	ASMLINE
02/92:          
02/91:          	; ALL DONE
02/91: 3401     ASMDONE:LOADI	B,CORE0_B
02/92: 38CC     	LOADI	C,EXIT
02/93: FF6E     	JUMP	INDIR
02/95:          
02/94:          
02/94:          	; ZERO BANK VARIABLES
02/94:          .BANK	0
00/80:          .BSS
00/80:          
00/00:          	; COMMAND LINE ARGUMENTS
00/00: 00       .DEFL BYTE ARGC		0
00/01: 00000000
       00000000 .DEFL BYTE ARGV		0,0,0,0,0,0,0,0,
00/09: 00000000
       00000000 			0,0,0,0,0,0,0,0
00/11:          
00/11:          	; COMMAND LINE FLAGS
00/11: 00       .DEFL BYTE LFLAG	0
00/12:          
00/12:          	; LATEST TOKEN
00/12: 00       .DEFL BYTE TOKEN	0
00/13:          
00/13:          	; TOKEN STREAM STATE
00/13: 00       .DEFL BYTE SRCINDX	0
00/14: 00       .DEFL BYTE SRCBLK	0
00/15: 00       .DEFL BYTE SRCBANK	0
00/16: 00       .DEFL BYTE SRCPNTR	0
00/17: 00       .DEFL BYTE SRCSTAT	0
00/18: 00       .DEFL BYTE SRCCHAR	0
00/19:          
00/19:          	; ASSEMBLY STATE
00/19: 00       .DEFL BYTE PASS		0
00/1A:          
00/1A:          	; ERROR BANKS
00/1A:          .BANK	BD
01/00:          .DATA
01/00:          ERR0_B	= BD
01/00:          
01/00:          	; ERROR MESSAGES
01/00: 494E5641
       4C494420
       41524755
       4D454E54
       530A0D   .DEFL BYTE ERROR00	"INVALID ARGUMENTS",0X0A,0X0D,
01/13: 55534147
       453A2041
       53205B2D
       4C5D2046
       494C4531
       2046494C
       4532202E
       2E2E0A0D
       00       			"USAGE: AS [-L] FILE1 FILE2 ...",0X0A,0X0D,0
01/34: 43414E27
       54204F50
       454E2046
       494C450A
       0D00     .DEFL BYTE ERROR01	"CAN'T OPEN FILE",0X0A,0X0D,0
01/46:          
01/46:          BD	= BD+1
01/46:          
01/46:          	; SOURCE READ BUFFER
01/46:          .BANK	BD
02/00:          .DATA
02/00:          SRC_B	= BD
02/00:          
02/00:          BD	= BD+4
02/00:          ; AS1.S
02/00:          ; SOURCE INPUT AND TOKENIZER
02/00:          ; GAVIN TERSTEEG, 2024
02/00:          ; SDMAY24-14
02/00:          
02/00:          BI	= BI+1
02/00:          .TEXT
02/94:          .BANK	BI
03/80:          TOK0_B	= BI
03/80:          
03/80:          	; RESETS THE STATE OF THE TOKEN STREAM BACK TO
03/80:          	; BEGINNING OF SOURCE INPUT
03/80: 30FF     REWIND:	LOADI	A,0-1
03/81: A013     	STORE	[SRCINDX],A
03/83:          	
03/82:          	; GET THE NEXT FILE
03/82:          	; ALL POINTERS WILL BE RESET FOR FILE READ IN
03/82:          	; SRCINDX == ARGC IF WE ARE DONE READING IN BLOCK
03/82: 7C02     NEXTSRC:SUBI	D,2
03/84:          
03/83:          	; RESET POINTER, BLOCK, AND STAT
03/83: 3000     	LOADI	A,0
03/84: A016     	STORE	[SRCPNTR],A
03/85: A014     	STORE	[SRCBLK],A
03/86: A017     	STORE	[SRCSTAT],A
03/88:          	
03/87:          	; RESET BANK
03/87: 3002     	LOADI	A,SRC_B
03/88: A015     	STORE	[SRCBANK],A
03/8A:          
03/89:          	; INCREMENT SOURCE INDEX
03/89: 8013     0:	LOAD	A,[SRCINDX]
03/8A: 5001     	ADDI	A,1
03/8B: A013     	STORE	[SRCINDX],A
03/8D:          
03/8C:          	; CHECK BOUNDS OF INDEX
03/8C: 8400     	LOAD	B,[ARGC]
03/8D: D100     	CMP	A,B
03/8E: F019     	BRAE	9F
03/90:          	
03/8F:          	; ATTEMPT TO OPEN FILE
03/8F: 8472     	LOAD	B,[CMDL_B]
03/90: A46C     	STORE	[ARG_BNK],B
03/91: 9001     	LOADF	A,[A+ARGV]
03/92: 3803     	LOADI	C,BI
03/93: BB01     	STOREF	[D+1],C
03/94: 3896     	LOADI	C,@+2
03/95: 3406     	LOADI	B,S_OPEN
03/96: 3898     	LOADI	C,@+2
03/97: FF6C     	JUMP	SYSCALL
03/98: 5000     	ADDI	A,0
03/99: F606     	BRZ	1F
03/9B:          	
03/9A:          	; ERROR
03/9A: 3001     	LOADI	A,ERR0_B
03/9B: A06C     	STORE	[ARG_BNK],A
03/9C: 3034     	LOADI	A,ERROR01
03/9D: 3401     	LOADI	B,CORE0_B
03/9E: 38CE     	LOADI	C,ERROR
03/9F: FF62     	JUMP	INDIR
03/A1:          
03/A0:          	; ATTEMPT TO READ THE FIRST BLOCK
03/A0: 3402     1:	LOADI	B,SRC_B
03/A1: A46C     	STORE	[ARG_BNK],B
03/A2: 3000     	LOADI	A,0
03/A3: 3408     	LOADI	B,S_READ
03/A4: 38A6     	LOADI	C,@+2
03/A5: FF5E     	JUMP	SYSCALL
03/A7:          	
03/A6:          	; IF IT DIDN'T WORK, GET THE NEXT BLOCK
03/A6: 5000     	ADDI	A,0
03/A7: F7E1     	BRNZ	0B
03/A9:          
03/A8:          	; RETURN
03/A8: 5C02     9:	ADDI	D,2
03/A9: FF59     	JUMP	IRET
03/AB:          	
03/AA:          	; GET THE NEXT CHARACTER IN THE STREAM
03/AA:          	; RETURNS CHARACTER IN [SRCCHAR]
03/AA:          	; IF THERE ARE NO CHARACTER, 0 WILL BE RETURNED
03/AA: 7C02     NEXTCHR:SUBI	D,2
03/AC:          
03/AB:          	; CHECK SRCINDX != ARGC
03/AB: 8013     	LOAD	A,[SRCINDX]
03/AC: 8400     	LOAD	B,[ARGC]
03/AD: D100     	CMP	A,B
03/AE: F627     	BRZ	8F
03/B0:          
03/AF:          	; CHECK IF SRCPNTR IS VALID
03/AF: 8016     	LOAD	A,[SRCPNTR]
03/B0: 8415     	LOAD	B,[SRCBANK]
03/B1: 5000     	ADDI	A,0
03/B2: F40C     	BRN	3F
03/B4:          	
03/B3:          	; ALRIGHT, LETS JUST GRAB A CHARACTER FROM THE BANK
03/B3: A480     1:	STORE	[DBANK],B
03/B4: 9800     	LOADF	C,[A]
03/B5: 3400     	LOADI	B,0
03/B6: A480     	STORE	[DBANK],B
03/B8:          	
03/B7:          	; INCREMENT POINTER
03/B7: 5001     	ADDI	A,1
03/B8: A016     	STORE	[SRCPNTR],A
03/BA:          	
03/B9:          	; CAN WE RETURN?
03/B9: A818     2:	STORE	[SRCCHAR],C
03/BA: 5800     	ADDI	C,0
03/BB: F71C     	BRNZ	9F
03/BC: 380A     	LOADI	C,0X0A
03/BD: A818     	STORE	[SRCCHAR],C
03/BE: FF15     	JUMP	7F
03/C0:          	
03/BF:          	; INCREMENT BANK
03/BF: 3000     3:	LOADI	A,0
03/C0: 5401     	ADDI	B,1
03/C1: A415     	STORE	[SRCBANK],B
03/C2: 3806     	LOADI	C,SRC_B+4
03/C3: D600     	CMP	B,C
03/C4: F1EE     	BRB	1B
03/C6:          	
03/C5:          	; READ A NEW BLOCK
03/C5: 8014     	LOAD	A,[SRCBLK]
03/C6: 5001     	ADDI	A,1
03/C7: F00C     	BRC	7F
03/C8: A014     	STORE	[SRCBLK],A
03/C9: 3803     	LOADI	C,BI
03/CA: BB01     	STOREF	[D+1],C
03/CB: 3408     	LOADI	B,S_READ
03/CC: 38CE     	LOADI	C,@+2
03/CD: FF36     	JUMP	SYSCALL
03/CE: 5000     	ADDI	A,0
03/CF: F704     	BRNZ	7F
03/D1:          	
03/D0:          	; GO READ A CHARACTER NOW
03/D0: 3000     	LOADI	A,0
03/D1: 3402     	LOADI	B,SRC_B
03/D2: A415     	STORE	[SRCBANK],B
03/D3: FFDF     	JUMP	1B
03/D5:          
03/D4:          	; WE ARE DONE WITH THIS FILE
03/D4:          	; MOVE ON TO THE NEXT
03/D4: 5C02     7:	ADDI	D,2
03/D5: FFAC     	JUMP	NEXTSRC
03/D7:          	
03/D6:          	; STORE A ZERO IN SRCCHAR
03/D6: 3000     8:	LOADI	A,0
03/D7: A018     	STORE	[SRCCHAR],A
03/D9:          	
03/D8:          	; RETURN
03/D8: 5C02     9:	ADDI	D,2
03/D9: FF29     	JUMP	IRET
03/DB:          	
03/DA:          	
