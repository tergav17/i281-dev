00/00:          ; DOSDEF.S
01/80:          ; THIS FILE CONTAINS IMPORTANT DEFINES USED IN DOS/281
01/80:          
01/80:          ; BIOS CALLS
01/80:          BOOT	= 0
01/80:          ALTBOOT = 1
01/80:          INDIR	= 2
01/80:          IRET	= 3
01/80:          SYSCALL	= 4
01/80:          SYSJUMP	= 5
01/80:          PRGM	= 6
01/80:          IWRITE	= 7
01/80:          ZSTART	= 8
01/80:          
01/80:          HALT	= 0X7F
01/80:          
01/80:          ; SYSTEM CALLS
01/80:          S_EXIT	= 0
01/80:          S_PUTC	= 1
01/80:          S_GETC	= 2
01/80:          S_STAT	= 3
01/80:          S_PUTS	= 4
01/80:          S_INPUT	= 5
01/80:          S_OPEN	= 6
01/80:          S_CLOSE	= 7
01/80:          S_READ	= 8
01/80:          S_WRITE	= 9
01/80:          S_FSRCH	= 10
01/80:          S_NEXT	= 11
01/80:          S_DELET	= 12
01/80:          S_CREAT	= 13
01/80:          S_FREE	= 14
01/80:          S_EXEC	= 15
01/80:          
01/80:          ; MEMORY AREAS
01/80:          CF_NAME	= 0X60
01/80:          CF_SIZE	= 0X68
01/80:          CF_USR	= 0X6A
01/80:          DFT_USR	= 0X6B
01/80:          ARG_BNK	= 0X6C
01/80:          BD_FREE	= 0X6E
01/80:          MAX_IB	= 0X70
01/80:          MAX_DB	= 0X71
01/80:          CMDL_B	= 0X72
01/80:          AUTO_B	= 0X73
01/80:          KERNMEM	= 0X78
01/80:          BIOSMEM	= 0X7C
01/80:          
01/80:          ; DATA BANK ADDRESS
01/80:          DBANK	= 0X80		
01/80:          
01/80:          
01/80:          ; AS0.S
01/80:          ; ASSEMBLER CORE
01/80:          ; GAVIN TERSTEEG, 2024
01/80:          ; SDMAY24-14
01/80:          
01/80:          ; BANK ALLOCATION STUFF
01/80:          BI	= 1
01/80:          BD	= 1
01/80:          
01/80:          ; MAXIMUM ARGUMENTS
01/80:          MAXARGS	= 15
01/80:          
01/80:          .TEXT
01/80:          .BANK	BI
01/80:          CORE0_B	= BI
01/80:          
01/80:          	; START BY PROCESSING THE ARGUMENTS
01/80: 3000     START:	LOADI	A,0
01/81: A080     	STORE	[DBANK],A
01/83:          	
01/82:          	; RESET ARG STATE
01/82: A000     	STORE	[ARGC],A
01/83: A011     	STORE	[LFLAG],A
01/85:          	
01/84:          	; SET UP STACK
01/84: 3C5E     	LOADI	D,0X60-2
01/86:          	
01/85:          	; SYSCALL RETURN BANK
01/85: 3801     	LOADI	C,BI
01/86: BB01     	STOREF	[D+1],C
01/88:          	
01/87:          	; SET UP POINTER
01/87: 3800     	LOADI	C,0
01/89:          	
01/88:          	; GO TO ARGUMENT BANK
01/88: 8072     0:	LOAD	A,[CMDL_B]
01/89: A06C     	STORE	[ARG_BNK],A
01/8A: A080     	STORE	[DBANK],A
01/8C:          
01/8B:          	; SKIP THE CURRENT ARGUMENT
01/8B: 9200     1:	LOADF	A,[C]
01/8C: 3420     	LOADI	B,0X20
01/8D: D100     	CMP	A,B
01/8E: F902     	BRBE	2F
01/8F: 5801     	ADDI	C,1
01/90: FFFA     	JUMP	1B
01/92:          
01/91:          	; LOOK FOR AN ARGUMENT
01/91: 9200     2:	LOADF	A,[C]
01/92: 5000     	ADDI	A,0
01/93: F630     	BRZ	ARGDONE
01/94: D100     	CMP	A,B
01/95: F802     	BRA	3F
01/96: 5801     	ADDI	C,1
01/97: FFF9     	JUMP	2B
01/99:          
01/98:          	; IS IT A FLAG?
01/98: 342D     3:	LOADI	B,'-'
01/99: D100     	CMP	A,B
01/9A: F714     	BRNZ	5F
01/9C:          	
01/9B:          	; HANDLE FLAGS HERE	
01/9B: 5801     4:	ADDI	C,1
01/9C: 9200     	LOADF	A,[C]
01/9D: 5000     	ADDI	A,0
01/9E: F625     	BRZ	ARGDONE
01/9F: 3420     	LOADI	B,0X20
01/A0: D100     	CMP	A,B
01/A1: F9EF     	BRBE	2B
01/A3:          	
01/A2:          	; REGISTER THE FLAG
01/A2: 3400     	LOADI	B,0
01/A3: A480     	STORE	[DBANK],B
01/A5:          	
01/A4: 704C     	SUBI	A,'L'
01/A5: F701     	BRNZ	@+2
01/A6: 3411     	LOADI	B,LFLAG
01/A8:          	
01/A7:          	; IS IT A RECOGNIZED FLAG?
01/A7: 5400     	ADDI	B,0
01/A8: F60F     	BRZ	ARGBAD
01/A9: 3001     	LOADI	A,1
01/AA: B100     	STOREF	[B],A
01/AC:          
01/AB:          	; THERE MAY BE ANOTHER FLAG
01/AB: 8472     	LOAD	B,[CMDL_B]
01/AC: A46C     	STORE	[ARG_BNK],B
01/AD: A480     	STORE	[DBANK],B
01/AE: FFEC     	JUMP	4B
01/B0:          
01/AF:          	; SAVE THE ARGUMENT
01/AF: 3400     5:	LOADI	B,0
01/B0: A480     	STORE	[DBANK],B
01/B1: 8400     	LOAD	B,[ARGC]
01/B2: B901     	STOREF	[B+ARGV],C
01/B4:          	
01/B3:          	; DID WE EXCEED THE ALLOWED NUMBER OF ARGUMENTS
01/B3: 740F     	SUBI	B,MAXARGS
01/B4: F003     	BRC	ARGBAD
01/B5: 5410     	ADDI	B,MAXARGS+1
01/B6: A400     	STORE	[ARGC],B
01/B7: FFD0     	JUMP	0B
01/B9:          	
01/B8:          	; BAD ARGUMENT
01/B8: 3000     ARGBAD:	LOADI	A,0
01/B9: A080     	STORE	[DBANK],A
01/BB:          	
01/BA: 3001     	LOADI	A,ERR0_B
01/BB: A06C     	STORE	[ARG_BNK],A
01/BC: 3000     	LOADI	A,ERROR00
01/BE:          	
01/BD:          	; PRINT ERROR MESSAGE
01/BD: 3801     PRNTERR:LOADI	C,BI
01/BE: BB01     	STOREF	[D+1],C
01/BF: 3404     	LOADI	B,S_PUTS
01/C0: 38CE     	LOADI	C,EXIT
01/C1: FF42     	JUMP	SYSCALL	
01/C3:          
01/C2:          	; EXIT PROGRAM
01/C2: 3400     EXIT:	LOADI	B,0
01/C3: FF41     	JUMP	SYSJUMP
01/C5:          	
01/C4:          	; ARGUMENT PROCESSING DONE
01/C4: 3000     ARGDONE:LOADI	A,0
01/C5: A080     	STORE	[DBANK],A
01/C7:          	
01/C6:          	; CHECK ARG COUNT
01/C6: 8000     	LOAD	A,[ARGC]
01/C7: 5000     	ADDI	A,0
01/C8: F6EF     	BRZ	ARGBAD
01/CA:          	
01/C9:          	; RESET PASS TO FIRST
01/C9: 3000     	LOADI	A,0
01/CA: A02B     	STORE	[PASS],A
01/CC:          	
01/CB:          	; BEGIN ASSEMBLY
01/CB: 3402     	LOADI	B,CORE1_B
01/CC: 3880     	LOADI	C,DOPASS
01/CD: FF34     	JUMP	INDIR
01/CF:          
01/CE:          	; EXIT PROGRAM
01/CE: 3400     EXIT:	LOADI	B,S_EXIT
01/CF: FF35     	JUMP	SYSJUMP
01/D1:          	
01/D0:          	; DO AN ERROR
01/D0:          	; A = ERROR #
01/D0: A02E     ERROR:	STORE	[ERRNUM],A
01/D1: 3403     	LOADI	B,PRNT0_B
01/D2: 3880     	LOADI	C,PERHEAD
01/D3: FF2E     	JUMP	INDIR
01/D5:          	
01/D4:          BI	= BI+1
01/D4:          .TEXT
01/D4:          .BANK	BI
02/80:          CORE1_B	= BI
02/80:          
02/80:          	; START A PASS
02/80:          	; BEGIN BY REWINDING THE SOURCE STREAM
02/80: 3802     DOPASS:	LOADI	C,BI
02/81: BB01     	STOREF	[D+1],C
02/82: 3887     	LOADI	C,@+5
02/83: BB00     	STOREF	[D],C
02/84: 3404     	LOADI	B,TOK0_B
02/85: 3883     	LOADI	C,REWIND
02/86: FF7B     	JUMP	INDIR
02/88:          
02/87:          	; TAKE IN A NEW LINE OF SOURCE CODE
02/87: 3802     ASMLINE:LOADI	C,BI
02/88: BB01     	STOREF	[D+1],C
02/89: 388E     	LOADI	C,@+5
02/8A: BB00     	STOREF	[D],C
02/8B: 3404     	LOADI	B,TOK0_B
02/8C: 3880     	LOADI	C,NEXTTOK
02/8D: FF74     	JUMP	INDIR
02/8F:          	
02/8E:          	; ARE WE AT THE END?
02/8E: 8018     	LOAD	A,[TOKEN]
02/8F: 5000     	ADDI	A,0
02/90: F7F6     	BRNZ	ASMLINE
02/92:          
02/91:          	; ALL DONE
02/91: 3401     ASMDONE:LOADI	B,CORE0_B
02/92: 38CE     	LOADI	C,EXIT
02/93: FF6E     	JUMP	INDIR
02/95:          
02/94:          BI	= BI+1
02/94:          .TEXT
02/94:          .BANK	BI
03/80:          PRNT0_B	= BI
03/80:          
03/80:          	; PRINTS THE ERROR HEADER
03/80:          	; THE CURRENTLY OPEN FILE AND LINE NUMBER WILL BE PRINTED
03/80:          	; FORMAT: '[FILE]:[LINE]: ERROR'
03/80: 3803     PERHEAD:LOADI	C,BI
03/81: BB01     	STOREF	[D+1],C
03/83:          	
03/82:          	; PRINT CURRENTLY OPEN FILE
03/82: 8019     	LOAD	A,[SRCINDX]
03/83: 9001     	LOADF	A,[A+ARGV]
03/85:          	
03/84:          	; PRINT LOOP
03/84: A01F     0:	STORE	[BUFPNTR],A
03/85: 8472     	LOAD	B,[CMDL_B]
03/86: A480     	STORE	[DBANK],B
03/87: 9000     	LOADF	A,[A]
03/88: 3400     	LOADI	B,0
03/89: A480     	STORE	[DBANK],B
03/8A: 3420     	LOADI	B,0X20
03/8B: D100     	CMP	A,B
03/8C: F906     	BRBE	1F
03/8D: 3401     	LOADI	B,S_PUTC
03/8E: 3890     	LOADI	C,@+2
03/8F: FF74     	JUMP	SYSCALL
03/90: 801F     	LOAD	A,[BUFPNTR]
03/91: 5001     	ADDI	A,1
03/92: FFF1     	JUMP	0B
03/94:          	
03/93:          	; PRINT ':'
03/93: 303A     1:	LOADI	A,':'
03/94: 3401     	LOADI	B,S_PUTC
03/95: 3897     	LOADI	C,@+2
03/96: FF6D     	JUMP	SYSCALL
03/98:          	
03/97:          	; PRINT LINE NUMBER
03/97: 802C     	LOAD	A,[LINENUM]
03/98: A016     	STORE	[VALUE],A
03/99: 802D     	LOAD	A,[LINENUM+1]
03/9A: A017     	STORE	[VALUE+1],A
03/9B: 389E     	LOADI	C,@+3
03/9C: BB00     	STOREF	[D],C
03/9D: FF16     	JUMP	PRINTD
03/9F:          	
03/9E:          	; PRINT ':' + SPACE
03/9E: 303A     	LOADI	A,':'
03/9F: 3401     	LOADI	B,S_PUTC
03/A0: 38A2     	LOADI	C,@+2
03/A1: FF62     	JUMP	SYSCALL
03/A2: 3020     	LOADI	A,0X20
03/A3: 3401     	LOADI	B,S_PUTC
03/A4: 38A6     	LOADI	C,@+2
03/A5: FF5E     	JUMP	SYSCALL
03/A7:          	
03/A6:          	; LOOKUP ERROR ON TABLE
03/A6: 802E     	LOAD	A,[ERRNUM]
03/A7: 7080     	SUBI	A,0X80
03/A8: 4000     	SHIFTL	A
03/A9: 5034     	ADDI	A,ETABLE
03/AA: 3801     	LOADI	C,ERR0_B
03/AB: A880     	STORE	[DBANK],C
03/AC: 9400     	LOADF	B,[A]
03/AD: 9001     	LOADF	A,[A+1]
03/AE: 3800     	LOADI	C,0
03/AF: A880     	STORE	[DBANK],C
03/B0: A46C     	STORE	[ARG_BNK],B
03/B1: 3401     	LOADI	B,CORE0_B
03/B2: 38BD     	LOADI	C,PRNTERR
03/B3: FF4E     	JUMP	INDIR
03/B5:          	
03/B4:          
03/B4:          	; PRINTS VARIABLE [VALUE] AS A 16 BIT BASE-10 NUMBER
03/B4: 7C02     PRINTD: SUBI	D,2
03/B6:          	
03/B5:          	; SET PADDING TO NULL CHARACTER AT FIRST
03/B5: 3800     	LOADI	C,0
03/B6: A814     	STORE	[PADDING],C
03/B8:          	
03/B7:          V	= 10000
03/B7: 3027     	LOADI	A,V/256
03/B8: 3410     	LOADI	B,V%256
03/B9: 38BB     	LOADI	C,@+2
03/BA: FF14     	JUMP	DOCHAR
03/BC:          	
03/BB:          V	= 1000
03/BB: 3003     	LOADI	A,V/256
03/BC: 34E8     	LOADI	B,V%256
03/BD: 38BF     	LOADI	C,@+2
03/BE: FF10     	JUMP	DOCHAR
03/C0:          	
03/BF:          V	= 100
03/BF: 3000     	LOADI	A,V/256
03/C0: 3464     	LOADI	B,V%256
03/C1: 38C3     	LOADI	C,@+2
03/C2: FF0C     	JUMP	DOCHAR
03/C4:          	
03/C3:          V	= 10
03/C3: 3000     	LOADI	A,V/256
03/C4: 340A     	LOADI	B,V%256
03/C5: 38C7     	LOADI	C,@+2
03/C6: FF08     	JUMP	DOCHAR
03/C8:          	
03/C7: 3030     	LOADI	A,'0'
03/C8: A014     	STORE	[PADDING],A
03/CA:          	
03/C9:          V	= 1
03/C9: 3000     	LOADI	A,V/256
03/CA: 3401     	LOADI	B,V%256
03/CB: 38CD     	LOADI	C,@+2
03/CC: FF02     	JUMP	DOCHAR
03/CE:          	
03/CD: 5C02     	ADDI	D,2 
03/CE: FF34     	JUMP	IRET
03/D0:          	
03/CF:          	; A = UPPER SUB
03/CF:          	; B = LOWER SUB
03/CF: A813     DOCHAR:	STORE	[LEAFRET],C
03/D0: 8814     	LOAD	C,[PADDING]	
03/D1: A815     	STORE	[CHAR],C
03/D3:          	
03/D2:          	; PARK THE STACK
03/D2: AC12     	STORE	[SPARK],D
03/D4:          
03/D3:          	; GET THE SIZE
03/D3: 8816     0:	LOAD	C,[VALUE]
03/D4: 8C17     	LOAD	D,[VALUE+1]
03/D6:          	
03/D5:          	; DO 16 BIT SUBTRACTION
03/D5: 6D00     1:	SUB	D,B
03/D6: F002     	BRC	2F
03/D7: 7801     	SUBI	C,1
03/D8: F10D     	BRNC	4F
03/D9: 6800     2:	SUB	C,A
03/DA: F10B     	BRNC	4F
03/DC:          	
03/DB:          	; SAVE VALUE
03/DB: A816     	STORE	[VALUE],C
03/DC: AC17     	STORE	[VALUE+1],D
03/DE:          	
03/DD:          	; GET THE CHAR AND CHECK TO SEE IF IT IS A WHITESPACE
03/DD: 8815     	LOAD	C,[CHAR]
03/DE: 3C20     	LOADI	D,0X20
03/DF: DB00     	CMP	C,D
03/E0: F802     	BRA	3F
03/E2:          	
03/E1:          	; SET PADDING AND CHAR TO '0'
03/E1: 3830     	LOADI	C,'0'
03/E2: A814     	STORE	[PADDING],C
03/E4:          	
03/E3: 5801     3:	ADDI	C,1
03/E4: A815     	STORE	[CHAR],C
03/E5: FFED     	JUMP	0B
03/E7:          	
03/E6:          	; RESTORE THE STACK
03/E6: 8C12     4:	LOAD	D,[SPARK]
03/E8:          	
03/E7:          	; SEE IF IT IS ZERO
03/E7: 8015     	LOAD	A,[CHAR]
03/E8: 5000     	ADDI	A,0
03/E9: F702     	BRNZ	5F
03/EA: 8813     	LOAD	C,[LEAFRET]
03/EB: FE14     	JUMPR	C
03/ED:          	
03/EC:          	; PRINT THE CHARACTER
03/EC: 3401     5:	LOADI	B,S_PUTC
03/ED: 3803     	LOADI	C,BI
03/EE: BB01     	STOREF	[D+1],C
03/EF: 8813     	LOAD	C,[LEAFRET]
03/F0: FF13     	JUMP	SYSCALL
03/F2:          
03/F1:          
03/F1:          	; ZERO BANK VARIABLES
03/F1:          .BANK	0
00/80:          .BSS
00/80:          
00/00:          	; COMMAND LINE ARGUMENTS
00/00: 00       .DEFL BYTE ARGC		0
00/01: 00000000
       00000000 .DEFL BYTE ARGV		0,0,0,0,0,0,0,0,
00/09: 00000000
       00000000 			0,0,0,0,0,0,0,0
00/11:          
00/11:          	; COMMAND LINE FLAGS
00/11: 00       .DEFL BYTE LFLAG	0
00/12:          
00/12:          	; VARIOUS MISC VARIABLES
00/12: 00       .DEFL BYTE SPARK	0
00/13: 00       .DEFL BYTE LEAFRET	0
00/14: 00       .DEFL BYTE PADDING	0
00/15: 00       .DEFL BYTE CHAR		0
00/16: 0000     .DEFL WORD VALUE	0
00/18:          
00/18:          	; LATEST TOKEN
00/18: 00       .DEFL BYTE TOKEN	0
00/19:          
00/19:          	; TOKEN STREAM STATE
00/19: 00       .DEFL BYTE SRCINDX	0
00/1A: 00       .DEFL BYTE SRCBLK	0
00/1B: 00       .DEFL BYTE SRCBANK	0
00/1C: 00       .DEFL BYTE SRCPNTR	0
00/1D: 00       .DEFL BYTE SRCSTAT	0
00/1E: 00       .DEFL BYTE SRCCHAR	0
00/1F:          
00/1F:          	; TOKEN BUFFER
00/1F: 00       .DEFL BYTE BUFPNTR	0
00/20: 00000000
       00000000
       0000     .DEFL BYTE TBUF		0,0,0,0,0,0,0,0,0,0
00/2A: 00       .DEFL BYTE TBUFEND	0
00/2B:          	
00/2B:          	; ASSEMBLY STATE
00/2B: 00       .DEFL BYTE PASS		0
00/2C: 0000     .DEFL WORD LINENUM	0
00/2E: 00       .DEFL BYTE ERRNUM	0
00/2F:          
00/2F:          	; ERROR BANK 0
00/2F:          .BANK	BD
01/00:          .DATA
01/00:          ERR0_B	= BD
01/00:          
01/00:          	; INVALID ARGUMENTS
01/00: 494E5641
       4C494420
       41524755
       4D454E54
       530A0D   .DEFL BYTE ERROR00	"INVALID ARGUMENTS",0X0A,0X0D,
01/13: 55534147
       453A2041
       53205B2D
       4C5D2046
       494C4531
       2046494C
       4532202E
       2E2E0A0D
       00       			"USAGE: AS [-L] FILE1 FILE2 ...",0X0A,0X0D,0
01/34:          
01/34:          	; ERROR TABLE
01/34: 0200     .DEFL BYTE ETABLE	ERR1_B,ERROR10,	; ERROR 0X80: CANNOT OPEN FILE 
01/36: 0212     			ERR1_B,ERROR11	; ERROR 0X81: UNEXPECTED CHAR IN NUM
01/38:          
01/38:          BD	= BD+1	
01/38:          	
01/38:          	; ERROR BANK 1
01/38:          .BANK	BD
02/00:          .DATA
02/00:          ERR1_B	= BD
02/00:          
02/00: 43414E27
       54204F50
       454E2046
       494C450A
       0D00     .DEFL BYTE ERROR10	"CAN'T OPEN FILE",0X0A,0X0D,0
02/12: 554E4558
       50454354
       45442043
       48415220
       494E204E
       554D0A0D
       00       .DEFL BYTE ERROR11	"UNEXPECTED CHAR IN NUM",0X0A,0X0D,0
02/2B:          
02/2B:          BD	= BD+1
02/2B:          
02/2B:          	; SOURCE READ BUFFER
02/2B:          .BANK	BD
03/00:          .DATA
03/00:          SRC_B	= BD
03/00:          
03/00:          BD	= BD+4
03/00:          ; AS1.S
03/00:          ; SOURCE INPUT AND TOKENIZER
03/00:          ; GAVIN TERSTEEG, 2024
03/00:          ; SDMAY24-14
03/00:          
03/00:          ; NEW LINE CHARACTER
03/00:          NEWLINE	= 0X0A
03/00:          SEMICOL	= 0X3B
03/00:          SQUOTE	= 0X27
03/00:          DQUOTE	= 0X22
03/00:          SYMBOL	= 0X80
03/00:          NUMERIC	= 0X81
03/00:          
03/00:          
03/00:          BI	= BI+1
03/00:          .TEXT
03/F1:          .BANK	BI
04/80:          TOK0_B	= BI
04/80:          
04/80:          	; GETS THE NEXT TOKEN
04/80:          	; TOKEN TYPE IS RETURNED IN [TOKEN]
04/80:          	; SPECIAL TYPES ARE:
04/80:          	; 'A' -> ALPHANUMERIC
04/80:          	; '0' -> NUMERIC
04/80:          	; NEWLINE -> NEW LINE
04/80:          	; ALL WHITESPACE IS IGNORED, UNLESS WE ARE INSIDE
04/80:          	; A STRING OR DEFINED CHAR
04/80:          	; 'A' AND '0' TOKENS WILL POPULATE THE TOKEN BUFFER
04/80:          	; AS WELL
04/80: 3405     NEXTTOK:LOADI	B,TOK1_B
04/81: 3880     	LOADI	C,NEXTTOA
04/82: FF7F     	JUMP	INDIR
04/84:          
04/83:          	; RESETS THE STATE OF THE TOKEN STREAM BACK TO
04/83:          	; BEGINNING OF SOURCE INPUT
04/83: 30FF     REWIND:	LOADI	A,0-1
04/84: A019     	STORE	[SRCINDX],A
04/86:          	
04/85:          	; SET FIRST CHAR AS INVALID
04/85: 3080     	LOADI	A,0X80
04/86: A01E     	STORE	[SRCCHAR],A
04/88:          	
04/87:          	; GET THE NEXT FILE
04/87:          	; ALL POINTERS WILL BE RESET FOR FILE READ IN
04/87:          	; SRCINDX == ARGC IF WE ARE DONE READING IN BLOCK
04/87: 7C02     NEXTSRC:SUBI	D,2
04/89:          
04/88:          	; RESET POINTER, BLOCK, AND LINENUM
04/88: 3000     	LOADI	A,0
04/89: A01C     	STORE	[SRCPNTR],A
04/8A: A01A     	STORE	[SRCBLK],A
04/8B: A02C     	STORE	[LINENUM],A
04/8C: A02D     	STORE	[LINENUM+1],A
04/8E:          	
04/8D:          	; RESET STAT
04/8D: 30FF     	LOADI	A,0XFF
04/8E: A01D     	STORE	[SRCSTAT],A
04/90:          	
04/8F:          	; RESET BANK
04/8F: 3003     	LOADI	A,SRC_B
04/90: A01B     	STORE	[SRCBANK],A
04/92:          
04/91:          	; INCREMENT SOURCE INDEX
04/91: 8019     0:	LOAD	A,[SRCINDX]
04/92: 5001     	ADDI	A,1
04/93: A019     	STORE	[SRCINDX],A
04/95:          
04/94:          	; CHECK BOUNDS OF INDEX
04/94: 8400     	LOAD	B,[ARGC]
04/95: D100     	CMP	A,B
04/96: F017     	BRAE	9F
04/98:          	
04/97:          	; ATTEMPT TO OPEN FILE
04/97: 8472     	LOAD	B,[CMDL_B]
04/98: A46C     	STORE	[ARG_BNK],B
04/99: 9001     	LOADF	A,[A+ARGV]
04/9A: 3804     	LOADI	C,BI
04/9B: BB01     	STOREF	[D+1],C
04/9C: 389E     	LOADI	C,@+2
04/9D: 3406     	LOADI	B,S_OPEN
04/9E: 38A0     	LOADI	C,@+2
04/9F: FF64     	JUMP	SYSCALL
04/A0: 5000     	ADDI	A,0
04/A1: F604     	BRZ	1F
04/A3:          	
04/A2:          	; ERROR
04/A2: 3080     	LOADI	A,0X80
04/A3: 3401     	LOADI	B,CORE0_B
04/A4: 38D0     	LOADI	C,ERROR
04/A5: FF5C     	JUMP	INDIR
04/A7:          
04/A6:          	; ATTEMPT TO READ THE FIRST BLOCK
04/A6: 3403     1:	LOADI	B,SRC_B
04/A7: A46C     	STORE	[ARG_BNK],B
04/A8: 3000     	LOADI	A,0
04/A9: 3408     	LOADI	B,S_READ
04/AA: 38AC     	LOADI	C,@+2
04/AB: FF58     	JUMP	SYSCALL
04/AD:          	
04/AC:          	; IF IT DIDN'T WORK, GET THE NEXT BLOCK
04/AC: 5000     	ADDI	A,0
04/AD: F7E3     	BRNZ	0B
04/AF:          
04/AE:          	; RETURN
04/AE: 5C02     9:	ADDI	D,2
04/AF: FF53     	JUMP	IRET
04/B1:          	
04/B0:          	; GET THE NEXT CHARACTER IN THE STREAM
04/B0:          	; RETURNS CHARACTER IN [SRCCHAR]
04/B0:          	; IF THERE ARE NO CHARACTER, 0 WILL BE RETURNED
04/B0: 7C02     NEXTCHR:SUBI	D,2
04/B2:          
04/B1:          	; CHECK SRCINDX != ARGC
04/B1: 8019     	LOAD	A,[SRCINDX]
04/B2: 8400     	LOAD	B,[ARGC]
04/B3: D100     	CMP	A,B
04/B4: F627     	BRZ	8F
04/B6:          
04/B5:          	; CHECK IF SRCPNTR IS VALID
04/B5: 801C     	LOAD	A,[SRCPNTR]
04/B6: 841B     	LOAD	B,[SRCBANK]
04/B7: 5000     	ADDI	A,0
04/B8: F40C     	BRN	3F
04/BA:          	
04/B9:          	; ALRIGHT, LETS JUST GRAB A CHARACTER FROM THE BANK
04/B9: A480     1:	STORE	[DBANK],B
04/BA: 9800     	LOADF	C,[A]
04/BB: 3400     	LOADI	B,0
04/BC: A480     	STORE	[DBANK],B
04/BE:          	
04/BD:          	; INCREMENT POINTER
04/BD: 5001     	ADDI	A,1
04/BE: A01C     	STORE	[SRCPNTR],A
04/C0:          	
04/BF:          	; CAN WE RETURN?
04/BF: A81E     2:	STORE	[SRCCHAR],C
04/C0: 5800     	ADDI	C,0
04/C1: F71C     	BRNZ	9F
04/C2: 380A     	LOADI	C,NEWLINE
04/C3: A81E     	STORE	[SRCCHAR],C
04/C4: FF15     	JUMP	7F
04/C6:          	
04/C5:          	; INCREMENT BANK
04/C5: 3000     3:	LOADI	A,0
04/C6: 5401     	ADDI	B,1
04/C7: A41B     	STORE	[SRCBANK],B
04/C8: 3807     	LOADI	C,SRC_B+4
04/C9: D600     	CMP	B,C
04/CA: F1EE     	BRB	1B
04/CC:          	
04/CB:          	; READ A NEW BLOCK
04/CB: 801A     	LOAD	A,[SRCBLK]
04/CC: 5001     	ADDI	A,1
04/CD: F00C     	BRC	7F
04/CE: A01A     	STORE	[SRCBLK],A
04/CF: 3804     	LOADI	C,BI
04/D0: BB01     	STOREF	[D+1],C
04/D1: 3408     	LOADI	B,S_READ
04/D2: 38D4     	LOADI	C,@+2
04/D3: FF30     	JUMP	SYSCALL
04/D4: 5000     	ADDI	A,0
04/D5: F704     	BRNZ	7F
04/D7:          	
04/D6:          	; GO READ A CHARACTER NOW
04/D6: 3000     	LOADI	A,0
04/D7: 3403     	LOADI	B,SRC_B
04/D8: A41B     	STORE	[SRCBANK],B
04/D9: FFDF     	JUMP	1B
04/DB:          
04/DA:          	; WE ARE DONE WITH THIS FILE
04/DA:          	; MOVE ON TO THE NEXT
04/DA: 5C02     7:	ADDI	D,2
04/DB: FFAB     	JUMP	NEXTSRC
04/DD:          	
04/DC:          	; STORE A ZERO IN SRCCHAR
04/DC: 3000     8:	LOADI	A,0
04/DD: A01E     	STORE	[SRCCHAR],A
04/DF:          	
04/DE:          	; RETURN
04/DE: 5C02     9:	ADDI	D,2
04/DF: FF23     	JUMP	IRET
04/E1:          	
04/E0:          BI	= BI+1
04/E0:          .TEXT
04/E0:          .BANK	BI
05/80:          TOK1_B	= BI
05/80:          	
05/80:          	; SHADOW OF NEXTTOK
05/80: 7C02     NEXTTOA:SUBI	D,2
05/82:          
05/81:          	; SET RETURN ADDRESS
05/81: 3805     	LOADI	C,BI
05/82: BB01     	STOREF	[D+1],C
05/84:          	
05/83:          	; DO WE NEED TO INCREMENT THE LINE?
05/83: 801D     	LOAD	A,[SRCSTAT]
05/84: 5001     	ADDI	A,1
05/85: F708     	BRNZ	0F
05/86: A01D     	STORE	[SRCSTAT],A
05/88:          	
05/87:          	; YES WE DO
05/87: 802D     	LOAD	A,[LINENUM+1]
05/88: 5001     	ADDI	A,1
05/89: A02D     	STORE	[LINENUM+1],A
05/8A: F103     	BRNC	0F
05/8B: 802C     	LOAD	A,[LINENUM]
05/8C: 5001     	ADDI	A,1
05/8D: A02C     	STORE	[LINENUM],A
05/8F:          
05/8E:          	; CHECK THE NEXT CHARACTER IN THE STREAM
05/8E: 801E     0:	LOAD	A,[SRCCHAR]
05/8F: 5000     	ADDI	A,0
05/90: F668     	BRZ	8F
05/91: F43C     	BRN	5F
05/93:          
05/92:          	; IS IT A NEWLINE?
05/92: 340A     	LOADI	B,NEWLINE
05/93: D100     	CMP	A,B
05/94: F703     	BRNZ	1F
05/96:          	
05/95:          	; NEW LINE
05/95: 34FF     	LOADI	B,0XFF
05/96: A41D     	STORE	[SRCSTAT],B
05/97: FF61     	JUMP	8F
05/99:          
05/98:          	; CHECK STATE STUFF
05/98: 881D     1:	LOAD	C,[SRCSTAT]
05/99: 343B     	LOADI	B,SEMICOL
05/9A: D600     	CMP	B,C
05/9B: F632     	BRZ	5F
05/9C: 5800     	ADDI	C,0
05/9D: F71A     	BRNZ	4F
05/9F:          
05/9E:          	; IS IT WHITESPACE?
05/9E: 3420     	LOADI	B,0X20
05/9F: D100     	CMP	A,B
05/A0: F92D     	BRBE	5F
05/A2:          	
05/A1:          	; IS IT A NUMBER?
05/A1: 3430     	LOADI	B,'0'
05/A2: D100     	CMP	A,B
05/A3: F105     	BRB	2F
05/A4: 3439     	LOADI	B,'9'
05/A5: D100     	CMP	A,B
05/A6: F802     	BRA	2F
05/A8:          	
05/A7:          	; YEP
05/A7: 3481     	LOADI	B,NUMERIC
05/A8: FF2A     	JUMP	0F
05/AA:          	
05/A9:          	; NOPE, IS IT IS LETTER?
05/A9:          	; FIRST CONVERT FROM LOWERCASE TO UPPERCASE
05/A9: 3461     2:	LOADI	B,'A'+0X20
05/AA: D100     	CMP	A,B
05/AB: F104     	BRB	3F
05/AC: 347A     	LOADI	B,'Z'+0X20
05/AD: D100     	CMP	A,B
05/AE: F801     	BRA	3F
05/AF: 7020     	SUBI	A,0X20
05/B1:          	
05/B0:          	; CHECK FOR UPPER CASE LETTER
05/B0: 3441     3:	LOADI	B,'A'
05/B1: D100     	CMP	A,B
05/B2: F105     	BRB	4F
05/B3: 345A     	LOADI	B,'Z'
05/B4: D100     	CMP	A,B
05/B5: F802     	BRA	4F
05/B7:          	
05/B6:          	; YEP
05/B6: 3480     	LOADI	B,SYMBOL
05/B7: FF1B     	JUMP	0F
05/B9:          	
05/B8:          	; NOPE, PROCESS AS A LITERAL
05/B8: 881D     4:	LOAD	C,[SRCSTAT]
05/B9: D200     	CMP	A,C
05/BA: F703     	BRNZ	4F
05/BC:          	
05/BB:          	; END OF ENCLOSED SECTION
05/BB: 3800     	LOADI	C,0
05/BC: A81D     	STORE	[SRCSTAT],C
05/BD: FF3B     	JUMP	8F
05/BF:          	
05/BE:          	; IF ENCLOSED, JUST SEND DIRECTLY TO OUTPUT
05/BE: 5800     4:	ADDI	C,0
05/BF: F739     	BRNZ	8F
05/C1:          
05/C0:          	; IS IT A COMMENT?
05/C0: 343B     	LOADI	B,SEMICOL
05/C1: D100     	CMP	A,B
05/C2: F702     	BRNZ	4F
05/C4:          	
05/C3:          	; SET COMMENT MODE
05/C3: A01D     	STORE	[SRCSTAT],A
05/C4: FF09     	JUMP	5F
05/C6:          
05/C5:          	; IS IT A SINGLE OR DOUBLE QUOTE?
05/C5: 3427     4:	LOADI	B,SQUOTE
05/C6: D100     	CMP	A,B
05/C7: F604     	BRZ	4F
05/C8: 3422     	LOADI	B,DQUOTE
05/C9: D100     	CMP	A,B
05/CA: F601     	BRZ	4F
05/CB: FF2D     	JUMP	8F
05/CD:          
05/CC:          	; YES IT IS, SET THE STATE AND EXIT
05/CC: A01D     4:	STORE	[SRCSTAT],A
05/CD: FF2B     	JUMP	8F
05/CF:          	
05/CE:          	; GRAB A NEW CHARACTER FROM THE STREAM
05/CE: 388E     5:	LOADI	C,0B
05/CF: BB00     	STOREF	[D],C
05/D0: 3404     	LOADI	B,TOK0_B
05/D1: 38B0     	LOADI	C,NEXTCHR
05/D2: FF2F     	JUMP	INDIR
05/D4:          
05/D3:          	; COPY THE SYMBOL OR NUMERIC INTO THE BUFFER
05/D3: A418     0:	STORE	[TOKEN],B
05/D5:          
05/D4:          	; PREPARE TO COPY
05/D4: 3820     	LOADI	C,TBUF
05/D6:          	
05/D5:          	; STORE CHARACTER
05/D5: B200     1:	STOREF	[C],A
05/D6: A81F     	STORE	[BUFPNTR],C
05/D8:          
05/D7:          	; GET NEXT CHARACTER
05/D7: 38DC     2:	LOADI	C,@+5
05/D8: BB00     	STOREF	[D],C
05/D9: 3404     	LOADI	B,TOK0_B
05/DA: 38B0     	LOADI	C,NEXTCHR
05/DB: FF26     	JUMP	INDIR
05/DD:          	
05/DC:          	; CHECK CHARACTER TYPE
05/DC: 881F     	LOAD	C,[BUFPNTR]
05/DD: 801E     	LOAD	A,[SRCCHAR]
05/DF:          	
05/DE:          	; IS IT A NUMBER?
05/DE: 3430     	LOADI	B,'0'
05/DF: D100     	CMP	A,B
05/E0: F115     	BRB	7F
05/E1: 3439     	LOADI	B,'9'
05/E2: D100     	CMP	A,B
05/E3: F90D     	BRBE	4F
05/E5:          	
05/E4:          	; NOPE, IS IT IS LETTER?
05/E4:          	; FIRST CONVERT FROM LOWERCASE TO UPPERCASE
05/E4: 3461     	LOADI	B,'A'+0X20
05/E5: D100     	CMP	A,B
05/E6: F104     	BRB	3F
05/E7: 347A     	LOADI	B,'Z'+0X20
05/E8: D100     	CMP	A,B
05/E9: F801     	BRA	3F
05/EA: 7020     	SUBI	A,0X20
05/EC:          	
05/EB:          	; CHECK FOR UPPER CASE LETTER
05/EB: 3441     3:	LOADI	B,'A'
05/EC: D100     	CMP	A,B
05/ED: F108     	BRB	7F
05/EE: 345A     	LOADI	B,'Z'
05/EF: D100     	CMP	A,B
05/F0: F805     	BRA	7F
05/F2:          	
05/F1:          	; ADD TO THE STRING
05/F1: 5801     4:	ADDI	C,1
05/F2: 342A     	LOADI	B,TBUFEND
05/F3: D600     	CMP	B,C
05/F4: F6E2     	BRZ	2B
05/F5: FFDF     	JUMP	1B
05/F7:          	
05/F6:          	; TERMINATE
05/F6: 3000     7:	LOADI	A,0
05/F7: B201     	STOREF	[C+1],A
05/F8: FF03     	JUMP	9F
05/FA:          	
05/F9:          	; SAVE TOKEN TYPE AND CONSUME THE SRCCHAR
05/F9: 3480     8:	LOADI	B,0X80
05/FA: A41E     	STORE	[SRCCHAR],B
05/FB: A018     	STORE	[TOKEN],A
05/FD:          	
05/FC:          	; RETURN
05/FC: 5C02     9:	ADDI	D,2
05/FD: FF05     	JUMP	IRET
05/FF:          	
05/FE:          ; AS2.S
05/FE:          ; EXPRESSION HANDLING
05/FE:          ; GAVIN TERSTEEG, 2024
05/FE:          ; SDMAY24-14
05/FE:          
05/FE:          	; PARSE A NUMERIC VALUE
05/FE:          	; THE VALUE SHOULD BE FOUND IN 
05/FE:          PARSENU:
