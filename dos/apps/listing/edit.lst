00/00:          ; DOSDEF.S
01/80:          ; THIS FILE CONTAINS IMPORTANT DEFINES USED IN DOS/281
01/80:          
01/80:          ; BIOS CALLS
01/80:          REBOOT	= 0
01/80:          INDIR	= 1
01/80:          IRET	= 2
01/80:          SYSCALL	= 3
01/80:          SYSJUMP	= 4
01/80:          PRGM	= 5
01/80:          IWRITE	= 6
01/80:          
01/80:          HALT	= 0X7F
01/80:          
01/80:          ; SYSTEM CALLS
01/80:          S_EXIT	= 0
01/80:          S_PUTC	= 1
01/80:          S_GETC	= 2
01/80:          S_STAT	= 3
01/80:          S_PUTS	= 4
01/80:          S_INPUT	= 5
01/80:          S_OPEN	= 6
01/80:          S_CLOSE	= 7
01/80:          S_READ	= 8
01/80:          S_WRITE	= 9
01/80:          S_FSRCH	= 10
01/80:          S_NEXT	= 11
01/80:          S_DELET	= 12
01/80:          S_CREAT	= 13
01/80:          S_FREE	= 14
01/80:          S_EXEC	= 15
01/80:          
01/80:          ; MEMORY AREAS
01/80:          CF_NAME	= 0X60
01/80:          CF_SIZE	= 0X68
01/80:          CF_USR	= 0X6A
01/80:          DFT_USR	= 0X6B
01/80:          ARG_BNK	= 0X6C
01/80:          BD_FREE	= 0X6E
01/80:          MAX_IB	= 0X70
01/80:          MAX_DB	= 0X71
01/80:          CMDL_B	= 0X72
01/80:          AUTO_B	= 0X73
01/80:          KERNMEM	= 0X78
01/80:          BIOSMEM	= 0X7C
01/80:          
01/80:          ; DATA BANK ADDRESS
01/80:          DBANK	= 0X80		
01/80:          
01/80:          ; EDIT.S
01/80:          ; SIMPLE TEXT EDITOR
01/80:          
01/80:          ; BANK ALLOCATION STUFF
01/80:          BI	= 1
01/80:          BD	= 1
01/80:          
01/80:          .TEXT
01/80:          .BANK	BI
01/80:          CORE0_B	= BI
01/80:          
01/80:          	; START BY PROCESSING THE ARGUMENTS
01/80: 3000     START:	LOADI	A,0
01/81: A080     	STORE	[DBANK],A
01/83:          	
01/82:          	; SET UP STACK
01/82: 3C5E     	LOADI	D,0X60-2
01/84:          	
01/83:          	; SYSCALL RETURN BANK
01/83: 3801     	LOADI	C,BI
01/84: BB01     	STOREF	[D+1],C
01/86:          	
01/85:          	; INIT MEMORY
01/85: 388A     	LOADI	C,@+5
01/86: BB00     	STOREF	[D],C
01/87: 3402     	LOADI	B,MEM0_B
01/88: 3880     	LOADI	C,MINIT
01/89: FF77     	JUMP	INDIR
01/8B:          	
01/8A:          	; SAVE STACK
01/8A: AC07     	STORE	[SPARK],D
01/8C:          	
01/8B:          	; GO TO ARGUMENT BANK
01/8B: 8072     	LOAD	A,[CMDL_B]
01/8C: A06C     	STORE	[ARG_BNK],A
01/8D: A080     	STORE	[DBANK],A
01/8F:          	
01/8E:          	; SET UP POINTER
01/8E: 3800     	LOADI	C,0
01/90:          	
01/8F:          	; SKIP THE INITIAL COMMAND
01/8F: 9200     0:	LOADF	A,[C]
01/90: 3420     	LOADI	B,0X20
01/91: D100     	CMP	A,B
01/92: F902     	BRBE	1F
01/93: 5801     	ADDI	C,1
01/94: FFFA     	JUMP	0B
01/96:          
01/95:          	; LOOK FOR THE FIRST ARGUMENT
01/95: 9200     1:	LOADF	A,[C]
01/96: 5000     	ADDI	A,0
01/97: F604     	BRZ	2F
01/98: D100     	CMP	A,B
01/99: F805     	BRA	OPENARG
01/9A: 5801     	ADDI	C,1
01/9B: FFF9     	JUMP	1B
01/9D:          	
01/9C:          	; NO ARGUMENT, EMPTY BUFFER
01/9C: 3000     2:	LOADI	A,0
01/9D: A080     	STORE	[DBANK],A
01/9E: FF17     	JUMP	DONE
01/A0:          
01/9F:          	
01/9F:          	; THERE IS AN ARG, TRY AND OPEN IT
01/9F: 3C10     OPENARG:LOADI	D,FNAME
01/A0: 9200     0:	LOADF	A,[C]
01/A1: 3400     	LOADI	B,0
01/A2: A480     	STORE	[DBANK],B
01/A3: B300     	STOREF	[D],A
01/A4: 7020     	SUBI	A,0X20
01/A5: F908     	BRBE	1F
01/A6: 5801     	ADDI	C,1
01/A7: 5C01     	ADDI	D,1
01/A8: 341F     	LOADI	B,FNAME+15
01/A9: DD00     	CMP	D,B
01/AA: F003     	BRAE	1F
01/AB: 8472     	LOAD	B,[CMDL_B]
01/AC: A480     	STORE	[DBANK],B
01/AD: FFF2     	JUMP	0B
01/AF:          	
01/AE:          	; TERMINATE STRING AND OPEN FILE
01/AE: 3000     1:	LOADI	A,0
01/AF: B300     	STOREF	[D],A
01/B0: 8C07     	LOAD	D,[SPARK]
01/B2:          	
01/B1:          	; OPEN THE FILE
01/B1: 38B6     	LOADI	C,@+5
01/B2: BB00     	STOREF	[D],C
01/B3: 3403     	LOADI	B,FIO0_B
01/B4: 3880     	LOADI	C,FREAD
01/B5: FF4B     	JUMP	INDIR
01/B7:          
01/B6:          
01/B6:          	; EXIT PROGRAM
01/B6: 3400     DONE:	LOADI	B,S_EXIT
01/B7: FF4C     	JUMP	SYSJUMP
01/B9:          
01/B8:          	; BANK IS DONE, MOVE ON TO THE NEXT
01/B8:          BI	= BI+1
01/B8:          .TEXT
01/B8:          .BANK	BI
02/80:          MEM0_B	= BI
02/80:          
02/80:          	; MEMORY INIT
02/80:          	; DIVIDE THE HEAP INTO BLOCKS OF 32 BYTES, AND ADD IT
02/80:          	; TO THE FREE TABLE
02/80:          	; USES: A, B, C
02/80: 3806     MINIT:	LOADI	C,HEAP
02/81: 8471     	LOAD	B,[MAX_DB]
02/83:          	
02/82:          	; SET THE START OF THE FREE BLOCK LIST
02/82: 3000     	LOADI	A,0
02/83: A80C     	STORE	[FREETAB],C
02/84: A00D     	STORE	[FREETAB+1],A
02/86:          	
02/85:          	; MOVE TO BANK
02/85: A880     0:	STORE	[DBANK],C
02/86: 3020     	LOADI	A,32
02/88:          	
02/87:          	; WRITE FIRST 3 HEADERS
02/87: B0E1     1:	STOREF	[A+1-32],A
02/88: B8E0     	STOREF	[A+0-32],C
02/89: 5020     	ADDI	A,32
02/8A: F5FC     	BRNN	1B
02/8C:          	
02/8B:          	; WRITE 4TH HEADER
02/8B: 3000     2:	LOADI	A,0
02/8C: A061     	STORE	[32*3+1],A
02/8D: 5801     	ADDI	C,1
02/8E: D900     	CMP	C,B
02/8F: F802     	BRA	3F
02/90: A860     	STORE	[32*3],C
02/91: FFF3     	JUMP	0B
02/93:          	
02/92:          	; STORE BANK ZERO TO INDICATE END OF LIST
02/92: A060     3:	STORE	[32*3],A
02/93: A080     	STORE	[DBANK],A
02/94: FF6D     	JUMP	IRET
02/96:          	
02/95:          	
02/95:          	; ALLOCATE A BLOCK OF MEMORY
02/95:          	; BLOCK WILL BE LINKED ONTO THE CURRENT BLOCK IN [CBLOCK]
02/95:          	; THEN IT WILL BE RETURN IN [CBLOCK]
02/95:          	; RETURNS A = 0XFF OUT OF BLOCKS, A = 0X00 OTHERWISE
02/95:          	; USES: A, B, C
02/95: AC07     MALLOC:	STORE	[SPARK],D
02/96: 840C     	LOAD	B,[FREETAB]
02/98:          	
02/97:          	; MAKE SURE THE NEXT BLOCK ISN'T NULL
02/97: 5400     	ADDI	B,0
02/98: 30FF     	LOADI	A,0XFF
02/99: F668     	BRZ	IRET
02/9B:          	
02/9A:          	; STORE THE BLOCK ADDRESS IN LBLOCK
02/9A: 880D     	LOAD	C,[FREETAB+1]
02/9B: A40A     	STORE	[LBLOCK],B
02/9C: A80B     	STORE	[LBLOCK+1],C
02/9E:          	
02/9D:          	; MOVE THE NEXT BLOCK INTO FREETAB POINTER
02/9D: A480     	STORE	[DBANK],B
02/9E: 9200     	LOADF	A,[C]
02/9F: 9601     	LOADF	B,[C+1]
02/A0: 3C00     	LOADI	D,0
02/A1: BE00     	STOREF	[C],D
02/A2: BE01     	STOREF	[C+1],D
02/A3: AC80     	STORE	[DBANK],D
02/A4: A00C     	STORE	[FREETAB],A
02/A5: A40D     	STORE	[FREETAB+1],B
02/A7:          	
02/A6:          	; RETURN TO USER BANK
02/A6: 3000     	LOADI	A,0
02/A7: A080     	STORE	[DBANK],A
02/A9:          	
02/A8:          	; SET THE MEMORY BLOCK POINTER
02/A8: 800B     	LOAD	A,[LBLOCK+1]
02/A9: 5003     	ADDI	A,3
02/AA: A003     	STORE	[MB_PNTR],A
02/AB: 501D     	ADDI	A,32-3
02/AC: A004     	STORE	[MB_END],A
02/AD: 3000     	LOADI	A,0
02/AE: A006     	STORE	[LINES],A
02/B0:          	
02/AF:          	; RESTORE STACK AND LINK
02/AF: 8C07     	LOAD	D,[SPARK]
02/B1:          	
02/B0:          	
02/B0:          	; LINK THE BLOCK IN LBLOCK ONTO CBLOCK
02/B0:          	; THE NEXT BLOCK OF CBLOCK WILL BECOME
02/B0:          	; THE NEXT BLOCK OF LBLOCK
02/B0:          	; AFTER THAT, CBLOCK WILL BECOME LBLOCK
02/B0:          	; RETURNS A = 0X00
02/B0:          	; USES: A, B, C
02/B0: AC07     LINK:	STORE	[SPARK],D
02/B2:          	
02/B1:          	; GET ADDRESS OF CBLOCK AND LBLOCK
02/B1: 8008     	LOAD	A,[CBLOCK]
02/B2: 8409     	LOAD	B,[CBLOCK+1]
02/B3: 880A     	LOAD	C,[LBLOCK]
02/B4: 8C0B     	LOAD	D,[LBLOCK+1]
02/B6:          	
02/B5:          	; GRAB THE NEXT ADDRESS OF CBLOCK AND SET IT IN LBLOCK
02/B5: A080     	STORE	[DBANK],A
02/B6: 9100     	LOADF	A,[B]
02/B7: 9501     	LOADF	B,[B+1]
02/B8: A880     	STORE	[DBANK],C
02/B9: B300     	STOREF	[D],A
02/BA: B701     	STOREF	[D+1],B
02/BB: 3000     	LOADI	A,0
02/BC: A080     	STORE	[DBANK],A
02/BE:          	
02/BD:          	; RE-GRAB ADDRESS OF CBLOCK
02/BD: 8008     	LOAD	A,[CBLOCK]
02/BE: 8409     	LOAD	B,[CBLOCK+1]
02/C0:          	
02/BF:          	; SET CBLOCK NEXT TO LBLOCK
02/BF: A080     	STORE	[DBANK],A
02/C0: B900     	STOREF	[B],C
02/C1: BD01     	STOREF	[B+1],D
02/C3:          	
02/C2:          	; DONE, RESTORE STACK AND RETURN
02/C2: 3000     	LOADI	A,0
02/C3: A080     	STORE	[DBANK],A
02/C4: 8C07     	LOAD	D,[SPARK]
02/C5: FF3C     	JUMP	IRET
02/C7:          
02/C6:          
02/C6:          	
02/C6:          	; PLACES THE BLOCK IN [CBLOCK] ONTO THE FREE
02/C6:          	; TABLE
02/C6:          	; USES: A, B, C
02/C6: AC07     FREE:	STORE	[SPARK],D
02/C8:          
02/C7:          	; GRAB ADDRESSES OF THE FREETAB AND CBLOCK
02/C7: 8008     	LOAD	A,[CBLOCK]
02/C8: 8409     	LOAD	B,[CBLOCK+1]
02/C9: 880C     	LOAD	C,[FREETAB]
02/CA: 8C0D     	LOAD	D,[FREETAB+1]
02/CC:          	
02/CB:          	; LINK REST OF FREETAB AFTER CBLOCK
02/CB: A080     	STORE	[DBANK],A
02/CC: B900     	STOREF	[B],C
02/CD: BD01     	STOREF	[B+1],D
02/CF:          	
02/CE:          	; SET CBLOCK AS BEGINNING OF FREE TABLE
02/CE: 3800     	LOADI	C,0
02/CF: A880     	STORE	[DBANK],C
02/D0: A00C     	STORE	[FREETAB],A
02/D1: A40D     	STORE	[FREETAB+1],B
02/D3:          	
02/D2:          	; RESTORE STACK AND RETURN
02/D2: 8C07     	LOAD	D,[SPARK]
02/D3: FF2E     	JUMP	IRET
02/D5:          	
02/D4:          	; BANK IS DONE, MOVE ON TO THE NEXT
02/D4:          BI	= BI+1
02/D4:          .TEXT
02/D4:          .BANK	BI
03/80:          FIO0_B	= BI
03/80:          	
03/80:          	; READS A FILE INTO THE BUFFER
03/80:          	; [FNAME] = FILE TO OPEN
03/80:          	; RETURNS A = 0XFF IF ERROR, A = 0X00 RETURN OTHERWISE
03/80:          	; USES: A, B, C
03/80: 7C02     FREAD:	SUBI	D,2
03/82:          
03/81:          	; SET FIRST FLAG
03/81: 380A     	LOADI	C,0X0A
03/82: A804     	STORE	[FIRST],C
03/84:          	
03/83:          	; SET OPEN TARGET
03/83: 3000     	LOADI	A,0
03/84: A06C     	STORE	[ARG_BNK],A
03/85: 3010     	LOADI	A,FNAME
03/87:          	
03/86:          	; ATTEMPT TO OPEN FILE
03/86: 3803     	LOADI	C,BI
03/87: BB01     	STOREF	[D+1],C
03/88: 3406     	LOADI	B,S_OPEN
03/89: 388B     	LOADI	C,@+2
03/8A: FF78     	JUMP	SYSCALL
03/8C:          	
03/8B:          	; CHECK RESULT OF OPERATION
03/8B: 5000     	ADDI	A,0
03/8C: F712     	BRNZ	9F
03/8E:          	
03/8D:          	; RE-INITALIZE MEMORY
03/8D: 3892     	LOADI	C,@+5
03/8E: BB00     	STOREF	[D],C
03/8F: 3402     	LOADI	B,MEM0_B
03/90: 3880     	LOADI	C,MINIT
03/91: FF6F     	JUMP	INDIR
03/93:          	
03/92:          	; MALLOC FIRST BLOCK
03/92: 3000     	LOADI	A,0
03/93: A008     	STORE	[CBLOCK],A
03/94: A00E     	STORE	[LINETAB],A
03/95: A00F     	STORE	[LINETAB+1],A
03/96: 300E     	LOADI	A,LINETAB
03/97: A009     	STORE	[CBLOCK+1],A
03/99:          	
03/98:          	; SET RETURN TO FREADA
03/98: 3880     	LOADI	C,FREADA
03/99: BB00     	STOREF	[D],C
03/9A: 3804     	LOADI	C,FIO1_B
03/9B: BB01     	STOREF	[D+1],C
03/9C: 3402     	LOADI	B,MEM0_B
03/9D: 3895     	LOADI	C,MALLOC
03/9E: FF62     	JUMP	INDIR
03/A0:          
03/9F:          	; RESTORE STACK AND RETURN
03/9F: 5C02     9:	ADDI	D,2
03/A0: FF61     	JUMP	IRET
03/A2:          
03/A1:          
03/A1:          	; BANK IS DONE, MOVE ON TO THE NEXT
03/A1:          BI	= BI+1
03/A1:          .TEXT
03/A1:          .BANK	BI
04/80:          FIO1_B	= BI
04/80:          
04/80:          	; CONTINUED FREAD CODE
04/80:          	; RESET BLOCK READ IN STATE
04/80: 3002     FREADA:	LOADI	A,BUF_B
04/81: A06C     	STORE	[ARG_BNK],A
04/82: 3000     	LOADI	A,0
04/84:          	
04/83:          	; READ THE BLOCK
04/83: 3804     	LOADI	C,BI
04/84: BB01     	STOREF	[D+1],C
04/85: A000     0:	STORE	[BLOCK],A
04/86: 3408     	LOADI	B,S_READ
04/87: 3889     	LOADI	C,@+2
04/88: FF7A     	JUMP	SYSCALL
04/8A:          
04/89:          	; DID IT WORK?
04/89: 5000     	ADDI	A,0
04/8A: F749     	BRNZ	0F
04/8C:          	
04/8B:          	; RESET THE BLOCK READ STATE
04/8B: 3002     	LOADI	A,BUF_B
04/8C: A001     	STORE	[BANK],A
04/8D: 3400     	LOADI	B,0
04/8F:          	
04/8E:          	; CHECK FIRST FLAG
04/8E: 8804     	LOAD	C,[FIRST]
04/8F: A404     	STORE	[FIRST],B
04/90: 7401     	SUBI	B,1
04/91: 5800     	ADDI	C,0
04/92: F706     	BRNZ	2F
04/94:          	
04/93:          	; SET POINTER TO ZERO
04/93: 5401     	ADDI	B,1
04/95:          	
04/94:          	; READ CHARACTER FROM BLOCK
04/94: A001     1:	STORE	[BANK],A
04/95: A080     	STORE	[DBANK],A
04/96: 9900     	LOADF	C,[B]
04/97: 3000     	LOADI	A,0
04/98: A080     	STORE	[DBANK],A
04/9A:          	
04/99:          	; PROCESS CHARACTER
04/99:          	; C = CHARACTER
04/99: A402     2:	STORE	[POINTER],B
04/9A: 3420     	LOADI	B,0X20
04/9B: D900     	CMP	C,B
04/9C: F104     	BRB	3F
04/9D: 3480     	LOADI	B,0X80
04/9E: D900     	CMP	C,B
04/9F: F10D     	BRB	6F
04/A0: FF27     	JUMP	8F
04/A2:          	
04/A1:          	; CONTROL CHARACTERS
04/A1: 3409     3:	LOADI	B,0X09	; TAB CHARACTER
04/A2: D900     	CMP	C,B
04/A3: F609     	BRZ	6F
04/A4: 5800     	ADDI	C,0	; NULL CHARACTER
04/A5: F62E     	BRZ	0F
04/A6: 340A     	LOADI	B,0X0A	; NEW LINE CHARACTER
04/A7: D900     	CMP	C,B
04/A8: F71F     	BRNZ	8F
04/AA:          	
04/A9:          	; INCREMENT LINE
04/A9: 8406     	LOAD	B,[LINES]
04/AA: 5401     	ADDI	B,1
04/AB: A406     	STORE	[LINES],B
04/AC: 3800     	LOADI	C,0
04/AE:          	
04/AD:          	; STORE VALUE IN MEMORY BLOCK
04/AD: 8003     6:	LOAD	A,[MB_PNTR]
04/AE: 8404     	LOAD	B,[MB_END]
04/AF: D100     	CMP	A,B
04/B0: 8408     	LOAD	B,[CBLOCK]
04/B1: F607     	BRZ	7F
04/B2: A480     	STORE	[DBANK],B
04/B3: B800     	STOREF	[A],C
04/B4: 3400     	LOADI	B,0
04/B5: A480     	STORE	[DBANK],B
04/B6: 5001     	ADDI	A,1
04/B7: A003     	STORE	[MB_PNTR],A
04/B8: FF0F     	JUMP	8F
04/BA:          
04/B9:          	; FINISH BLOCK
04/B9: A805     7:	STORE	[CHAR],C
04/BA: 8009     	LOAD	A,[CBLOCK+1]
04/BB: 8806     	LOAD	C,[LINES]
04/BC: A480     	STORE	[DBANK],B
04/BD: B802     	STOREF	[A+2],C
04/BE: 3400     	LOADI	B,0
04/BF: A480     	STORE	[DBANK],B
04/C0: A406     	STORE	[LINES],B
04/C2:          
04/C1:          	; ALLOC ANOTHER BLOCK
04/C1: 38C6     	LOADI	C,@+5
04/C2: BB00     	STOREF	[D],C
04/C3: 3402     	LOADI	B,MEM0_B
04/C4: 3895     	LOADI	C,MALLOC
04/C5: FF3B     	JUMP	INDIR
04/C7:          	
04/C6:          	; RESTORE CHARACTER
04/C6: 8805     	LOAD	C,[CHAR]
04/C7: FFE5     	JUMP	6B
04/C9:          	
04/C8:          	; INCREMENT BLOCK POINTER
04/C8: 8001     8:	LOAD	A,[BANK]
04/C9: 8402     	LOAD	B,[POINTER]
04/CA: 5401     	ADDI	B,1
04/CB: F5C8     	BRNN	1B
04/CC: 3400     	LOADI	B,0
04/CD: 5001     	ADDI	A,1
04/CE: 3806     	LOADI	C,BUF_B+4 
04/CF: D200     	CMP	A,C
04/D0: F7C3     	BRNZ	1B
04/D1: 8000     	LOAD	A,[BLOCK]
04/D2: 5001     	ADDI	A,1
04/D3: F7B1     	BRNZ	0B
04/D5:          	
04/D4:          	; TERMINATE THE RECORD
04/D4: 8003     0:	LOAD	A,[MB_PNTR]
04/D5: 8404     	LOAD	B,[MB_END]
04/D6: 8806     	LOAD	C,[LINES]
04/D7: D100     	CMP	A,B
04/D8: 8408     	LOAD	B,[CBLOCK]
04/D9: A480     	STORE	[DBANK],B
04/DA: F102     	BRB	1F
04/DB: 34FF     	LOADI	B,0XFF
04/DC: B400     	STOREF	[A],B
04/DD: A8E6     1:	STORE	[MB_END+2-32],C
04/DF:          	
04/DE:          	; RESTORE STACK AND RETURN
04/DE: 3000     	LOADI	A,0
04/DF: 3400     9:	LOADI	B,0
04/E0: A480     	STORE	[DBANK],B
04/E1: 5C02     	ADDI	D,2
04/E2: FF1F     	JUMP	IRET
04/E4:          
04/E3:          	; ZERO BANK
04/E3:          .BANK	0
00/80:          .BSS
00/80:          
00/00:          	; MISC CONTEXT INFORMATION
00/00: 00       .DEFL BYTE BLOCK	0
00/01: 00       .DEFL BYTE BANK		0
00/02: 00       .DEFL BYTE POINTER	0
00/03:          
00/03:          	; MEMORY BLOCK PARSE INFORMATION
00/03: 00       .DEFL BYTE MB_PNTR	0
00/04:          .DEFL BYTE MB_END
00/04:          
00/04:          	; FIRST CHARACTER?
00/04: 00       .DEFL BYTE FIRST	0
00/05:          
00/05:          	; CURRENT CHARACTER
00/05: 00       .DEFL BYTE CHAR		0
00/06:          
00/06:          	; LINE COUNT
00/06: 00       .DEFL BYTE LINES	0
00/07:          
00/07:          	; STACK PARKING SPACE
00/07: 00       .DEFL BYTE SPARK	0
00/08:          
00/08:          	; CURRENT BLOCK OF MEMORY TO WORK ON
00/08: 0000     .DEFL BYTE CBLOCK	0,0
00/0A:          
00/0A:          	; BLOCK TO BE LINKED ONTO THE CURRENT BLOCK
00/0A: 0000     .DEFL BYTE LBLOCK	0,0
00/0C:          
00/0C:          	; FREE MEMORY TABLE
00/0C: 0000     .DEFL BYTE FREETAB	0,0
00/0E:          
00/0E:          	; LINE EDITOR CONTENT
00/0E: 0000     .DEFL BYTE LINETAB	0,0
00/10:          
00/10:          	; CURRENT FILE NAME
00/10: 00000000
       00000000 .DEFL BYTE FNAME	0,0,0,0,0,0,0,0,
00/18: 00000000
       00000000 			0,0,0,0,0,0,0,0
00/20:          
00/20:          	; START OF DEFINED MEMORY
00/20:          .BANK	BD
01/00:          .DATA
01/00:          STR0_B = BD	; STRING BANK
01/00:          
01/00:          	; ERROR MESSAGES
01/00: 43414E27
       54204F50
       454E2046
       494C450A
       0D00     .DEFL BYTE ERROR0	"CAN'T OPEN FILE",0X0A,0X0D,0
01/12:          
01/12:          	; BANK IS DONE, MOVE ON TO THE NEXT
01/12:          BD	= BD+1
01/12:          BUF_B	= BD	; BUFFER BANK
01/12:          
01/12:          	; BANK IS DONE, MOVE ON TO THE NEXT
01/12:          BD	= BD+4
01/12:          HEAP	= BD	; THE REST OF MEMORY IS HEAP
