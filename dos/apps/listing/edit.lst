00/00:          ; DOSDEF.S
01/80:          ; THIS FILE CONTAINS IMPORTANT DEFINES USED IN DOS/281
01/80:          
01/80:          ; BIOS CALLS
01/80:          REBOOT	= 0
01/80:          INDIR	= 1
01/80:          IRET	= 2
01/80:          SYSCALL	= 3
01/80:          SYSJUMP	= 4
01/80:          PRGM	= 5
01/80:          IWRITE	= 6
01/80:          
01/80:          HALT	= 0X7F
01/80:          
01/80:          ; SYSTEM CALLS
01/80:          S_EXIT	= 0
01/80:          S_PUTC	= 1
01/80:          S_GETC	= 2
01/80:          S_STAT	= 3
01/80:          S_PUTS	= 4
01/80:          S_INPUT	= 5
01/80:          S_OPEN	= 6
01/80:          S_CLOSE	= 7
01/80:          S_READ	= 8
01/80:          S_WRITE	= 9
01/80:          S_FSRCH	= 10
01/80:          S_NEXT	= 11
01/80:          S_DELET	= 12
01/80:          S_CREAT	= 13
01/80:          S_FREE	= 14
01/80:          S_EXEC	= 15
01/80:          
01/80:          ; MEMORY AREAS
01/80:          CF_NAME	= 0X60
01/80:          CF_SIZE	= 0X68
01/80:          CF_USR	= 0X6A
01/80:          DFT_USR	= 0X6B
01/80:          ARG_BNK	= 0X6C
01/80:          BD_FREE	= 0X6E
01/80:          MAX_IB	= 0X70
01/80:          MAX_DB	= 0X71
01/80:          CMDL_B	= 0X72
01/80:          AUTO_B	= 0X73
01/80:          KERNMEM	= 0X78
01/80:          BIOSMEM	= 0X7C
01/80:          
01/80:          ; DATA BANK ADDRESS
01/80:          DBANK	= 0X80		
01/80:          
01/80:          ; EDIT.S
01/80:          ; SIMPLE TEXT EDITOR
01/80:          
01/80:          ; BANK ALLOCATION STUFF
01/80:          BI	= 1
01/80:          BD	= 1
01/80:          
01/80:          .TEXT
01/80:          .BANK	BI
01/80:          CORE0_B	= BI
01/80:          
01/80:          	; START BY PROCESSING THE ARGUMENTS
01/80: 3000     START:	LOADI	A,0
01/81: A080     	STORE	[DBANK],A
01/83:          	
01/82:          	; SET UP STACK
01/82: 3C5E     	LOADI	D,0X60-2
01/84:          	
01/83:          	; SYSCALL RETURN BANK
01/83: 3801     	LOADI	C,BI
01/84: BB01     	STOREF	[D+1],C
01/86:          	
01/85:          	; INIT MEMORY
01/85: 388A     	LOADI	C,@+5
01/86: BB00     	STOREF	[D],C
01/87: 3402     	LOADI	B,MEM0_B
01/88: 3880     	LOADI	C,MINIT
01/89: FF77     	JUMP	INDIR
01/8B:          	
01/8A:          	; GO TO ARGUMENT BANK
01/8A: 8072     	LOAD	A,[CMDL_B]
01/8B: A06C     	STORE	[ARG_BNK],A
01/8C: A080     	STORE	[DBANK],A
01/8E:          	
01/8D:          	; SET UP POINTER
01/8D: 3800     	LOADI	C,0
01/8F:          	
01/8E:          	; SKIP THE INITIAL COMMAND
01/8E: 9200     0:	LOADF	A,[C]
01/8F: 3420     	LOADI	B,0X20
01/90: D100     	CMP	A,B
01/91: F902     	BRBE	1F
01/92: 5801     	ADDI	C,1
01/93: FFFA     	JUMP	0B
01/95:          
01/94:          	; LOOK FOR THE FIRST ARGUMENT
01/94: 9200     1:	LOADF	A,[C]
01/95: 5000     	ADDI	A,0
01/96: F604     	BRZ	2F
01/97: D100     	CMP	A,B
01/98: F803     	BRA	OPENARG
01/99: 5801     	ADDI	C,1
01/9A: FFF9     	JUMP	1B
01/9C:          	
01/9B:          	; NO ARGUMENT, EMPTY BUFFER
01/9B: FF00     2:	JUMP	DONE
01/9D:          
01/9C:          	
01/9C:          	; THERE IS AN ARG, TRY AND OPEN IT
01/9C:          OPENARG:
01/9C:          
01/9C:          
01/9C:          	; EXIT PROGRAM
01/9C: 3400     DONE:	LOADI	B,S_EXIT
01/9D: FF66     	JUMP	SYSJUMP
01/9F:          
01/9E:          	; BANK IS DONE, MOVE ON TO THE NEXT
01/9E:          BI	= BI+1
01/9E:          .TEXT
01/9E:          .BANK	BI
02/80:          MEM0_B	= BI
02/80:          
02/80:          	; MEMORY INIT
02/80:          	; DIVIDE THE HEAP INTO BLOCKS OF 32 BYTES, AND ADD IT
02/80:          	; TO THE FREE TABLE
02/80:          	; USES: A, B, C
02/80: 3806     MINIT:	LOADI	C,HEAP
02/81: 8471     	LOAD	B,[MAX_DB]
02/83:          	
02/82:          	; SET THE START OF THE FREE BLOCK LIST
02/82: 3000     	LOADI	A,0
02/83: A805     	STORE	[FREETAB],C
02/84: A006     	STORE	[FREETAB+1],A
02/86:          	
02/85:          	; MOVE TO BANK
02/85: A880     0:	STORE	[DBANK],C
02/86: 3020     	LOADI	A,32
02/88:          	
02/87:          	; WRITE FIRST 3 HEADERS
02/87: B0E1     1:	STOREF	[A+1-32],A
02/88: B8E0     	STOREF	[A+0-32],C
02/89: 5020     	ADDI	A,32
02/8A: F5FC     	BRNN	1B
02/8C:          	
02/8B:          	; WRITE 4TH HEADER
02/8B: 3000     2:	LOADI	A,0
02/8C: A061     	STORE	[32*3+1],A
02/8D: 5801     	ADDI	C,1
02/8E: D900     	CMP	C,B
02/8F: F802     	BRA	3F
02/90: A860     	STORE	[32*3],C
02/91: FFF3     	JUMP	0B
02/93:          	
02/92:          	; STORE BANK ZERO TO INDICATE END OF LIST
02/92: A060     3:	STORE	[32*3],A
02/93: A080     	STORE	[DBANK],A
02/94: FF6D     	JUMP	IRET
02/96:          	
02/95:          	
02/95:          	; ALLOCATE A BLOCK OF MEMORY
02/95:          	; RETURNS ADDRESS TO BLOCK IN [CBLOCK]
02/95:          	; RETURNS A = 0XFF OUT OF BLOCKS, A = 0X00 OTHERWISE
02/95:          	; USES: A, B, C
02/95: AC02     MALLOC:	STORE	[SPARK],D
02/96: 8405     	LOAD	B,[FREETAB]
02/97: 30FF     	LOADI	A,0XFF
02/99:          	
02/98:          	; MAKE SURE THE NEXT BLOCK ISN'T NULL
02/98: 5400     	ADDI	B,0
02/99: F668     	BRZ	IRET
02/9B:          	
02/9A:          	; STORE THE BLOCK ADDRESS IN CBLOCK
02/9A: 8806     	LOAD	C,[FREETAB+1]
02/9B: A403     	STORE	[CBLOCK],B
02/9C: A804     	STORE	[CBLOCK+1],C
02/9E:          	
02/9D:          	; MOVE THE NEXT BLOCK INTO FREETAB POINTER
02/9D: A480     	STORE	[DBANK],B
02/9E: 9200     	LOADF	A,[C]
02/9F: 9601     	LOADF	B,[C+1]
02/A0: 3C00     	LOADI	D,0
02/A1: BE00     	STOREF	[C],D
02/A2: BE01     	STOREF	[C+1],D
02/A3: AC80     	STORE	[DBANK],D
02/A4: A005     	STORE	[FREETAB],A
02/A5: A406     	STORE	[FREETAB+1],B
02/A7:          	
02/A6:          	; RESTORE STACK AND RETURN
02/A6: 8C02     	LOAD	D,[SPARK]
02/A7: 3000     	LOADI	A,0
02/A8: FF59     	JUMP	IRET
02/AA:          	
02/A9:          	; PLACES THE BLOCK IN [CBLOCK] ONTO THE FREE
02/A9:          	; TABLE
02/A9:          	; USES: A, B, C
02/A9: AC02     FREE:	STORE	[SPARK],D
02/AB:          
02/AA:          	; GRAB ADDRESSES OF THE FREETAB AND CBLOCK
02/AA: 8003     	LOAD	A,[CBLOCK]
02/AB: 8404     	LOAD	B,[CBLOCK+1]
02/AC: 8805     	LOAD	C,[FREETAB]
02/AD: 8C06     	LOAD	D,[FREETAB+1]
02/AF:          	
02/AE:          	; LINK REST OF FREETAB AFTER CBLOCK
02/AE: A080     	STORE	[DBANK],A
02/AF: B900     	STOREF	[B],C
02/B0: BD01     	STOREF	[B+1],D
02/B2:          	
02/B1:          	; SET CBLOCK AS BEGINNING OF FREE TABLE
02/B1: 3800     	LOADI	C,0
02/B2: A880     	STORE	[DBANK],C
02/B3: A005     	STORE	[FREETAB],A
02/B4: A406     	STORE	[FREETAB+1],B
02/B6:          	
02/B5:          	; RESTORE STACK AND RETURN
02/B5: 8C02     	LOAD	D,[SPARK]
02/B6: FF4B     	JUMP	IRET
02/B8:          	
02/B7:          	; BANK IS DONE, MOVE ON TO THE NEXT
02/B7:          BI	= BI+1
02/B7:          .TEXT
02/B7:          .BANK	BI
03/80:          FIO0_B	= BI
03/80:          	
03/80:          	; READS A FILE INTO THE BUFFER
03/80:          	; A = STRING POINTER
03/80:          	; [ARG_BNK] = STRING BANK
03/80:          	; RETURNS A = 0XFF IF ERROR, A = 0X00 RETURN OTHERWISE
03/80:          	; USES: A, B, C
03/80: 7C02     FREAD:	SUBI	D,2
03/82:          	
03/81:          	; ATTEMPT TO OPEN FILE
03/81: 3803     	LOADI	C,BI
03/82: BB01     	STOREF	[D+1],C
03/83: 3406     	LOADI	B,S_OPEN
03/84: 3886     	LOADI	C,@+2
03/85: FF7D     	JUMP	SYSCALL
03/87:          	
03/86:          	; CHECK RESULT OF OPERATION
03/86: 5000     	ADDI	A,0
03/87: F701     	BRNZ	9F
03/89:          	
03/88:          	; RESTORE STACK AND RETURN
03/88: 3000     	LOADI	A,0
03/89: 5C02     9:	ADDI	D,2
03/8A: FF77     	JUMP	IRET
03/8C:          
03/8B:          
03/8B:          	; ZERO BANK
03/8B:          .BANK	0
00/80:          .BSS
00/80:          
00/00:          	; MISC CONTEXT INFORMATION
00/00: 00       .DEFL BYTE COUNT	0
00/01: 00       .DEFL BYTE BANK		0
00/02:          
00/02:          	; STACK PARKING SPACE
00/02: 00       .DEFL BYTE SPARK	0
00/03:          
00/03:          	; CURRENT BLOCK OF MEMORY TO WORK ON
00/03: 0000     .DEFL BYTE CBLOCK	0,0
00/05:          
00/05:          	; FREE MEMORY TABLE
00/05: 0000     .DEFL BYTE FREETAB	0,0
00/07:          
00/07:          	; LINE EDITOR CONTENT
00/07: 0000     .DEFL BYTE LINETAB	0,0
00/09:          
00/09:          	; START OF DEFINED MEMORY
00/09:          .BANK	BD
01/00:          .DATA
01/00:          STR0_B = BD	; STRING BANK
01/00:          
01/00:          	; ERROR MESSAGES
01/00: 43414E27
       54204F50
       454E2046
       494C450A
       0D00     .DEFL BYTE ERROR0	"CAN'T OPEN FILE",0X0A,0X0D,0
01/12:          
01/12:          	; BANK IS DONE, MOVE ON TO THE NEXT
01/12:          BD	= BD+1
01/12:          BUF_B	= BD	; BUFFER BANK
01/12:          
01/12:          	; BANK IS DONE, MOVE ON TO THE NEXT
01/12:          BD	= BD+4
01/12:          HEAP	= BD	; THE REST OF MEMORY IS HEAP
