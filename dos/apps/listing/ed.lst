00/00:          ; DOSDEF.S
01/80:          ; THIS FILE CONTAINS IMPORTANT DEFINES USED IN DOS/281
01/80:          ; GAVIN TERSTEEG, 2024
01/80:          ; SDMAY24-14
01/80:          
01/80:          ; BIOS CALLS
01/80:          BOOT	= 0
01/80:          ALTBOOT = 1
01/80:          INDIR	= 2
01/80:          IRET	= 3
01/80:          SYSCALL	= 4
01/80:          SYSJUMP	= 5
01/80:          PRGM	= 6
01/80:          IWRITE	= 7
01/80:          ZSTART	= 8
01/80:          
01/80:          HALT	= 0X7F
01/80:          
01/80:          ; SYSTEM CALLS
01/80:          S_EXIT	= 0
01/80:          S_PUTC	= 1
01/80:          S_GETC	= 2
01/80:          S_STAT	= 3
01/80:          S_PUTS	= 4
01/80:          S_INPUT	= 5
01/80:          S_OPEN	= 6
01/80:          S_CLOSE	= 7
01/80:          S_READ	= 8
01/80:          S_WRITE	= 9
01/80:          S_FSRCH	= 10
01/80:          S_NEXT	= 11
01/80:          S_DELET	= 12
01/80:          S_CREAT	= 13
01/80:          S_FREE	= 14
01/80:          S_EXEC	= 15
01/80:          
01/80:          ; MEMORY AREAS
01/80:          CF_NAME	= 0X60
01/80:          CF_SIZE	= 0X68
01/80:          CF_USR	= 0X6A
01/80:          DFT_USR	= 0X6B
01/80:          ARG_BNK	= 0X6C
01/80:          BD_FREE	= 0X6E
01/80:          MAX_IB	= 0X70
01/80:          MAX_DB	= 0X71
01/80:          CMDL_B	= 0X72
01/80:          AUTO_B	= 0X73
01/80:          KERNMEM	= 0X78
01/80:          BIOSMEM	= 0X7C
01/80:          AU_RUN	= 0X00
01/80:          AU_PNTR	= 0X01
01/80:          AU_BANK	= 0X02
01/80:          AU_BLK	= 0X03
01/80:          AU_UA	= 0X04
01/80:          AU_FILE	= 0X06
01/80:          AU_MISC	= 0X18
01/80:          
01/80:          ; DATA BANK ADDRESS
01/80:          DBANK	= 0X80		
01/80:          
01/80:          
01/80:          ; ED0.S
01/80:          ; SIMPLE TEXT EDITOR
01/80:          ; USER INTERFACE AND MEMORY MANAGEMENT
01/80:          ; GAVIN TERSTEEG, 2024
01/80:          ; SDMAY24-14
01/80:          
01/80:          ; BANK ALLOCATION STUFF
01/80:          BI	= 1
01/80:          BD	= 1
01/80:          
01/80:          .TEXT
01/80:          .BANK	BI
01/80:          CORE0_B	= BI
01/80:          
01/80:          	; START BY PROCESSING THE ARGUMENTS
01/80: 3000     START:	LOADI	A,0
01/81: A080     	STORE	[DBANK],A
01/83:          	
01/82:          	; SET UP STACK
01/82: 3C5E     	LOADI	D,0X60-2
01/84:          	
01/83:          	; SYSCALL RETURN BANK
01/83: 3801     	LOADI	C,BI
01/84: BB01     	STOREF	[D+1],C
01/86:          	
01/85:          	; SAVE STACK
01/85: AC0C     	STORE	[SPARK],D
01/87:          	
01/86:          	; GO TO ARGUMENT BANK
01/86: 8072     	LOAD	A,[CMDL_B]
01/87: A06C     	STORE	[ARG_BNK],A
01/88: A080     	STORE	[DBANK],A
01/8A:          	
01/89:          	; SET UP POINTER
01/89: 3800     	LOADI	C,0
01/8B:          	
01/8A:          	; SKIP THE INITIAL COMMAND
01/8A: 9200     0:	LOADF	A,[C]
01/8B: 3420     	LOADI	B,0X20
01/8C: D100     	CMP	A,B
01/8D: F902     	BRBE	1F
01/8E: 5801     	ADDI	C,1
01/8F: FFFA     	JUMP	0B
01/91:          
01/90:          	; LOOK FOR THE FIRST ARGUMENT
01/90: 9200     1:	LOADF	A,[C]
01/91: 5000     	ADDI	A,0
01/92: F604     	BRZ	2F
01/93: D100     	CMP	A,B
01/94: F809     	BRA	OPENARG
01/95: 5801     	ADDI	C,1
01/96: FFF9     	JUMP	1B
01/98:          	
01/97:          	; NO ARGUMENT, EMPTY BUFFER
01/97: 3000     2:	LOADI	A,0
01/98: A080     	STORE	[DBANK],A
01/9A:          	
01/99:          	; INIT MEMORY
01/99: 38BF     	LOADI	C,9F
01/9A: BB00     	STOREF	[D],C
01/9B: 340D     	LOADI	B,MEM0_B
01/9C: 3880     	LOADI	C,MINIT
01/9D: FF64     	JUMP	INDIR
01/9F:          	
01/9E:          	; JUMP TO COMMAND LINE
01/9E:          
01/9E:          	
01/9E:          	; THERE IS AN ARG, TRY AND OPEN IT
01/9E: 3C18     OPENARG:LOADI	D,FNAME
01/9F: 9200     0:	LOADF	A,[C]
01/A0: 3400     	LOADI	B,0
01/A1: A480     	STORE	[DBANK],B
01/A2: B300     	STOREF	[D],A
01/A3: 7020     	SUBI	A,0X20
01/A4: F908     	BRBE	1F
01/A5: 5801     	ADDI	C,1
01/A6: 5C01     	ADDI	D,1
01/A7: 3427     	LOADI	B,FNAME+15
01/A8: DD00     	CMP	D,B
01/A9: F003     	BRAE	1F
01/AA: 8472     	LOAD	B,[CMDL_B]
01/AB: A480     	STORE	[DBANK],B
01/AC: FFF2     	JUMP	0B
01/AE:          	
01/AD:          	; TERMINATE STRING AND OPEN FILE
01/AD: 3000     1:	LOADI	A,0
01/AE: B300     	STOREF	[D],A
01/AF: 8C0C     	LOAD	D,[SPARK]
01/B1:          	
01/B0:          	; OPEN THE FILE
01/B0: 38B5     	LOADI	C,@+5
01/B1: BB00     	STOREF	[D],C
01/B2: 340E     	LOADI	B,FIO0_B
01/B3: 3886     	LOADI	C,FREAD
01/B4: FF4D     	JUMP	INDIR
01/B6:          
01/B5:          	; CHECK ERROR STATUS
01/B5: 5000     	ADDI	A,0
01/B6: F608     	BRZ	9F
01/B8:          	
01/B7:          	; INIT MEMORY
01/B7: 38BF     	LOADI	C,9F
01/B8: BB00     	STOREF	[D],C
01/B9: 340D     	LOADI	B,MEM0_B
01/BA: 3880     	LOADI	C,MINIT
01/BB: FF46     	JUMP	INDIR
01/BD:          	
01/BC:          	; ERROR!
01/BC: 3402     	LOADI	B,CMD0_B
01/BD: 3880     	LOADI	C,ERROR
01/BE: FF43     	JUMP	INDIR
01/C0:          
01/BF:          	; MEMORY SETUP IS DONE
01/BF:          	; SEND UP THE COMMAND PROMPT
01/BF: 3402     9:	LOADI	B,CMD0_B
01/C0: 3882     	LOADI	C,PROMPT
01/C1: FF40     	JUMP	INDIR
01/C3:          
01/C2:          	; EXIT PROGRAM
01/C2: 3400     DONE:	LOADI	B,S_EXIT
01/C3: FF41     	JUMP	SYSJUMP
01/C5:          	
01/C4:          	; BANK IS DONE, MOVE ON TO THE NEXT
01/C4:          BI	= BI+1
01/C4:          .TEXT
01/C4:          .BANK	BI
02/80:          CMD0_B	= BI
02/80:          
02/80: 3000     ERROR:	LOADI	A,ST_ERR
02/81: FF01     	JUMP	0F
02/83:          
02/82:          	; SEND UP THE COMMAND LINE PROMPT
02/82: 3003     PROMPT:	LOADI	A,ST_PRM
02/83: 3802     0:	LOADI	C,BI
02/84: BB01     	STOREF	[D+1],C
02/85: 3401     	LOADI	B,STR0_B
02/86: A46C     	STORE	[ARG_BNK],B
02/87: 3404     	LOADI	B,S_PUTS
02/88: 388A     	LOADI	C,@+2
02/89: FF7A     	JUMP	SYSCALL
02/8B:          	
02/8A:          	; GET USER INPUT
02/8A: 3402     	LOADI	B,BUF_B
02/8B: A46C     	STORE	[ARG_BNK],B
02/8C: 3405     	LOADI	B,S_INPUT
02/8D: 388F     	LOADI	C,@+2
02/8E: FF75     	JUMP	SYSCALL
02/90:          	
02/8F:          	; BEGIN COMMAND PROCESSING
02/8F: 3000     	LOADI	A,0
02/90: A006     	STORE	[POINTER],A
02/91: A011     	STORE	[STATE],A
02/93:          	
02/92:          	; START PROCESSING A NUMBER (MAYBE?)
02/92: 8012     0:	LOAD	A,[ARGA]
02/93: 8413     	LOAD	B,[ARGA+1]
02/94: A014     	STORE	[ARGB],A
02/95: A415     	STORE	[ARGB+1],B
02/96: 3000     	LOADI	A,0
02/97: A012     	STORE	[ARGA],A
02/98: A013     	STORE	[ARGA+1],A
02/9A:          
02/99:          	; READ A CHARACTER FROM THE COMMAND LINE
02/99: 8006     1:	LOAD	A,[POINTER]
02/9A: 3402     	LOADI	B,BUF_B
02/9B: A480     	STORE	[DBANK],B
02/9C: 9800     	LOADF	C,[A]
02/9D: 3400     	LOADI	B,0
02/9E: A480     	STORE	[DBANK],B
02/9F: 5001     	ADDI	A,1
02/A0: A006     	STORE	[POINTER],A
02/A2:          	
02/A1:          	; CHECK CHARACTER
02/A1: 302C     	LOADI	A,','
02/A2: D800     	CMP	C,A
02/A3: F62A     	BRZ	8F
02/A4: 3030     	LOADI	A,'0'
02/A5: D800     	CMP	C,A
02/A6: F1D9     	BRB	ERROR
02/A7: 3039     	LOADI	A,'9'
02/A8: D800     	CMP	C,A
02/A9: F82B     	BRA	9F
02/AB:          	
02/AA:          	; MAKE SURE STATE ISN'T 0
02/AA: 8011     	LOAD	A,[STATE]
02/AB: 5000     	ADDI	A,0
02/AC: F702     	BRNZ	2F
02/AD: 3001     	LOADI	A,1
02/AE: A011     	STORE	[STATE],A
02/B0:          	
02/AF:          	; MULTIPLY ARG A BY 10
02/AF: A80A     2:	STORE	[CHAR],C
02/B0: 3809     	LOADI	C,9
02/B1: 8012     	LOAD	A,[ARGA]
02/B2: 8413     	LOAD	B,[ARGA+1]
02/B3: A016     	STORE	[TEMP],A
02/B4: A417     	STORE	[TEMP+1],B
02/B5: 8017     3:	LOAD	A,[TEMP+1]
02/B6: 8413     	LOAD	B,[ARGA+1]
02/B7: 4400     	ADD	B,A
02/B8: A413     	STORE	[ARGA+1],B
02/B9: 8016     	LOAD	A,[TEMP]
02/BA: 8412     	LOAD	B,[ARGA]
02/BB: F102     	BRNC	4F
02/BC: 5401     	ADDI	B,1
02/BD: F0C2     	BRC	ERROR 
02/BE: 4400     4:	ADD	B,A
02/BF: F0C0     	BRC	ERROR 
02/C0: A412     	STORE	[ARGA],B
02/C1: 7801     	SUBI	C,1
02/C2: F7F2     	BRNZ	3B
02/C3: 880A     	LOAD	C,[CHAR]
02/C5:          	
02/C4:          	; ADD THE NUMBER
02/C4: 7830     	SUBI	C,'0'
02/C5: 8013     	LOAD	A,[ARGA+1]
02/C6: 4200     	ADD	A,C
02/C7: A013     	STORE	[ARGA+1],A
02/C8: F104     	BRNC	5F
02/C9: 8012     	LOAD	A,[ARGA]
02/CA: 5001     	ADDI	A,1
02/CB: A012     	STORE	[ARGA],A
02/CC: F0B3     	BRC	ERROR 
02/CE:          	
02/CD: FFCB     5:	JUMP	1B
02/CF:          	
02/CE:          	; PROCESS COMMA
02/CE: 8011     8:	LOAD	A,[STATE]
02/CF: 7001     	SUBI	A,1
02/D0: F4AF     	BRN	ERROR
02/D1: F7AE     	BRNZ	ERROR
02/D2: 3002     	LOADI	A,2
02/D3: A011     	STORE	[STATE],A
02/D4: FFBD     	JUMP	0B
02/D6:          
02/D5:          	; PROCESS COMMAND
02/D5: 2200     9:	MOV	A,C
02/D7:          
02/D6:          	; QUIT?
02/D6: 3451     	LOADI	B,'Q'
02/D7: D100     	CMP	A,B
02/D8: 3400     	LOADI	B,S_EXIT
02/D9: F62B     	BRZ	SYSJUMP
02/DB:          	
02/DA:          	; CHANGE FILE?
02/DA: 3446     	LOADI	B,'F'
02/DB: D100     	CMP	A,B
02/DC: 3404     	LOADI	B,UOP0_B
02/DD: 3895     	LOADI	C,SETFILE
02/DE: F623     	BRZ	INDIR
02/E0:          	
02/DF:          	; MAKE SURE COMMAND IS ZERO TERMINATED
02/DF: 8806     	LOAD	C,[POINTER]
02/E0: 3402     	LOADI	B,BUF_B
02/E1: A480     	STORE	[DBANK],B
02/E2: 9A00     	LOADF	C,[C]
02/E3: 3400     	LOADI	B,0
02/E4: A480     	STORE	[DBANK],B
02/E5: 5800     	ADDI	C,0
02/E6: F799     	BRNZ	ERROR
02/E8:          	
02/E7: 3403     	LOADI	B,CMD1_B
02/E8: 3880     	LOADI	C,PROCMD
02/E9: FF18     	JUMP	INDIR
02/EB:          	
02/EA:          	; BANK IS DONE, MOVE ON TO THE NEXT
02/EA:          BI	= BI+1
02/EA:          .TEXT
02/EA:          .BANK	BI
03/80:          CMD1_B	= BI
03/80:          
03/80:          	; PROCESS STANDARD COMMAND
03/80: 3450     PROCMD:	LOADI	B,'P'
03/81: D100     	CMP	A,B
03/82: 3404     	LOADI	B,UOP0_B
03/83: 38BE     	LOADI	C,PRINTL
03/84: F67D     	BRZ	INDIR
03/86:          	
03/85:          	; READ FILE
03/85: 3452     	LOADI	B,'R'
03/86: D100     	CMP	A,B
03/87: 3404     	LOADI	B,UOP0_B
03/88: 388F     	LOADI	C,DOFREAD
03/89: F678     	BRZ	INDIR
03/8B:          	
03/8A:          	; READ FILE
03/8A: 3457     	LOADI	B,'W'
03/8B: D100     	CMP	A,B
03/8C: 3404     	LOADI	B,UOP0_B
03/8D: 3892     	LOADI	C,DOFWRIT
03/8E: F673     	BRZ	INDIR
03/90:          	
03/8F:          	; APPEND LINES
03/8F: 3441     	LOADI	B,'A'
03/90: D100     	CMP	A,B
03/91: 3404     	LOADI	B,UOP0_B
03/92: 3886     	LOADI	C,APPEND
03/93: F66E     	BRZ	INDIR
03/95:          	
03/94:          	; INSERT LINES
03/94: 3449     	LOADI	B,'I'
03/95: D100     	CMP	A,B
03/96: 3404     	LOADI	B,UOP0_B
03/97: 3889     	LOADI	C,INSERT
03/98: F669     	BRZ	INDIR
03/9A:          	
03/99:          	; DELETE LINES
03/99: 3444     	LOADI	B,'D'
03/9A: D100     	CMP	A,B
03/9B: 3404     	LOADI	B,UOP0_B
03/9C: 388C     	LOADI	C,DELETE
03/9D: F664     	BRZ	INDIR
03/9F:          	
03/9E:          	; MEMORY COUNT
03/9E: 344D     	LOADI	B,'M'
03/9F: D100     	CMP	A,B
03/A0: 3404     	LOADI	B,UOP0_B
03/A1: 3883     	LOADI	C,PFREE
03/A2: F65F     	BRZ	INDIR
03/A4:          	
03/A3:          	; LINE COUNT
03/A3: 344C     	LOADI	B,'L'
03/A4: D100     	CMP	A,B
03/A5: 3404     	LOADI	B,UOP0_B
03/A6: 3880     	LOADI	C,PLINES
03/A7: F65A     	BRZ	INDIR
03/A9:          	
03/A8:          	; CAN'T FIND COMMAND
03/A8: 3402     	LOADI	B,CMD0_B
03/A9: 3880     	LOADI	C,ERROR
03/AA: FF57     	JUMP	INDIR
03/AC:          	
03/AB:          	; GO BACK TO COMMAND LINE
03/AB: 3402     9:	LOADI	B,CMD0_B
03/AC: 3882     	LOADI	C,PROMPT
03/AD: FF54     	JUMP	INDIR
03/AF:          
03/AE:          		; BANK IS DONE, MOVE ON TO THE NEXT
03/AE:          BI	= BI+1
03/AE:          	
03/AE:          	; ZERO BANK
03/AE:          .BANK	0
00/80:          .BSS
00/80:          
00/00:          	; CURRENT BLOCK OF MEMORY TO WORK ON
00/00: 0000     .DEFL BYTE CBLOCK	0,0
00/02:          
00/02:          	; BLOCK TO BE LINKED ONTO THE CURRENT BLOCK
00/02: 0000     .DEFL BYTE LBLOCK	0,0
00/04:          
00/04:          	; MISC CONTEXT INFORMATION
00/04: 00       .DEFL BYTE BLOCK	0
00/05: 00       .DEFL BYTE BANK		0
00/06: 00       .DEFL BYTE POINTER	0
00/07:          
00/07:          	; MEMORY BLOCK PARSE INFORMATION
00/07: 00       .DEFL BYTE MB_PNTR	0
00/08: 00       .DEFL BYTE MB_END	0
00/09:          
00/09:          	; FIRST CHARACTER?
00/09: 00       .DEFL BYTE FIRST	0
00/0A:          
00/0A:          	; CURRENT CHARACTER
00/0A: 00       .DEFL BYTE CHAR		0
00/0B:          
00/0B:          	; LINE COUNT
00/0B: 00       .DEFL BYTE LINES	0
00/0C:          
00/0C:          	; STACK PARKING SPACE
00/0C: 00       .DEFL BYTE SPARK	0
00/0D:          
00/0D:          	; FREE MEMORY TABLE
00/0D: 0000     .DEFL BYTE FREETAB	0,0
00/0F:          
00/0F:          	; LINE EDITOR CONTENT
00/0F: 0000     .DEFL BYTE LINETAB	0,0
00/11:          
00/11:          	; STATE FOR COMMAND PROCESSING
00/11: 00       .DEFL BYTE STATE	0
00/12:          
00/12:          	; LINE NUMBER ARGUMENTS FOR COMMANDS
00/12: 0000     .DEFL BYTE ARGA		0,0
00/14: 0000     .DEFL BYTE ARGB		0,0
00/16: 0000     .DEFL BYTE TEMP		0,0
00/18:          
00/18:          	; CURRENT FILE NAME
00/18: 00000000
       00000000 .DEFL BYTE FNAME	0,0,0,0,0,0,0,0,
00/20: 00000000
       00000000 			0,0,0,0,0,0,0,0
00/28:          
00/28:          	; PREVIOUS BLOCK
00/28:          	; ONLY UPDATED WHEN USING FINDL
00/28: 0000     .DEFL BYTE PBLOCK	0,0
00/2A:          
00/2A:          	; NUMBER OF BLOCKS FREE
00/2A: 0000     .DEFL BYTE NUMFREE	0,0
00/2C:          
00/2C:          	; PADDING FOR DECIMAL NUMBER PRINT
00/2C: 00       .DEFL BYTE PADDING	0
00/2D:          
00/2D:          	; RETURN FOR LEAF FUNCTIONS
00/2D: 00       .DEFL BYTE LEAFRET	0
00/2E:          
00/2E:          	; START OF DEFINED MEMORY
00/2E:          .BANK	BD
01/00:          .DATA
01/00:          STR0_B = BD	; STRING BANK
01/00:          
01/00:          	; ERROR MESSAGE / PROMPT
01/00: 0A0D3F   .DEFL BYTE ST_ERR	0X0A,0X0D,'?'
01/03: 0A0D2500 .DEFL BYTE ST_PRM	0X0A,0X0D,'%',0
01/07:          
01/07:          	; BANK IS DONE, MOVE ON TO THE NEXT
01/07:          BD	= BD+1
01/07:          BUF_B	= BD	; BUFFER BANK
01/07:          
01/07:          	; BANK IS DONE, MOVE ON TO THE NEXT
01/07:          BD	= BD+4
01/07:          HEAP	= BD	; THE REST OF MEMORY IS HEAP
01/07:          
01/07:          
01/07:          ; ED1.S
01/07:          ; SIMPLE TEXT EDITOR
01/07:          ; USER OPERATIONS
01/07:          ; GAVIN TERSTEEG, 2024
01/07:          ; SDMAY24-14
01/07:          
01/07:          .TEXT
01/C4:          .BANK	BI
04/80:          UOP0_B	= BI
04/80:          
04/80:          	; PRINT NUMBER OF LINES
04/80: 3408     PLINES:	LOADI	B,UOP4_B
04/81: 389B     	LOADI	C,PLINESA
04/82: FF7F     	JUMP	INDIR
04/84:          
04/83:          	; PRINT FREE MEMORY BLOCKS
04/83: 3408     PFREE:	LOADI	B,UOP4_B
04/84: 3880     	LOADI	C,PFREEA
04/85: FF7C     	JUMP	INDIR
04/87:          
04/86:          	; APPENDS LINES INTO THE TEXT BUFFER
04/86: 3406     APPEND:	LOADI	B,UOP2_B
04/87: 388D     	LOADI	C,APPENDA
04/88: FF79     	JUMP	INDIR
04/8A:          
04/89:          	; INSERT LINES INTO THE TEXT BUFFER
04/89: 3406     INSERT:	LOADI	B,UOP2_B
04/8A: 38AC     	LOADI	C,INSERTA
04/8B: FF76     	JUMP	INDIR
04/8D:          	
04/8C:          	; DELETE LINES FROM THE TEXT BUFFER
04/8C: 3407     DELETE:	LOADI	B,UOP3_B
04/8D: 3880     	LOADI	C,DELETEA
04/8E: FF73     	JUMP	INDIR
04/90:          
04/8F:          	; EXECUTE A FILE READ
04/8F: 3406     DOFREAD:LOADI	B,UOP2_B
04/90: 3880     	LOADI	C,DOFREAA
04/91: FF70     	JUMP	INDIR
04/93:          	
04/92:          		; EXECUTE A FILE READ
04/92: 3408     DOFWRIT:LOADI	B,UOP4_B
04/93: 38BD     	LOADI	C,DOFWRIA
04/94: FF6D     	JUMP	INDIR
04/96:          
04/95:          	; SET EDITING FILE
04/95: 8011     SETFILE:LOAD	A,[STATE]
04/96: 5000     	ADDI	A,0
04/97: F721     	BRNZ	9F
04/99:          	
04/98:          	; SAVE STACK (IF NEEDED)
04/98: AC0C     	STORE	[SPARK],D
04/9A:          	
04/99:          	; GET NEXT CHARACTER
04/99: 8806     	LOAD	C,[POINTER]
04/9A: 3402     	LOADI	B,BUF_B
04/9B: A480     	STORE	[DBANK],B
04/9C: 9200     	LOADF	A,[C]
04/9D: 5801     	ADDI	C,1
04/9F:          	
04/9E:          	; SEE IF IT IS A SPACE
04/9E: 3420     	LOADI	B,0X20
04/9F: D100     	CMP	A,B
04/A0: F718     	BRNZ	9F
04/A1: 9200     	LOADF	A,[C]
04/A2: D100     	CMP	A,B
04/A3: F915     	BRBE	9F
04/A5:          	
04/A4:          	; COPY THE FILE NAME OVER
04/A4: 3C18     	LOADI	D,FNAME
04/A5: 9200     0:	LOADF	A,[C]
04/A6: 3400     	LOADI	B,0
04/A7: A480     	STORE	[DBANK],B
04/A8: B300     	STOREF	[D],A
04/A9: 7020     	SUBI	A,0X20
04/AA: F908     	BRBE	1F
04/AB: 5801     	ADDI	C,1
04/AC: 5C01     	ADDI	D,1
04/AD: 3427     	LOADI	B,FNAME+15
04/AE: DD00     	CMP	D,B
04/AF: F003     	BRAE	1F
04/B0: 3402     	LOADI	B,BUF_B
04/B1: A480     	STORE	[DBANK],B
04/B2: FFF2     	JUMP	0B
04/B4:          	
04/B3:          	; TERMINATE STRING
04/B3: 3000     1:	LOADI	A,0
04/B4: B300     	STOREF	[D],A
04/B5: 8C0C     	LOAD	D,[SPARK]
04/B7:          	
04/B6:          	; GO BACK TO COMMAND LINE
04/B6: 3402     8:	LOADI	B,CMD0_B
04/B7: 3882     	LOADI	C,PROMPT
04/B8: FF49     	JUMP	INDIR
04/BA:          	
04/B9:          	; ERROR
04/B9: 3400     9:	LOADI	B,0
04/BA: A480     	STORE	[DBANK],B
04/BB: 3402     	LOADI	B,CMD0_B
04/BC: 3880     	LOADI	C,ERROR
04/BD: FF44     	JUMP	INDIR
04/BF:          
04/BE:          	; PRINT LINES
04/BE:          	; REQUIRES 1 OR 2 ARGUMENTS
04/BE: 3405     PRINTL:	LOADI	B,UOP1_B
04/BF: 3880     	LOADI	C,PRINTLA
04/C0: FF41     	JUMP	INDIR
04/C2:          
04/C1:          	; BANK IS DONE, MOVE ON TO THE NEXT
04/C1:          BI	= BI+1
04/C1:          .TEXT
04/C1:          .BANK	BI
05/80:          UOP1_B	= BI
05/80:          
05/80:          	; SHADOW OF PRINTL
05/80: 8011     PRINTLA:LOAD	A,[STATE]
05/81: 7001     	SUBI	A,1
05/82: F45A     	BRN	9F
05/83: F704     	BRNZ	1F
05/85:          	
05/84:          	; SET ARGB = ARGA
05/84: 8012     	LOAD	A,[ARGA]
05/85: 8413     	LOAD	B,[ARGA+1]
05/86: A014     	STORE	[ARGB],A
05/87: A415     	STORE	[ARGB+1],B
05/89:          	
05/88:          	; ENSURE ARGA >= ARGB
05/88: 8012     1:	LOAD	A,[ARGA]
05/89: 8414     	LOAD	B,[ARGB]
05/8A: D100     	CMP	A,B
05/8B: F151     	BRB	9F
05/8C: F804     	BRA	2F
05/8D: 8013     	LOAD	A,[ARGA+1]
05/8E: 8415     	LOAD	B,[ARGB+1]
05/8F: D100     	CMP	A,B
05/90: F14C     	BRB	9F
05/92:          	
05/91:          	; START LOOKING FOR THE LINE
05/91:          	; TEMP = ARGB
05/91: 8014     2:	LOAD	A,[ARGB]
05/92: 8415     	LOAD	B,[ARGB+1]
05/93: A016     	STORE	[TEMP],A
05/94: A417     	STORE	[TEMP+1],B
05/95: 3805     	LOADI	C,BI
05/96: BB01     	STOREF	[D+1],C
05/97: 389C     	LOADI	C,@+5
05/98: BB00     	STOREF	[D],C
05/99: 3409     	LOADI	B,LOP0_B
05/9A: 3886     	LOADI	C,FINDL
05/9B: FF66     	JUMP	INDIR
05/9C: 5000     	ADDI	A,0
05/9D: F73F     	BRNZ	9F
05/9F:          	
05/9E:          	; START PRINTING OFF LINES
05/9E: 8800     3:	LOAD	C,[CBLOCK]
05/9F: 8407     	LOAD	B,[MB_PNTR]
05/A0: A880     	STORE	[DBANK],C
05/A1: 9100     	LOADF	A,[B]
05/A2: 3800     	LOADI	C,0
05/A3: A880     	STORE	[DBANK],C
05/A5:          	
05/A4:          	; IS IT ZERO OR NEGATIVE
05/A4: 5000     	ADDI	A,0
05/A5: F40A     	BRN	5F
05/A6: F619     	BRZ	6F
05/A8:          	
05/A7:          	; PRINT THE CHARACTER
05/A7: 3401     	LOADI	B,S_PUTC
05/A8: 38AA     	LOADI	C,@+2
05/A9: FF5A     	JUMP	SYSCALL
05/AB:          	
05/AA:          	; NEXT CHARACTER
05/AA: 8407     4:	LOAD	B,[MB_PNTR]
05/AB: 8808     	LOAD	C,[MB_END]
05/AC: 5401     	ADDI	B,1
05/AD: A407     	STORE	[MB_PNTR],B
05/AE: D600     	CMP	B,C
05/AF: F7EE     	BRNZ	3B
05/B1:          	
05/B0:          	; NEXT BLOCK
05/B0: 8000     5:	LOAD	A,[CBLOCK]
05/B1: 8401     	LOAD	B,[CBLOCK+1]
05/B2: A080     	STORE	[DBANK],A
05/B3: 9100     	LOADF	A,[B]
05/B4: 9501     	LOADF	B,[B+1]
05/B5: 3800     	LOADI	C,0
05/B6: A880     	STORE	[DBANK],C
05/B8:          	
05/B7:          	; MAKE SURE IT ISN'T ZERO
05/B7: 5000     	ADDI	A,0
05/B8: F621     	BRZ	8F
05/BA:          	
05/B9:          	; SET CBLOCK AND UPDATE MB_PNTR AND MB_END
05/B9: A000     	STORE	[CBLOCK],A
05/BA: A401     	STORE	[CBLOCK+1],B
05/BB: 5403     	ADDI	B,3
05/BC: A407     	STORE	[MB_PNTR],B
05/BD: 541D     	ADDI	B,32-3
05/BE: A408     	STORE	[MB_END],B
05/BF: FFDE     	JUMP	3B
05/C1:          
05/C0:          	; START OF A NEW LINE
05/C0:          	; ENSURE ARGA >= ARGB
05/C0: 8012     6:	LOAD	A,[ARGA]
05/C1: 8414     	LOAD	B,[ARGB]
05/C2: D100     	CMP	A,B
05/C3: F116     	BRB	8F
05/C4: F804     	BRA	7F
05/C5: 8013     	LOAD	A,[ARGA+1]
05/C6: 8415     	LOAD	B,[ARGB+1]
05/C7: D100     	CMP	A,B
05/C8: F111     	BRB	8F
05/CA:          	
05/C9:          	; INCREMENT ARGB
05/C9: 8015     7:	LOAD	A,[ARGB+1]
05/CA: 5001     	ADDI	A,1
05/CB: A015     	STORE	[ARGB+1],A
05/CC: F104     	BRNC	7F
05/CD: 8014     	LOAD	A,[ARGB]
05/CE: 5001     	ADDI	A,1
05/CF: A014     	STORE	[ARGB],A
05/D0: F009     	BRC	8F
05/D2:          	
05/D1:          	; PRINT CR/LF
05/D1: 300A     7:	LOADI	A,0X0A
05/D2: 3401     	LOADI	B,S_PUTC
05/D3: 38D5     	LOADI	C,@+2
05/D4: FF2F     	JUMP	SYSCALL
05/D5: 2000     	NOOP
05/D6: 300D     	LOADI	A,0X0D
05/D7: 3401     	LOADI	B,S_PUTC
05/D8: 38AA     	LOADI	C,4B
05/D9: FF2A     	JUMP	SYSCALL
05/DB:          	
05/DA:          	; GO BACK TO COMMAND LINE
05/DA: 3402     8:	LOADI	B,CMD0_B
05/DB: 3882     	LOADI	C,PROMPT
05/DC: FF25     	JUMP	INDIR
05/DE:          	
05/DD:          	; ERROR
05/DD: 3402     9:	LOADI	B,CMD0_B
05/DE: 3880     	LOADI	C,ERROR
05/DF: FF22     	JUMP	INDIR
05/E1:          	
05/E0:          	; BANK IS DONE, MOVE ON TO THE NEXT
05/E0:          BI	= BI+1
05/E0:          .TEXT
05/E0:          .BANK	BI
06/80:          UOP2_B	= BI
06/80:          	
06/80:          	; SHADOW OF DOFREAD
06/80: 8011     DOFREAA:LOAD	A,[STATE]
06/81: 5000     	ADDI	A,0
06/82: F735     	BRNZ	9F
06/84:          
06/83:          	; READ THE FILE
06/83: 3806     	LOADI	C,BI
06/84: BB01     	STOREF	[D+1],C
06/85: 388A     	LOADI	C,@+5
06/86: BB00     	STOREF	[D],C
06/87: 340E     	LOADI	B,FIO0_B
06/88: 3886     	LOADI	C,FREAD
06/89: FF78     	JUMP	INDIR
06/8B:          	
06/8A:          	; CHECK FOR ERRORS
06/8A: 5000     	ADDI	A,0
06/8B: F42C     	BRN	9F
06/8C: FF28     	JUMP	8F
06/8E:          
06/8D:          	; SHADOW OF APPEND
06/8D: 8011     APPENDA:LOAD	A,[STATE]
06/8E: 7001     	SUBI	A,1
06/8F: F728     	BRNZ	9F
06/91:          
06/90:          	; GO LOOK FOR THE FILE
06/90:          	; SPECIAL BEHAVIOR IF IT IS 0
06/90: 8012     	LOAD	A,[ARGA]
06/91: 8413     	LOAD	B,[ARGA+1]
06/92: 5000     	ADDI	A,0
06/93: F702     	BRNZ	0F
06/94: 5400     	ADDI	B,0
06/95: F60C     	BRZ	1F
06/96: A016     0:	STORE	[TEMP],A
06/97: A417     	STORE	[TEMP+1],B
06/98: 3806     	LOADI	C,BI
06/99: BB01     	STOREF	[D+1],C
06/9A: 389F     	LOADI	C,@+5
06/9B: BB00     	STOREF	[D],C
06/9C: 3409     	LOADI	B,LOP0_B
06/9D: 3886     	LOADI	C,FINDL
06/9E: FF63     	JUMP	INDIR
06/9F: 5000     	ADDI	A,0
06/A0: F717     	BRNZ	9F
06/A2:          
06/A1:          	; CALL INPUTL
06/A1: 30FF     	LOADI	A,0XFF
06/A2: 3806     1:	LOADI	C,BI
06/A3: BB01     	STOREF	[D+1],C
06/A4: 38A9     	LOADI	C,@+5
06/A5: BB00     	STOREF	[D],C
06/A6: 3409     	LOADI	B,LOP0_B
06/A7: 3883     	LOADI	C,INPUTL
06/A8: FF59     	JUMP	INDIR
06/A9: 5000     	ADDI	A,0
06/AA: F70D     	BRNZ	9F
06/AB: FF09     	JUMP	8F
06/AD:          	
06/AC:          	; SHADOW OF INSERT
06/AC:          	; JUST SUBTRACT 1 FROM ARGA AND JUMP TO APPEND
06/AC: 8013     INSERTA:LOAD	A,[ARGA+1]
06/AD: 7001     	SUBI	A,1
06/AE: A013     	STORE	[ARGA+1],A
06/AF: F004     	BRC	1F
06/B0: 8012     	LOAD	A,[ARGA]
06/B1: 7001     	SUBI	A,1
06/B2: A412     	STORE	[ARGA],B
06/B3: F129     	BRNC	9B
06/B5:          	
06/B4: FFD8     1:	JUMP	APPENDA
06/B6:          
06/B5:          	; GO BACK TO COMMAND LINE
06/B5: 3402     8:	LOADI	B,CMD0_B
06/B6: 3882     	LOADI	C,PROMPT
06/B7: FF4A     	JUMP	INDIR
06/B9:          
06/B8:          	; ERROR
06/B8: 3402     9:	LOADI	B,CMD0_B
06/B9: 3880     	LOADI	C,ERROR
06/BA: FF47     	JUMP	INDIR
06/BC:          
06/BB:          	; BANK IS DONE, MOVE ON TO THE NEXT
06/BB:          BI	= BI+1
06/BB:          .TEXT
06/BB:          .BANK	BI
07/80:          UOP3_B	= BI
07/80:          
07/80:          	; SHADOW OF DELETE
07/80: 8011     DELETEA:LOAD	A,[STATE]
07/81: 7001     	SUBI	A,1
07/82: F425     	BRN	9F
07/83: F704     	BRNZ	1F
07/85:          	
07/84:          	; SET ARGB = ARGA
07/84: 8012     	LOAD	A,[ARGA]
07/85: 8413     	LOAD	B,[ARGA+1]
07/86: A014     	STORE	[ARGB],A
07/87: A415     	STORE	[ARGB+1],B
07/89:          	
07/88:          	; ENSURE ARGA >= ARGB
07/88: 8012     1:	LOAD	A,[ARGA]
07/89: 8414     	LOAD	B,[ARGB]
07/8A: D100     	CMP	A,B
07/8B: F11C     	BRB	9F
07/8C: F804     	BRA	2F
07/8D: 8013     	LOAD	A,[ARGA+1]
07/8E: 8415     	LOAD	B,[ARGB+1]
07/8F: D100     	CMP	A,B
07/90: F117     	BRB	9F
07/92:          	
07/91:          	; START LOOKING FOR THE LINE
07/91:          	; TEMP = ARGB
07/91: 8014     2:	LOAD	A,[ARGB]
07/92: 8415     	LOAD	B,[ARGB+1]
07/93: A016     	STORE	[TEMP],A
07/94: A417     	STORE	[TEMP+1],B
07/95: 3807     	LOADI	C,BI
07/96: BB01     	STOREF	[D+1],C
07/97: 389C     	LOADI	C,@+5
07/98: BB00     	STOREF	[D],C
07/99: 3409     	LOADI	B,LOP0_B
07/9A: 3886     	LOADI	C,FINDL
07/9B: FF66     	JUMP	INDIR
07/9C: 5000     	ADDI	A,0
07/9D: F70A     	BRNZ	9F
07/9F:          	
07/9E:          	; REMOVE THE LINES
07/9E: 38A3     	LOADI	C,@+5
07/9F: BB00     	STOREF	[D],C
07/A0: 3409     	LOADI	B,LOP0_B
07/A1: 3880     	LOADI	C,ERASEL
07/A2: FF5F     	JUMP	INDIR
07/A3: 5000     	ADDI	A,0
07/A4: F703     	BRNZ	9F
07/A6:          
07/A5:          	; GO BACK TO COMMAND LINE
07/A5: 3402     8:	LOADI	B,CMD0_B
07/A6: 3882     	LOADI	C,PROMPT
07/A7: FF5A     	JUMP	INDIR
07/A9:          	
07/A8:          	; ERROR
07/A8: 3402     9:	LOADI	B,CMD0_B
07/A9: 3880     	LOADI	C,ERROR
07/AA: FF57     	JUMP	INDIR
07/AC:          	
07/AB:          	; PRINTS THE SIZE AS 16 BIT BASE-10 NUMBER
07/AB:          	; [TEMP] = NUMBER TO PRINT
07/AB:          	; USES: A, B, C
07/AB: 7C02     PRINTD: SUBI	D,2
07/AD:          	
07/AC:          	; SET PADDING TO NULL CHARACTER AT FIRST
07/AC: 3800     	LOADI	C,0
07/AD: A82C     	STORE	[PADDING],C
07/AF:          
07/AE:          V	= 10000
07/AE: 3027     	LOADI	A,V/256
07/AF: 3410     	LOADI	B,V%256
07/B0: 38B2     	LOADI	C,@+2
07/B1: FF14     	JUMP	DOCHAR
07/B3:          	
07/B2:          V	= 1000
07/B2: 3003     	LOADI	A,V/256
07/B3: 34E8     	LOADI	B,V%256
07/B4: 38B6     	LOADI	C,@+2
07/B5: FF10     	JUMP	DOCHAR
07/B7:          	
07/B6:          V	= 100
07/B6: 3000     	LOADI	A,V/256
07/B7: 3464     	LOADI	B,V%256
07/B8: 38BA     	LOADI	C,@+2
07/B9: FF0C     	JUMP	DOCHAR
07/BB:          	
07/BA:          V	= 10
07/BA: 3000     	LOADI	A,V/256
07/BB: 340A     	LOADI	B,V%256
07/BC: 38BE     	LOADI	C,@+2
07/BD: FF08     	JUMP	DOCHAR
07/BF:          	
07/BE: 3030     	LOADI	A,'0'
07/BF: A02C     	STORE	[PADDING],A
07/C1:          	
07/C0:          V	= 1
07/C0: 3000     	LOADI	A,V/256
07/C1: 3401     	LOADI	B,V%256
07/C2: 38C4     	LOADI	C,@+2
07/C3: FF02     	JUMP	DOCHAR
07/C5:          	
07/C4: 5C02     	ADDI	D,2 
07/C5: FF3D     	JUMP	IRET
07/C7:          	
07/C6:          	; A = UPPER SUB
07/C6:          	; B = LOWER SUB
07/C6: A82D     DOCHAR:	STORE	[LEAFRET],C
07/C7: 882C     	LOAD	C,[PADDING]	
07/C8: A80A     	STORE	[CHAR],C
07/CA:          	
07/C9:          	; PARK THE STACK
07/C9: AC0C     	STORE	[SPARK],D
07/CB:          
07/CA:          	; GET THE SIZE
07/CA: 8816     0:	LOAD	C,[TEMP]
07/CB: 8C17     	LOAD	D,[TEMP+1]
07/CD:          	
07/CC:          	; DO 16 BIT SUBTRACTION
07/CC: 6D00     1:	SUB	D,B
07/CD: F002     	BRC	2F
07/CE: 7801     	SUBI	C,1
07/CF: F10D     	BRNC	4F
07/D0: 6800     2:	SUB	C,A
07/D1: F10B     	BRNC	4F
07/D3:          	
07/D2:          	; SAVE VALUE
07/D2: A816     	STORE	[TEMP],C
07/D3: AC17     	STORE	[TEMP+1],D
07/D5:          	
07/D4:          	; GET THE CHAR AND CHECK TO SEE IF IT IS A WHITESPACE
07/D4: 880A     	LOAD	C,[CHAR]
07/D5: 3C20     	LOADI	D,0X20
07/D6: DB00     	CMP	C,D
07/D7: F802     	BRA	3F
07/D9:          	
07/D8:          	; SET PADDING AND CHAR TO '0'
07/D8: 3830     	LOADI	C,'0'
07/D9: A82C     	STORE	[PADDING],C
07/DB:          	
07/DA: 5801     3:	ADDI	C,1
07/DB: A80A     	STORE	[CHAR],C
07/DC: FFED     	JUMP	0B
07/DE:          	
07/DD:          	; RESTORE THE STACK
07/DD: 8C0C     4:	LOAD	D,[SPARK]
07/DF:          	
07/DE:          	; SEE IF IT IS ZERO
07/DE: 800A     	LOAD	A,[CHAR]
07/DF: 5000     	ADDI	A,0
07/E0: F702     	BRNZ	5F
07/E1: 882D     	LOAD	C,[LEAFRET]
07/E2: FE1D     	JUMPR	C
07/E4:          	
07/E3:          	; PRINT THE CHARACTER
07/E3: 3401     5:	LOADI	B,S_PUTC
07/E4: 3807     	LOADI	C,BI	; RETURN BANK
07/E5: BB01     	STOREF	[D+1],C
07/E6: 882D     	LOAD	C,[LEAFRET]
07/E7: FF1C     	JUMP	SYSCALL
07/E9:          	
07/E8:          	; BANK IS DONE, MOVE ON TO THE NEXT
07/E8:          BI	= BI+1
07/E8:          .TEXT
07/E8:          .BANK	BI
08/80:          UOP4_B	= BI
08/80:          
08/80:          	; SHADOW OF PFREE
08/80: 7C02     PFREEA:	SUBI	D,2
08/82:          
08/81:          	; CHECK STATE
08/81: 8011     	LOAD	A,[STATE]
08/82: 5000     	ADDI	A,0
08/83: F735     	BRNZ	9F
08/85:          
08/84:          	; SET TEMP TO NUMFREE
08/84: 802A     	LOAD	A,[NUMFREE]
08/85: 842B     	LOAD	B,[NUMFREE+1]
08/86: A016     	STORE	[TEMP],A
08/87: A417     	STORE	[TEMP+1],B
08/89:          
08/88:          	; DO CR/LF
08/88: 300A     PTEMP:	LOADI	A,0X0A
08/89: 3401     	LOADI	B,S_PUTC
08/8A: 3808     	LOADI	C,BI
08/8B: BB01     	STOREF	[D+1],C
08/8C: 388E     	LOADI	C,@+2
08/8D: FF76     	JUMP	SYSCALL
08/8E: 300D     	LOADI	A,0X0D
08/8F: 3401     	LOADI	B,S_PUTC
08/90: 3892     	LOADI	C,@+2
08/91: FF72     	JUMP	SYSCALL
08/93:          	
08/92:          	; PRINT TEMP
08/92: 3897     	LOADI	C,@+5
08/93: BB00     	STOREF	[D],C
08/94: 3407     	LOADI	B,UOP3_B
08/95: 38AB     	LOADI	C,PRINTD
08/96: FF6B     	JUMP	INDIR
08/98:          	
08/97:          	; RETURN
08/97: 5C02     	ADDI	D,2
08/98: 3402     	LOADI	B,CMD0_B
08/99: 3882     	LOADI	C,PROMPT
08/9A: FF67     	JUMP	INDIR
08/9C:          	
08/9B:          	; SHADOW OF PLINES
08/9B: 7C02     PLINESA:SUBI	D,2
08/9D:          
08/9C:          	; CHECK STATE
08/9C: 8011     	LOAD	A,[STATE]
08/9D: 5000     	ADDI	A,0
08/9E: F71A     	BRNZ	9F
08/A0:          
08/9F:          	; COUNT NUMBER OF LINES
08/9F: A016     	STORE	[TEMP],A
08/A0: A017     	STORE	[TEMP+1],A
08/A2:          	
08/A1:          	; START AT LINETAB
08/A1: AC0C     	STORE	[SPARK],D
08/A2: 3800     	LOADI	C,0
08/A3: 3C0F     	LOADI	D,LINETAB
08/A5:          	
08/A4:          	; INDIRECT TO NEXT BLOCK
08/A4: A880     0:	STORE	[DBANK],C
08/A5: 9B00     	LOADF	C,[D]
08/A6: 9F01     	LOADF	D,[D+1]
08/A7: 5800     	ADDI	C,0
08/A8: F60C     	BRZ	8F
08/AA:          	
08/A9:          	; GRAB NUMBER OF LINES ON BLOCK
08/A9: A880     	STORE	[DBANK],C
08/AA: 9702     	LOADF	B,[D+2]
08/AB: 3000     	LOADI	A,0
08/AC: A080     	STORE	[DBANK],A
08/AE:          	
08/AD:          	; ADD IT TO TEMP
08/AD: 8017     	LOAD	A,[TEMP+1]
08/AE: 4100     	ADD	A,B
08/AF: A017     	STORE	[TEMP+1],A
08/B0: F1F3     	BRNC	0B
08/B1: 8016     	LOAD	A,[TEMP]
08/B2: 5001     	ADDI	A,1
08/B3: A016     	STORE	[TEMP],A
08/B4: FFEF     	JUMP	0B
08/B6:          
08/B5:          	; DONE, GO PRINT IT OUT
08/B5: 3000     8:	LOADI	A,0
08/B6: A080     	STORE	[DBANK],A
08/B7: 8C0C     	LOAD	D,[SPARK]
08/B8: FFCF     	JUMP	PTEMP
08/BA:          	
08/B9:          	; ERROR
08/B9: 5C02     9:	ADDI	D,2
08/BA: 3402     	LOADI	B,CMD0_B
08/BB: 3880     	LOADI	C,ERROR
08/BC: FF45     	JUMP	INDIR
08/BE:          	
08/BD:          	
08/BD:          	; SHADOW OF DOFWRIT
08/BD: 8011     DOFWRIA:LOAD	A,[STATE]
08/BE: 5000     	ADDI	A,0
08/BF: F711     	BRNZ	9F
08/C1:          
08/C0:          	; READ THE FILE
08/C0: 3808     	LOADI	C,BI
08/C1: BB01     	STOREF	[D+1],C
08/C2: 38C7     	LOADI	C,@+5
08/C3: BB00     	STOREF	[D],C
08/C4: 340E     	LOADI	B,FIO0_B
08/C5: 3880     	LOADI	C,FWRITE
08/C6: FF3B     	JUMP	INDIR
08/C8:          	
08/C7:          	; CLOSE THE FILE REAL QUICK
08/C7: A016     	STORE	[TEMP],A
08/C8: 3407     	LOADI	B,S_CLOSE
08/C9: 38CB     	LOADI	C,@+2
08/CA: FF39     	JUMP	SYSCALL
08/CB: 8016     	LOAD	A,[TEMP]
08/CD:          	
08/CC:          	; CHECK FOR ERRORS
08/CC: 5000     	ADDI	A,0
08/CD: F403     	BRN	9F
08/CF:          	
08/CE: 3402     	LOADI	B,CMD0_B
08/CF: 3882     	LOADI	C,PROMPT
08/D0: FF31     	JUMP	INDIR
08/D2:          	
08/D1:          	; ERROR
08/D1: 3402     9:	LOADI	B,CMD0_B
08/D2: 3880     	LOADI	C,ERROR
08/D3: FF2E     	JUMP	INDIR
08/D5:          
08/D4:          	; BANK IS DONE, MOVE ON TO THE NEXT
08/D4:          BI	= BI+1
08/D4:          
08/D4:          ; ED2.S
08/D4:          ; SIMPLE TEXT EDITOR
08/D4:          ; LINE OPERATIONS
08/D4:          ; GAVIN TERSTEEG, 2024
08/D4:          ; SDMAY24-14
08/D4:          
08/D4:          .TEXT
08/D4:          .BANK	BI
09/80:          LOP0_B	= BI
09/80:          
09/80:          	; DELETES A NUMBER OF LINES STARTING FROM THE
09/80:          	; BEGINNING OF A LINE
09/80:          	; AT THE END OF EACH DELETED LINE, [ARGB] WILL BE INCREMENTED
09/80:          	; LINES WILL CONTINUE TO BE DELETED UNTIL [ARGB] > [ARGA]
09/80:          	; [CBLOCK] = LINE BLOCK
09/80:          	; [MB_PNTR] = LINE ADDRESS
09/80:          	; RETURNS A=0XFF IF ERROR, 0X00 OTHERWISE
09/80:          	; USES: A, B, C
09/80: 340C     ERASEL:	LOADI	B,LOP3_B
09/81: 3880     	LOADI	C,ERASELA
09/82: FF7F     	JUMP	INDIR
09/84:          
09/83:          	; ALLOWS A USER TO ADD LINES INTO THE BUFFER
09/83:          	; WHEN CALLED, THE ADDRESS AT [CBLOCK] / [MB_PNTR]
09/83:          	; SHOULD POINT TO AN EXISTING LINE. THE NEW LINE
09/83:          	; WILL BE PLACED AFTER THAT LINE.
09/83:          	; A '.' CAN BE USED TO EXIT FROM EDIT MODE
09/83:          	; [CBLOCK] = LINE BLOCK
09/83:          	; [MB_PNTR] = LINE ADDRESS
09/83:          	; A = 0 IF APPENDING TO START OF BUFFER
09/83:          	; RETURNS A=0XFF IF ERROR, 0X00 OTHERWISE
09/83:          	; USES: A, B, C
09/83:          	; 
09/83: 340A     INPUTL:	LOADI	B,LOP1_B
09/84: 3880     	LOADI	C,INPUTLA
09/85: FF7C     	JUMP	INDIR
09/87:          
09/86:          	; SETS [CBLOCK] AND [MB_PNTR] TO THE START OF A LINE
09/86:          	; [MB_END] WILL ALSO BE UPDATED FOR THE CURRENT BLOCK
09/86:          	; [TEMP] = LINE NUMBER TO FIND
09/86:          	; RETURNS A=0X00 IF FOUND, 0XFF OTHERWISE
09/86:          	; USES: A, B, C
09/86: 840F     FINDL:	LOAD	B,[LINETAB]
09/87: 8810     	LOAD	C,[LINETAB+1]
09/89:          	
09/88:          	; INITALIZE PBLOCK
09/88: 3000     	LOADI	A,0
09/89: A028     	STORE	[PBLOCK],A
09/8A: 300F     	LOADI	A,LINETAB
09/8B: A029     	STORE	[PBLOCK+1],A
09/8D:          	
09/8C: A400     0:	STORE	[CBLOCK],B
09/8D: A801     	STORE	[CBLOCK+1],C
09/8E: 30FF     	LOADI	A,0XFF
09/8F: 5400     	ADDI	B,0
09/90: F672     	BRZ	IRET
09/91: A480     	STORE	[DBANK],B
09/92: 9602     	LOADF	B,[C+2]
09/93: 3000     	LOADI	A,0
09/94: A080     	STORE	[DBANK],A
09/95: 5400     	ADDI	B,0
09/96: F60D     	BRZ	2F
09/98:          	
09/97:          	; B = LINES ON BLOCK
09/97: 8017     	LOAD	A,[TEMP+1]
09/98: 2800     	MOV	C,A
09/99: 6100     	SUB	A,B
09/9A: A017     	STORE	[TEMP+1],A
09/9B: 8416     	LOAD	B,[TEMP]
09/9C: F003     	BRC	1F
09/9D: 7401     	SUBI	B,1
09/9E: A416     	STORE	[TEMP],B
09/9F: F10E     	BRNC	3F
09/A1:          	
09/A0:          	; SEE IF TEMP = 0
09/A0: 5000     1:	ADDI	A,0
09/A1: F702     	BRNZ	2F
09/A2: 5400     	ADDI	B,0
09/A3: F60A     	BRZ	3F
09/A5:          	
09/A4:          	; NEXT BLOCK
09/A4: 8400     2:	LOAD	B,[CBLOCK]
09/A5: 8801     	LOAD	C,[CBLOCK+1]
09/A6: A428     	STORE	[PBLOCK],B
09/A7: A829     	STORE	[PBLOCK+1],C
09/A8: A480     	STORE	[DBANK],B
09/A9: 9600     	LOADF	B,[C]
09/AA: 9A01     	LOADF	C,[C+1]
09/AB: 3000     	LOADI	A,0
09/AC: A080     	STORE	[DBANK],A
09/AD: FFDE     	JUMP	0B
09/AF:          
09/AE:          	; FOUND BLOCK, FIND THE START OF LINE
09/AE:          	; C = OFFSET
09/AE: 8000     3:	LOAD	A,[CBLOCK]
09/AF: 8401     	LOAD	B,[CBLOCK+1]
09/B0: 5420     	ADDI	B,32
09/B1: A408     	STORE	[MB_END],B
09/B2: 8401     	LOAD	B,[CBLOCK+1]
09/B3: 5403     	ADDI	B,3
09/B4: A080     	STORE	[DBANK],A
09/B5: 9100     4:	LOADF	A,[B]
09/B6: 5000     	ADDI	A,0
09/B7: F602     	BRZ	6F
09/B8: 5401     5:	ADDI	B,1
09/B9: FFFB     	JUMP	4B
09/BB:          	
09/BA:          	; DECREMENT AND MAYBE RETURN
09/BA: 7801     6:	SUBI	C,1
09/BB: F105     	BRNC	7F
09/BC: F7FB     	BRNZ	5B
09/BD: 3000     	LOADI	A,0
09/BE: A080     	STORE	[DBANK],A
09/BF: A407     	STORE	[MB_PNTR],B
09/C0: FF42     	JUMP	IRET
09/C2:          	
09/C1:          	; ERROR!
09/C1: 3000     7:	LOADI	A,0
09/C2: A080     	STORE	[DBANK],A
09/C3: 30FF     	LOADI	A,0XFF
09/C4: FF3E     	JUMP	IRET
09/C6:          
09/C5:          	; BANK IS DONE, MOVE ON TO THE NEXT
09/C5:          BI	= BI+1
09/C5:          .TEXT
09/C5:          .BANK	BI
0A/80:          LOP1_B	= BI
0A/80:          
0A/80:          	; SHADOW ON INPUTL
0A/80:          	; ATTEMPT TO POSITION EDITOR POINTER
0A/80: 7C02     INPUTLA:SUBI	D,2
0A/81: AC0C     	STORE	[SPARK],D
0A/82: 5000     	ADDI	A,0
0A/83: F709     	BRNZ	1F
0A/85:          	
0A/84:          	; APPEND TO BEGINNING
0A/84: 3000     	LOADI	A,0
0A/85: 340F     	LOADI	B,LINETAB
0A/86: A000     	STORE	[CBLOCK],A
0A/87: A401     	STORE	[CBLOCK+1],B
0A/88: 301F     	LOADI	A,0X1F
0A/89: A007     	STORE	[MB_PNTR],A
0A/8A: 3020     	LOADI	A,0X20
0A/8B: A008     	STORE	[MB_END],A
0A/8C: FF22     	JUMP	6F
0A/8E:          	
0A/8D:          	; FIND END OF LINE TO APPEND TO
0A/8D:          	; CHECK THE NEXT CHARACTER
0A/8D: 8000     1:	LOAD	A,[CBLOCK]
0A/8E: 8401     	LOAD	B,[CBLOCK+1]
0A/8F: 8807     	LOAD	C,[MB_PNTR]
0A/90: 8C08     	LOAD	D,[MB_END]
0A/92:          	
0A/91:          	; INCREMENT POINTER
0A/91: 5801     	ADDI	C,1
0A/92: DB00     	CMP	C,D
0A/93: F604     	BRZ	3F
0A/95:          	
0A/94:          	; CHECK CHARACTER
0A/94: A080     2:	STORE	[DBANK],A
0A/95: 9E00     	LOADF	D,[C]
0A/96: 5C00     	ADDI	D,0
0A/97: F508     	BRNN	4F
0A/99:          	
0A/98:          	; PEEK INTO NEXT BLOCK
0A/98: A080     3:	STORE	[DBANK],A
0A/99: 9100     	LOADF	A,[B]
0A/9A: 9501     	LOADF	B,[B+1]
0A/9B: 5000     	ADDI	A,0
0A/9C: F60D     	BRZ	5F	; END OF LINE (END OF BUFFER)
0A/9D: 3803     	LOADI	C,3
0A/9E: 4900     	ADD	C,B
0A/9F: FFF4     	JUMP	2B
0A/A1:          	
0A/A0:          	; WE FOUND A CHARACTER
0A/A0:          	; IS IT ZERO?
0A/A0: F609     4:	BRZ	5F
0A/A1: 3C00     	LOADI	D,0
0A/A2: AC80     	STORE	[DBANK],D
0A/A3: A000     	STORE	[CBLOCK],A
0A/A4: A401     	STORE	[CBLOCK+1],B
0A/A5: A807     	STORE	[MB_PNTR],C
0A/A6: 3820     	LOADI	C,32
0A/A7: 4900     	ADD	C,B
0A/A8: A808     	STORE	[MB_END],C
0A/A9: FFE3     	JUMP	1B
0A/AB:          	
0A/AA:          	; YEP, ARE AT THE END OF THE LINE
0A/AA: 3C00     5:	LOADI	D,0
0A/AB: AC80     	STORE	[DBANK],D
0A/AC: 8C0C     	LOAD	D,[SPARK]
0A/AE:          	
0A/AD:          	; THE TEXT INPUT WILL BE PLACED IN BUF_B
0A/AD: 3402     	LOADI	B,BUF_B
0A/AE: A46C     	STORE	[ARG_BNK],B
0A/B0:          	
0A/AF:          	; INDIRECT JUMP
0A/AF: 340B     6:	LOADI	B,LOP2_B
0A/B0: 3880     	LOADI	C,INPUTLB
0A/B1: FF50     	JUMP	INDIR
0A/B3:          	
0A/B2:          	; FINAL PART OF THE APPEND PROCESS
0A/B2:          	; CHECK THE REST-OF-LINE BUFFER
0A/B2: 8C0C     INPUTLC:LOAD	D,[SPARK]
0A/B3: 3003     	LOADI	A,BUF_B+1
0A/B4: A080     	STORE	[DBANK],A
0A/B6:          	
0A/B5:          	; GRAB FIRST BYTE
0A/B5: 8400     	LOAD	B,[0]
0A/B6: 3000     	LOADI	A,0
0A/B7: A080     	STORE	[DBANK],A
0A/B9:          	
0A/B8:          	; DO WE EVEN CARE?
0A/B8: 5400     	ADDI	B,0
0A/B9: F437     	BRN	8F
0A/BB:          	
0A/BA:          	; STORE CBLOCK
0A/BA: 8000     	LOAD	A,[CBLOCK]
0A/BB: 8401     	LOAD	B,[CBLOCK+1]
0A/BC: 8807     	LOAD	C,[MB_PNTR]
0A/BD: A016     	STORE	[TEMP],A
0A/BE: A417     	STORE	[TEMP+1],B
0A/BF: A806     	STORE	[POINTER],C
0A/C1:          	
0A/C0:          	; YES WE SO, ALLOCATE ANOTHER BLOCK
0A/C0: 380A     	LOADI	C,BI
0A/C1: BB01     	STOREF	[D+1],C
0A/C2: 38C7     	LOADI	C,@+5
0A/C3: BB00     	STOREF	[D],C
0A/C4: 340D     	LOADI	B,MEM0_B
0A/C5: 38A1     	LOADI	C,MALLOC
0A/C6: FF3B     	JUMP	INDIR
0A/C8:          	
0A/C7:          	; DID IT WORK?
0A/C7: 5000     	ADDI	A,0
0A/C8: F72B     	BRNZ	9F
0A/CA:          	
0A/C9:          	; SET UP LINE COUNTER
0A/C9: 8401     	LOAD	B,[CBLOCK+1]
0A/CA: 8000     	LOAD	A,[CBLOCK]
0A/CB: A080     	STORE	[DBANK],A
0A/CC: 3000     	LOADI	A,0
0A/CD: B102     	STOREF	[B+2],A
0A/CE: A080     	STORE	[DBANK],A
0A/D0:          	
0A/CF:          	; COPY OVER THE CONTENTS
0A/CF: 5403     	ADDI	B,3
0A/D0: 3800     	LOADI	C,0
0A/D2:          	
0A/D1:          	; GET A CHARACTER FROM THE R-O-L BUFFER
0A/D1: 3003     0:	LOADI	A,BUF_B+1
0A/D2: A080     	STORE	[DBANK],A
0A/D3: 9E00     	LOADF	D,[C]
0A/D4: 3000     	LOADI	A,0
0A/D5: A080     	STORE	[DBANK],A
0A/D7:          	
0A/D6:          	; IS IT ZERO?
0A/D6: 8000     	LOAD	A,[CBLOCK]
0A/D7: 5C00     	ADDI	D,0
0A/D8: F707     	BRNZ	1F
0A/DA:          	
0A/D9:          	; YES IT IS
0A/D9: 8C01     	LOAD	D,[CBLOCK+1]
0A/DA: A080     	STORE	[DBANK],A
0A/DB: 9302     	LOADF	A,[D+2]
0A/DC: 5001     	ADDI	A,1
0A/DD: B302     	STOREF	[D+2],A
0A/DE: 3C00     	LOADI	D,0
0A/DF: FF01     	JUMP	2F
0A/E1:          	
0A/E0:          	; PLACE IT IN THE BUFFER
0A/E0: A080     1:	STORE	[DBANK],A
0A/E1: BD00     2:	STOREF	[B],D
0A/E2: 3000     	LOADI	A,0
0A/E3: A080     	STORE	[DBANK],A
0A/E5:          	
0A/E4:          	; NEXT CHARACTER (MAYBE)
0A/E4: 5401     	ADDI	B,1
0A/E5: 5801     	ADDI	C,1
0A/E6: 5C00     	ADDI	D,0
0A/E7: F5E9     	BRNN	0B
0A/E9:          	
0A/E8:          	; COPY COMPLETE
0A/E8: 8C0C     	LOAD	D,[SPARK]
0A/EA:          	
0A/E9:          	; RESTORE CBLOCK
0A/E9: 8016     	LOAD	A,[TEMP]
0A/EA: 8417     	LOAD	B,[TEMP+1]
0A/EB: 8806     	LOAD	C,[POINTER]
0A/EC: A000     	STORE	[CBLOCK],A
0A/ED: A401     	STORE	[CBLOCK+1],B
0A/EE: A807     	STORE	[MB_PNTR],C
0A/EF: 5420     	ADDI	B,32
0A/F0: A408     	STORE	[MB_END],B
0A/F2:          	
0A/F1:          	; GO TO INPUTLB
0A/F1: 340B     8:	LOADI	B,LOP2_B
0A/F2: 3880     	LOADI	C,INPUTLB
0A/F3: FF0E     	JUMP	INDIR
0A/F5:          	
0A/F4:          	; EXIT
0A/F4: 5C02     9:	ADDI	D,2
0A/F5: FF0D     	JUMP	IRET
0A/F7:          	
0A/F6:          	; BANK IS DONE, MOVE ON TO THE NEXT
0A/F6:          BI	= BI+1
0A/F6:          .TEXT
0A/F6:          .BANK	BI
0B/80:          LOP2_B	= BI
0B/80:          
0B/80:          
0B/80:          	; GRT A LINE
0B/80:          	; DO CR/LF
0B/80: 380B     INPUTLB:LOADI	C,BI
0B/81: BB01     	STOREF	[D+1],C
0B/82: 300A     	LOADI	A,0X0A
0B/83: 3401     	LOADI	B,S_PUTC
0B/84: 3886     	LOADI	C,@+2
0B/85: FF7E     	JUMP	SYSCALL
0B/86: 300D     	LOADI	A,0X0D
0B/87: 3401     	LOADI	B,S_PUTC
0B/88: 388A     	LOADI	C,@+2
0B/89: FF7A     	JUMP	SYSCALL
0B/8B:          	
0B/8A:          	; GET USER INPUT
0B/8A: 3405     	LOADI	B,S_INPUT
0B/8B: 388D     	LOADI	C,@+2
0B/8C: FF77     	JUMP	SYSCALL
0B/8E:          	
0B/8D:          	; WHILE WE ARE HERE, LETS RESET THE REST-OF-LINE BUFFER
0B/8D: 3803     	LOADI	C,BUF_B+1
0B/8E: A880     	STORE	[DBANK],C
0B/8F: 38FF     	LOADI	C,0XFF
0B/90: A800     	STORE	[0],C
0B/92:          	
0B/91:          	; SEE IF THE USER WANTS TO BE DONE
0B/91: 3802     	LOADI	C,BUF_B
0B/92: A880     	STORE	[DBANK],C
0B/93: 8000     	LOAD	A,[0]
0B/94: 8401     	LOAD	B,[1]
0B/95: 702E     	SUBI	A,'.'
0B/96: F701     	BRNZ	1F
0B/97: 5400     	ADDI	B,0
0B/98: 3800     1:	LOADI	C,0
0B/99: A880     	STORE	[DBANK],C
0B/9A: F661     	BRZ	9F
0B/9C:          
0B/9B:          	; PLACE LINE IN BUFFER
0B/9B:          	; SET POINTER FOR BUFFER
0B/9B: 3000     	LOADI	A,0
0B/9C: A006     	STORE	[POINTER],A
0B/9E:          	
0B/9D:          	; FIRST, WE MOVE ANY EXISTING TEXT OUT OF THE WAY
0B/9D: 8008     	LOAD	A,[MB_END]
0B/9E: 8407     	LOAD	B,[MB_PNTR]
0B/9F: 8800     	LOAD	C,[CBLOCK]
0B/A1:          
0B/A0:          	; INCREMENT, AND SEE IF WE ARE AT THE END OF THE BLOCK
0B/A0:          	; IF SO, ALLOCATE A NEW BLOCK 
0B/A0: 5401     	ADDI	B,1
0B/A1: D100     	CMP	A,B
0B/A2: F621     	BRZ	5F
0B/A4:          
0B/A3:          	; CHECK TO SEE IF THERE IS A LINE HERE
0B/A3: A880     	STORE	[DBANK],C
0B/A4: 9900     	LOADF	C,[B]
0B/A5: 5800     	ADDI	C,0
0B/A6: 3800     	LOADI	C,0
0B/A7: A880     	STORE	[DBANK],C
0B/A9:          	
0B/A8:          	; NOPE, WE ARE CLEAR TO ENTER DATA
0B/A8: F71B     	BRNZ	5F
0B/AA:          
0B/A9:          	; COPY REST OF BUFFER TO BUF_B+1
0B/A9: AC0C     	STORE	[SPARK],D
0B/AA: 3C00     	LOADI	D,0
0B/AB: 8000     2:	LOAD	A,[CBLOCK]
0B/AC: 8801     	LOAD	C,[CBLOCK+1]
0B/AD: A080     	STORE	[DBANK],A
0B/AE: 9100     	LOADF	A,[B]
0B/AF: 5000     	ADDI	A,0
0B/B0: F704     	BRNZ	3F
0B/B2:          	
0B/B1:          	; SUBTRACT ONE FROM THE LINE COUNT
0B/B1: 9202     	LOADF	A,[C+2]
0B/B2: 7001     	SUBI	A,1
0B/B3: B202     	STOREF	[C+2],A
0B/B4: 9100     	LOADF	A,[B]
0B/B6:          	
0B/B5:          	; GO STORE IT
0B/B5: 3803     3:	LOADI	C,BUF_B+1
0B/B6: A880     	STORE	[DBANK],C
0B/B7: B300     	STOREF	[D],A
0B/B8: 38FF     	LOADI	C,0XFF
0B/B9: BB01     	STOREF	[D+1],C
0B/BA: 3800     	LOADI	C,0
0B/BB: A880     	STORE	[DBANK],C
0B/BD:          	
0B/BC:          	; NEXT CHARACTER
0B/BC: 5401     4:	ADDI	B,1
0B/BD: 5C01     	ADDI	D,1
0B/BE: 8808     	LOAD	C,[MB_END]
0B/BF: D900     	CMP	C,B
0B/C0: F603     	BRZ	5F
0B/C1: 5000     	ADDI	A,0
0B/C2: F4F9     	BRN	4B
0B/C3: FFE7     	JUMP	2B
0B/C5:          	
0B/C4:          	; START COPYING
0B/C4: 8407     5:	LOAD	B,[MB_PNTR]
0B/C5: 3800     	LOADI	C,0
0B/C6: FF0B     	JUMP	1F
0B/C8:          	
0B/C7:          	; GRAB A CHARACTER FROM THE BUFFER
0B/C7: 3002     0:	LOADI	A,BUF_B
0B/C8: 8806     	LOAD	C,[POINTER]
0B/C9: 5801     	ADDI	C,1
0B/CA: A806     	STORE	[POINTER],C
0B/CB: A080     	STORE	[DBANK],A
0B/CC: 9AFF     	LOADF	C,[C+0-1]
0B/CD: 3000     	LOADI	A,0
0B/CE: A080     	STORE	[DBANK],A
0B/D0:          	
0B/CF:          	; CHECK IF ITS ZERO
0B/CF: 5800     	ADDI	C,0
0B/D0: 8008     	LOAD	A,[MB_END]
0B/D1: F61D     	BRZ	5F
0B/D3:          	
0B/D2:          	; DO WE HAVE SPACE TO STORE IT?
0B/D2: 5401     1:	ADDI	B,1
0B/D3: D100     	CMP	A,B
0B/D4: F60C     	BRZ	4F
0B/D6:          	
0B/D5:          	; STORE IT
0B/D5: 8000     2:	LOAD	A,[CBLOCK]
0B/D6: 8C01     	LOAD	D,[CBLOCK+1]
0B/D7: A080     	STORE	[DBANK],A
0B/D8: B900     	STOREF	[B],C
0B/DA:          	
0B/D9:          	; IF ITS ZERO, WE INCREMENT THE LINE COUNTER
0B/D9: 5800     	ADDI	C,0
0B/DA: F703     	BRNZ	3F
0B/DB: 9B02     	LOADF	C,[D+2]
0B/DC: 5801     	ADDI	C,1
0B/DD: BB02     	STOREF	[D+2],C
0B/DF:          
0B/DE:          	; TAKE IT FROM THE TOP
0B/DE: 3000     3:	LOADI	A,0
0B/DF: A080     	STORE	[DBANK],A
0B/E0: FFE6     	JUMP	0B
0B/E2:          	
0B/E1:          	; WE ARE OUT OF MEMORY ON THIS BLOCK, MOVE ON TO THE NEXT
0B/E1:          	; DO A MALLOC
0B/E1: A80A     4:	STORE	[CHAR],C
0B/E2: 8C0C     	LOAD	D,[SPARK]
0B/E3: 38E8     	LOADI	C,@+5
0B/E4: BB00     	STOREF	[D],C
0B/E5: 340D     	LOADI	B,MEM0_B
0B/E6: 38A1     	LOADI	C,MALLOC
0B/E7: FF1A     	JUMP	INDIR
0B/E9:          	
0B/E8:          	; DID IT WORK?
0B/E8: 5000     	ADDI	A,0
0B/E9: F712     	BRNZ	9F
0B/EB:          	
0B/EA:          	; SET MB POINTERS AND GO
0B/EA: 8407     	LOAD	B,[MB_PNTR]
0B/EB: 3800     	LOADI	C,0
0B/EC: B9FF     	STOREF	[B+0-1],C
0B/ED: 880A     	LOAD	C,[CHAR]
0B/EE: FFE6     	JUMP	2B
0B/F0:          
0B/EF:          	; WRAP THINGS UP AND MOVE ON TO THE FINAL STAGE
0B/EF: A407     5:	STORE	[MB_PNTR],B
0B/F0: 7001     	SUBI	A,1
0B/F1: D100     	CMP	A,B
0B/F2: F606     	BRZ	6F
0B/F3: 8000     	LOAD	A,[CBLOCK]
0B/F4: A080     	STORE	[DBANK],A
0B/F5: 30FF     	LOADI	A,0XFF
0B/F6: B101     	STOREF	[B+1],A
0B/F7: 3000     	LOADI	A,0
0B/F8: A080     	STORE	[DBANK],A
0B/FA:          	
0B/F9: 340A     6:	LOADI	B,LOP1_B
0B/FA: 38B2     	LOADI	C,INPUTLC
0B/FB: FF06     	JUMP	INDIR
0B/FD:          
0B/FC:          	; EXIT
0B/FC: 5C02     9:	ADDI	D,2
0B/FD: FF05     	JUMP	IRET
0B/FF:          	
0B/FE:          	; BANK IS DONE, MOVE ON TO THE NEXT
0B/FE:          BI	= BI+1
0B/FE:          .TEXT
0B/FE:          .BANK	BI
0C/80:          LOP3_B	= BI
0C/80:          
0C/80:          	; SHADOW OF ERASEL
0C/80: 7C02     ERASELA:SUBI	D,2
0C/81: AC0C     	STORE	[SPARK],D
0C/83:          
0C/82:          	; SET BASE POINTER
0C/82: 8007     	LOAD	 A,[MB_PNTR]
0C/83: A006     	STORE	[POINTER],A
0C/85:          
0C/84:          	; ERASE A LINE
0C/84:          	; START BY DECREMENTING THE LINE COUNT ON THE BLOCK
0C/84: 8400     0:	LOAD	B,[CBLOCK]
0C/85: 8801     	LOAD	C,[CBLOCK+1]
0C/86: 8C07     	LOAD	D,[MB_PNTR]
0C/87: A480     	STORE	[DBANK],B
0C/88: 9202     	LOADF	A,[C+2]
0C/89: 7001     	SUBI	A,1
0C/8A: B202     	STOREF	[C+2],A
0C/8C:          	
0C/8B:          	; SCRATCH THE LINE START OUT
0C/8B: 30FF     	LOADI	A,0XFF
0C/8C: B300     	STOREF	[D],A
0C/8E:          	
0C/8D:          	; C = MB_END
0C/8D:          	; D = MB_PNTR
0C/8D: 5820     	ADDI	C,32
0C/8F:          	
0C/8E:          	; MARCH UNTIL THE NEXT LINE IS FOUND
0C/8E: 5C01     1:	ADDI	D,1
0C/8F: DB00     	CMP	C,D
0C/90: F604     	BRZ	2F
0C/92:          	
0C/91:          	; CHECK CHARACTER
0C/91: 9300     	LOADF	A,[D]
0C/92: 5000     	ADDI	A,0
0C/93: F630     	BRZ	5F
0C/94: F5F9     	BRNN	1B 
0C/96:          
0C/95:          	; MOVE ON TO THE NEXT BLOCK
0C/95: 92E0     2:	LOADF	A,[C+0-32]
0C/96: 96E1     	LOADF	B,[C+1-32]
0C/97: 9EE2     	LOADF	D,[C+2-32]
0C/98: 5C00     	ADDI	D,0
0C/99: 3C00     	LOADI	D,0
0C/9A: AC80     	STORE	[DBANK],D
0C/9C:          	
0C/9B:          	; SAVE NEXT BLOCK IN TEMP
0C/9B: A016     	STORE	[TEMP],A
0C/9C: A417     	STORE	[TEMP+1],B
0C/9E:          		
0C/9D:          	; CAN WE DEALLOCATE THE BLOCK?
0C/9D:          	; IF THERE ARE STILL LINES ON THE BLOCK, THEN NO 
0C/9D: F716     	BRNZ	3F
0C/9F:          	
0C/9E:          	; SEE IF THERE WAS ANYTHING THAT CAME BEFORE THE LINE
0C/9E: 8C06     	LOAD	D,[POINTER]
0C/9F: 781D     	SUBI	C,32-3
0C/A0: DB00     	CMP	C,D
0C/A1: F712     	BRNZ	3F
0C/A3:          	
0C/A2:          	; ALRIGHT, WE CAN FREE IT
0C/A2:          	; LINK THE NEXT BLOCK ONTO THE PREVIOUS BLOCK
0C/A2: 8828     	LOAD	C,[PBLOCK]
0C/A3: 8C29     	LOAD	D,[PBLOCK+1]
0C/A4: A880     	STORE	[DBANK],C
0C/A5: B300     	STOREF	[D],A
0C/A6: B701     	STOREF	[D+1],B
0C/A7: 3800     	LOADI	C,0
0C/A8: A880     	STORE	[DBANK],C
0C/AA:          	
0C/A9:          	; FREE THE BLOCK
0C/A9: 8C0C     	LOAD	D,[SPARK]
0C/AA: 380C     	LOADI	C,BI
0C/AB: BB01     	STOREF	[D+1],C
0C/AC: 38B1     	LOADI	C,@+5
0C/AD: BB00     	STOREF	[D],C
0C/AE: 340D     	LOADI	B,MEM0_B
0C/AF: 38DE     	LOADI	C,FREE
0C/B0: FF51     	JUMP	INDIR
0C/B2:          	
0C/B1:          	; GET THE NEXT BLOCK FROM TEMP
0C/B1: 8016     	LOAD	A,[TEMP]
0C/B2: 8417     	LOAD	B,[TEMP+1]
0C/B3: FF04     	JUMP	4F
0C/B5:          
0C/B4:          	; SET CURRENT BLOCK AS PREVIOUS BLOCK
0C/B4: 8800     3:	LOAD	C,[CBLOCK]
0C/B5: 8C01     	LOAD	D,[CBLOCK+1]
0C/B6: A828     	STORE	[PBLOCK],C
0C/B7: AC29     	STORE	[PBLOCK+1],D
0C/B9:          	
0C/B8:          	; UPDATE SHIFT POINTER AND KEEP MARCHING
0C/B8: A000     4:	STORE	[CBLOCK],A
0C/B9: A401     	STORE	[CBLOCK+1],B
0C/BA: 3C03     	LOADI	D,3
0C/BB: 4D00     	ADD	D,B
0C/BC: AC06     	STORE	[POINTER],D
0C/BD: 3820     	LOADI	C,32
0C/BE: 4900     	ADD	C,B
0C/BF: 5000     	ADDI	A,0
0C/C0: F629     	BRZ	9F
0C/C1: A080     	STORE	[DBANK],A
0C/C2: 7C01     	SUBI	D,1
0C/C3: FFCA     	JUMP	1B
0C/C5:          	
0C/C4:          	; FOUND THE START OF A NEW LINE
0C/C4: 3000     5:	LOADI	A,0
0C/C5: A080     	STORE	[DBANK],A
0C/C6: A808     	STORE	[MB_END],C
0C/C7: AC07     	STORE	[MB_PNTR],D
0C/C9:          	
0C/C8:          	; ENSURE ARGA > ARGB
0C/C8: 8012     	LOAD	A,[ARGA]
0C/C9: 8414     	LOAD	B,[ARGB]
0C/CA: D100     	CMP	A,B
0C/CB: F10E     	BRB	8F
0C/CC: F804     	BRA	6F
0C/CD: 8013     	LOAD	A,[ARGA+1]
0C/CE: 8415     	LOAD	B,[ARGB+1]
0C/CF: D100     	CMP	A,B
0C/D0: F909     	BRBE	8F
0C/D2:          	
0C/D1:          	; INCREMENT ARGB
0C/D1: 8015     6:	LOAD	A,[ARGB+1]
0C/D2: 5001     	ADDI	A,1
0C/D3: A015     	STORE	[ARGB+1],A
0C/D4: F104     	BRNC	7F
0C/D5: 8014     	LOAD	A,[ARGB]
0C/D6: 5001     	ADDI	A,1
0C/D7: A014     	STORE	[ARGB],A
0C/D8: F001     	BRC	8F
0C/DA:          
0C/D9:          	; GO BACK AND DO ANOTHER LINE
0C/D9: FFAA     7:	JUMP	0B
0C/DB:          
0C/DA:          	; WE ARE DONE PROCESSING, CLEAN UP
0C/DA: 8007     8:	LOAD	A,[MB_PNTR]
0C/DB: 8408     	LOAD	B,[MB_END]
0C/DC: 8806     	LOAD	C,[POINTER]
0C/DD: 8C00     	LOAD	D,[CBLOCK]
0C/DF:          	
0C/DE:          	; DO WE NEED TO?
0C/DE: D200     	CMP	A,C
0C/DF: F90A     	BRBE	9F
0C/E1:          	
0C/E0:          	; YES WE DO
0C/E0: AC80     	STORE	[DBANK],D
0C/E1: D100     8:	CMP	A,B
0C/E2: F607     	BRZ	9F
0C/E3: 9C00     	LOADF	D,[A]
0C/E4: BE00     	STOREF	[C],D
0C/E5: 3CFF     	LOADI	D,0XFF
0C/E6: BE01     	STOREF	[C+1],D
0C/E7: 5001     	ADDI	A,1
0C/E8: 5801     	ADDI	C,1
0C/E9: FFF7     	JUMP	8B
0C/EB:          
0C/EA:          	; RETURN
0C/EA: 3000     9:	LOADI	A,0
0C/EB: A080     	STORE	[DBANK],A
0C/EC: 8C0C     	LOAD	D,[SPARK]
0C/ED: 5C02     	ADDI	D,2
0C/EE: FF14     	JUMP	IRET
0C/F0:          	
0C/EF:          	; BANK IS DONE, MOVE ON TO THE NEXT
0C/EF:          BI	= BI+1
0C/EF:          
0C/EF:          ; ED3.S
0C/EF:          ; SIMPLE TEXT EDITOR
0C/EF:          ; MEMORY AND FILE OPERATIONS
0C/EF:          ; GAVIN TERSTEEG, 2024
0C/EF:          ; SDMAY24-14
0C/EF:          
0C/EF:          
0C/EF:          .TEXT
0C/EF:          .BANK	BI
0D/80:          MEM0_B	= BI
0D/80:          
0D/80:          	; MEMORY INIT
0D/80:          	; DIVIDE THE HEAP INTO BLOCKS OF 32 BYTES, AND ADD IT
0D/80:          	; TO THE FREE TABLE
0D/80:          	; ALSO RESET THE LINE TABLE
0D/80:          	; USES: A, B, C
0D/80: 3806     MINIT:	LOADI	C,HEAP
0D/81: 8471     	LOAD	B,[MAX_DB]
0D/83:          	
0D/82:          	; SET THE START OF THE FREE BLOCK LIST
0D/82:          	; AND RESET LINE TABLE
0D/82: 3000     	LOADI	A,0
0D/83: A80D     	STORE	[FREETAB],C
0D/84: A00E     	STORE	[FREETAB+1],A
0D/85: A00F     	STORE	[LINETAB],A
0D/87:          	
0D/86:          	; MOVE TO BANK
0D/86: A880     0:	STORE	[DBANK],C
0D/87: 3020     	LOADI	A,32
0D/89:          	
0D/88:          	; WRITE FIRST 3 HEADERS
0D/88: B0E1     1:	STOREF	[A+1-32],A
0D/89: B8E0     	STOREF	[A+0-32],C
0D/8A: 5020     	ADDI	A,32
0D/8B: F5FC     	BRNN	1B
0D/8D:          	
0D/8C:          	; WRITE 4TH HEADER
0D/8C: 3000     2:	LOADI	A,0
0D/8D: A061     	STORE	[32*3+1],A
0D/8E: 5801     	ADDI	C,1
0D/8F: D900     	CMP	C,B
0D/90: F802     	BRA	3F
0D/91: A860     	STORE	[32*3],C
0D/92: FFF3     	JUMP	0B
0D/94:          	
0D/93:          	; STORE BANK ZERO TO INDICATE END OF LIST
0D/93: A060     3:	STORE	[32*3],A
0D/94: A080     	STORE	[DBANK],A
0D/96:          	
0D/95:          	; CALCULATE NUMBER OF FREE BLOCKS
0D/95: 3805     	LOADI	C,HEAP-1
0D/96: 6600     	SUB	B,C
0D/97: 4500     	SHIFTL	B
0D/98: F101     	BRNC	4F
0D/99: 5001     	ADDI	A,1
0D/9A: 4500     4:	SHIFTL	B
0D/9B: F102     	BRNC	5F
0D/9C: 4000     	SHIFTL	A
0D/9D: 5001     	ADDI	A,1
0D/9F:          
0D/9E: A02A     5:	STORE	[NUMFREE],A
0D/9F: A42B     	STORE	[NUMFREE+1],B
0D/A1:          	
0D/A0: FF62     	JUMP	IRET
0D/A2:          	
0D/A1:          	
0D/A1:          	; ALLOCATE A BLOCK OF MEMORY
0D/A1:          	; BLOCK WILL BE LINKED ONTO THE CURRENT BLOCK IN [CBLOCK]
0D/A1:          	; THEN IT WILL BE RETURN IN [CBLOCK]
0D/A1:          	; RETURNS A = 0XFF OUT OF BLOCKS, A = 0X00 OTHERWISE
0D/A1:          	; USES: A, B, C
0D/A1: AC0C     MALLOC:	STORE	[SPARK],D
0D/A2: 840D     	LOAD	B,[FREETAB]
0D/A4:          	
0D/A3:          	; MAKE SURE THE NEXT BLOCK ISN'T NULL
0D/A3: 5400     	ADDI	B,0
0D/A4: 30FF     	LOADI	A,0XFF
0D/A5: F65D     	BRZ	IRET
0D/A7:          	
0D/A6:          	; STORE THE BLOCK ADDRESS IN LBLOCK
0D/A6: 880E     	LOAD	C,[FREETAB+1]
0D/A7: A402     	STORE	[LBLOCK],B
0D/A8: A803     	STORE	[LBLOCK+1],C
0D/AA:          	
0D/A9:          	; MOVE THE NEXT BLOCK INTO FREETAB POINTER
0D/A9: A480     	STORE	[DBANK],B
0D/AA: 9200     	LOADF	A,[C]
0D/AB: 9601     	LOADF	B,[C+1]
0D/AC: 3C00     	LOADI	D,0
0D/AD: BE00     	STOREF	[C],D
0D/AE: BE01     	STOREF	[C+1],D
0D/AF: AC80     	STORE	[DBANK],D
0D/B0: A00D     	STORE	[FREETAB],A
0D/B1: A40E     	STORE	[FREETAB+1],B
0D/B3:          	
0D/B2:          	; RETURN TO USER BANK
0D/B2: 3000     	LOADI	A,0
0D/B3: A080     	STORE	[DBANK],A
0D/B5:          	
0D/B4:          	; SET THE MEMORY BLOCK POINTER
0D/B4: 8003     	LOAD	A,[LBLOCK+1]
0D/B5: 5003     	ADDI	A,3
0D/B6: A007     	STORE	[MB_PNTR],A
0D/B7: 501D     	ADDI	A,32-3
0D/B8: A008     	STORE	[MB_END],A
0D/B9: 3000     	LOADI	A,0
0D/BA: A00B     	STORE	[LINES],A
0D/BC:          	
0D/BB:          	; DECREMENT NUMFREE
0D/BB: 802B     	LOAD	A,[NUMFREE+1]
0D/BC: 7001     	SUBI	A,1
0D/BD: A02B     	STORE	[NUMFREE+1],A
0D/BE: F003     	BRC	0F
0D/BF: 802A     	LOAD	A,[NUMFREE]
0D/C0: 7001     	SUBI	A,1
0D/C1: A02A     	STORE	[NUMFREE],A
0D/C3:          	
0D/C2:          	; RESTORE STACK AND LINK
0D/C2: 8C0C     0:	LOAD	D,[SPARK]
0D/C4:          	
0D/C3:          	
0D/C3:          	; LINK THE BLOCK IN LBLOCK ONTO CBLOCK
0D/C3:          	; THE NEXT BLOCK OF CBLOCK WILL BECOME
0D/C3:          	; THE NEXT BLOCK OF LBLOCK
0D/C3:          	; AFTER THAT, CBLOCK WILL BECOME LBLOCK
0D/C3:          	; RETURNS A = 0X00
0D/C3:          	; USES: A, B, C
0D/C3: AC0C     LINK:	STORE	[SPARK],D
0D/C5:          	
0D/C4:          	; GET ADDRESS OF CBLOCK AND LBLOCK
0D/C4: 8000     	LOAD	A,[CBLOCK]
0D/C5: 8401     	LOAD	B,[CBLOCK+1]
0D/C6: 8802     	LOAD	C,[LBLOCK]
0D/C7: 8C03     	LOAD	D,[LBLOCK+1]
0D/C9:          	
0D/C8:          	; GRAB THE NEXT ADDRESS OF CBLOCK AND SET IT IN LBLOCK
0D/C8: A080     	STORE	[DBANK],A
0D/C9: 9100     	LOADF	A,[B]
0D/CA: 9501     	LOADF	B,[B+1]
0D/CB: A880     	STORE	[DBANK],C
0D/CC: B300     	STOREF	[D],A
0D/CD: B701     	STOREF	[D+1],B
0D/CE: 3000     	LOADI	A,0
0D/CF: A080     	STORE	[DBANK],A
0D/D1:          	
0D/D0:          	; RE-GRAB ADDRESS OF CBLOCK
0D/D0: 8000     	LOAD	A,[CBLOCK]
0D/D1: 8401     	LOAD	B,[CBLOCK+1]
0D/D3:          	
0D/D2:          	; SET CBLOCK NEXT TO LBLOCK
0D/D2: A080     	STORE	[DBANK],A
0D/D3: B900     	STOREF	[B],C
0D/D4: BD01     	STOREF	[B+1],D
0D/D6:          	
0D/D5:          	; SET CBLOCK TO LBLOCK
0D/D5: 3000     	LOADI	A,0
0D/D6: A080     	STORE	[DBANK],A
0D/D7: 8002     	LOAD	A,[LBLOCK]
0D/D8: 8403     	LOAD	B,[LBLOCK+1]
0D/D9: A000     	STORE	[CBLOCK],A
0D/DA: A401     	STORE	[CBLOCK+1],B
0D/DC:          	
0D/DB:          	; DONE, RESTORE STACK AND RETURN
0D/DB: 3000     	LOADI	A,0
0D/DC: 8C0C     	LOAD	D,[SPARK]
0D/DD: FF25     	JUMP	IRET
0D/DF:          	
0D/DE:          	; PLACES THE BLOCK IN [CBLOCK] ONTO THE FREE
0D/DE:          	; TABLE
0D/DE:          	; USES: A, B, C
0D/DE: AC0C     FREE:	STORE	[SPARK],D
0D/E0:          
0D/DF:          	; GRAB ADDRESSES OF THE FREETAB AND CBLOCK
0D/DF: 8000     	LOAD	A,[CBLOCK]
0D/E0: 8401     	LOAD	B,[CBLOCK+1]
0D/E1: 880D     	LOAD	C,[FREETAB]
0D/E2: 8C0E     	LOAD	D,[FREETAB+1]
0D/E4:          	
0D/E3:          	; LINK REST OF FREETAB AFTER CBLOCK
0D/E3: A080     	STORE	[DBANK],A
0D/E4: B900     	STOREF	[B],C
0D/E5: BD01     	STOREF	[B+1],D
0D/E7:          	
0D/E6:          	; SET CBLOCK AS BEGINNING OF FREE TABLE
0D/E6: 3800     	LOADI	C,0
0D/E7: A880     	STORE	[DBANK],C
0D/E8: A00D     	STORE	[FREETAB],A
0D/E9: A40E     	STORE	[FREETAB+1],B
0D/EB:          	
0D/EA:          	; INCREMENT NUMFREE
0D/EA: 802B     	LOAD	A,[NUMFREE+1]
0D/EB: 5001     	ADDI	A,1
0D/EC: A02B     	STORE	[NUMFREE+1],A
0D/ED: F103     	BRNC	0F
0D/EE: 802A     	LOAD	A,[NUMFREE]
0D/EF: 5001     	ADDI	A,1
0D/F0: A02A     	STORE	[NUMFREE],A
0D/F2:          	
0D/F1:          	; RESTORE STACK AND RETURN
0D/F1: 8C0C     0:	LOAD	D,[SPARK]
0D/F2: FF10     	JUMP	IRET
0D/F4:          	
0D/F3:          	; GETS THE NEXT BLOCK AFTER CBLOCK
0D/F3:          	; RETURNS A=0X00 IF NEXT, 0XFF OTHERWISE
0D/F3:          	; USES: A, B, C
0D/F3:          ;NEXT:	LOAD	B,[CBLOCK]
0D/F3:          ;	LOAD	C,[CBLOCK+1]
0D/F3:          ;	LOADI	A,0XFF
0D/F3:          ;	ADDI	B,0
0D/F3:          ;	BRZ	IRET
0D/F3:          ;	STORE	[DBANK],B
0D/F3:          ;	LOADF	B,[C]
0D/F3:          ;	LOADF	C,[C+1]
0D/F3:          ;	LOADI	A,0
0D/F3:          ;	STORE	[DBANK],A
0D/F3:          ;	LOADI	A,0XFF
0D/F3:          ;	ADDI	B,0
0D/F3:          ;	BRZ	IRET
0D/F3:          ;	STORE	[CBLOCK],B
0D/F3:          ;	STORE	[CBLOCK+1],C
0D/F3:          ;	LOADI	A,0
0D/F3:          ;	JUMP	IRET
0D/F3:          	
0D/F3:          	
0D/F3:          	; BANK IS DONE, MOVE ON TO THE NEXT
0D/F3:          BI	= BI+1
0D/F3:          .TEXT
0D/F3:          .BANK	BI
0E/80:          FIO0_B	= BI
0E/80:          	
0E/80:          	; WRITES THE BUFFER BACK INTO A FILE
0E/80:          	; [FNAME] = FILE TO OPEN
0E/80:          	; RETURNS A = 0XFF IF ERROR, A = 0X00 RETURN OTHERWISE
0E/80:          	; USES: A, B, C
0E/80: 7C02     FWRITE: SUBI	D,2
0E/82:          
0E/81:          	; SET FIRST FLAG
0E/81: 38FF     	LOADI	C,0XFF
0E/82: A809     	STORE	[FIRST],C
0E/84:          
0E/83:          	; INDIRECT TO FWRITEA
0E/83: 3410     	LOADI	B,FIO2_B
0E/84: 3880     	LOADI	C,FWRITEA
0E/85: FF7C     	JUMP	INDIR
0E/87:          	
0E/86:          	; READS A FILE INTO THE BUFFER
0E/86:          	; [FNAME] = FILE TO OPEN
0E/86:          	; RETURNS A = 0XFF IF ERROR, A = 0X00 RETURN OTHERWISE
0E/86:          	; USES: A, B, C
0E/86: 7C02     FREAD:	SUBI	D,2
0E/88:          
0E/87:          	; SET FIRST FLAG
0E/87: 380A     	LOADI	C,0X0A
0E/88: A809     	STORE	[FIRST],C
0E/8A:          	
0E/89:          	; SET OPEN TARGET
0E/89: 3000     	LOADI	A,0
0E/8A: A06C     	STORE	[ARG_BNK],A
0E/8B: 3018     	LOADI	A,FNAME
0E/8D:          	
0E/8C:          	; ATTEMPT TO OPEN FILE
0E/8C: 380E     	LOADI	C,BI
0E/8D: BB01     	STOREF	[D+1],C
0E/8E: 3406     	LOADI	B,S_OPEN
0E/8F: 3891     	LOADI	C,@+2
0E/90: FF73     	JUMP	SYSCALL
0E/92:          	
0E/91:          	; CHECK RESULT OF OPERATION
0E/91: 5000     	ADDI	A,0
0E/92: F712     	BRNZ	9F
0E/94:          	
0E/93:          	; RE-INITALIZE MEMORY
0E/93: 3898     	LOADI	C,@+5
0E/94: BB00     	STOREF	[D],C
0E/95: 340D     	LOADI	B,MEM0_B
0E/96: 3880     	LOADI	C,MINIT
0E/97: FF6A     	JUMP	INDIR
0E/99:          	
0E/98:          	; MALLOC FIRST BLOCK
0E/98: 3000     	LOADI	A,0
0E/99: A000     	STORE	[CBLOCK],A
0E/9A: A00F     	STORE	[LINETAB],A
0E/9B: A010     	STORE	[LINETAB+1],A
0E/9C: 300F     	LOADI	A,LINETAB
0E/9D: A001     	STORE	[CBLOCK+1],A
0E/9F:          	
0E/9E:          	; SET RETURN TO FREADA
0E/9E: 3880     	LOADI	C,FREADA
0E/9F: BB00     	STOREF	[D],C
0E/A0: 380F     	LOADI	C,FIO1_B
0E/A1: BB01     	STOREF	[D+1],C
0E/A2: 340D     	LOADI	B,MEM0_B
0E/A3: 38A1     	LOADI	C,MALLOC
0E/A4: FF5D     	JUMP	INDIR
0E/A6:          
0E/A5:          	; RESTORE STACK AND RETURN
0E/A5: 5C02     9:	ADDI	D,2
0E/A6: FF5C     	JUMP	IRET
0E/A8:          
0E/A7:          
0E/A7:          	; BANK IS DONE, MOVE ON TO THE NEXT
0E/A7:          BI	= BI+1
0E/A7:          .TEXT
0E/A7:          .BANK	BI
0F/80:          FIO1_B	= BI
0F/80:          
0F/80:          	; CONTINUED FREAD CODE
0F/80:          	; RESET BLOCK READ IN STATE
0F/80: 3002     FREADA:	LOADI	A,BUF_B
0F/81: A06C     	STORE	[ARG_BNK],A
0F/82: 3000     	LOADI	A,0
0F/84:          	
0F/83:          	; READ THE BLOCK
0F/83: 380F     	LOADI	C,BI
0F/84: BB01     	STOREF	[D+1],C
0F/85: A004     0:	STORE	[BLOCK],A
0F/86: 3408     	LOADI	B,S_READ
0F/87: 3889     	LOADI	C,@+2
0F/88: FF7B     	JUMP	SYSCALL
0F/8A:          
0F/89:          	; DID IT WORK?
0F/89: 5000     	ADDI	A,0
0F/8A: F74B     	BRNZ	0F
0F/8C:          	
0F/8B:          	; RESET THE BLOCK READ STATE
0F/8B: 3002     	LOADI	A,BUF_B
0F/8C: A005     	STORE	[BANK],A
0F/8D: 3400     	LOADI	B,0
0F/8F:          	
0F/8E:          	; CHECK FIRST FLAG
0F/8E: 8809     	LOAD	C,[FIRST]
0F/8F: A409     	STORE	[FIRST],B
0F/90: 7401     	SUBI	B,1
0F/91: 5800     	ADDI	C,0
0F/92: F706     	BRNZ	2F
0F/94:          	
0F/93:          	; SET POINTER TO ZERO
0F/93: 5401     	ADDI	B,1
0F/95:          	
0F/94:          	; READ CHARACTER FROM BLOCK
0F/94: A005     1:	STORE	[BANK],A
0F/95: A080     	STORE	[DBANK],A
0F/96: 9900     	LOADF	C,[B]
0F/97: 3000     	LOADI	A,0
0F/98: A080     	STORE	[DBANK],A
0F/9A:          	
0F/99:          	; PROCESS CHARACTER
0F/99:          	; C = CHARACTER
0F/99: A406     2:	STORE	[POINTER],B
0F/9A: 3420     	LOADI	B,0X20
0F/9B: D900     	CMP	C,B
0F/9C: F104     	BRB	3F
0F/9D: 3480     	LOADI	B,0X80
0F/9E: D900     	CMP	C,B
0F/9F: F10A     	BRB	6F
0F/A0: FF29     	JUMP	8F
0F/A2:          	
0F/A1:          	; CONTROL CHARACTERS
0F/A1: 3409     3:	LOADI	B,0X09	; TAB CHARACTER
0F/A2: D900     	CMP	C,B
0F/A3: F606     	BRZ	6F
0F/A4: 5800     	ADDI	C,0	; NULL CHARACTER
0F/A5: F630     	BRZ	0F
0F/A6: 340A     	LOADI	B,0X0A	; NEW LINE CHARACTER
0F/A7: D900     	CMP	C,B
0F/A8: F721     	BRNZ	8F
0F/A9: 3800     	LOADI	C,0
0F/AB:          	
0F/AA:          	; STORE VALUE IN MEMORY BLOCK
0F/AA: 8007     6:	LOAD	A,[MB_PNTR]
0F/AB: 8408     	LOAD	B,[MB_END]
0F/AC: D100     	CMP	A,B
0F/AD: 8400     	LOAD	B,[CBLOCK]
0F/AE: F60C     	BRZ	7F
0F/AF: A480     	STORE	[DBANK],B
0F/B0: B800     	STOREF	[A],C
0F/B1: 3400     	LOADI	B,0
0F/B2: A480     	STORE	[DBANK],B
0F/B3: 5800     	ADDI	C,0
0F/B4: F703     	BRNZ	FREADNX		; NOT A NEXT LINE
0F/B5: 840B     	LOAD	B,[LINES]	; INCREMENT LINE
0F/B6: 5401     	ADDI	B,1
0F/B7: A40B     	STORE	[LINES],B
0F/B8: 5001     FREADNX:ADDI	A,1
0F/B9: A007     	STORE	[MB_PNTR],A
0F/BA: FF0F     	JUMP	8F
0F/BC:          
0F/BB:          	; FINISH BLOCK
0F/BB: A80A     7:	STORE	[CHAR],C
0F/BC: 8001     	LOAD	A,[CBLOCK+1]
0F/BD: 880B     	LOAD	C,[LINES]
0F/BE: A480     	STORE	[DBANK],B
0F/BF: B802     	STOREF	[A+2],C
0F/C0: 3400     	LOADI	B,0
0F/C1: A480     	STORE	[DBANK],B
0F/C2: A40B     	STORE	[LINES],B
0F/C4:          
0F/C3:          	; ALLOC ANOTHER BLOCK
0F/C3: 38C8     	LOADI	C,@+5
0F/C4: BB00     	STOREF	[D],C
0F/C5: 340D     	LOADI	B,MEM0_B
0F/C6: 38A1     	LOADI	C,MALLOC
0F/C7: FF3A     	JUMP	INDIR
0F/C9:          	
0F/C8:          	; RESTORE CHARACTER
0F/C8: 880A     	LOAD	C,[CHAR]
0F/C9: FFE0     	JUMP	6B
0F/CB:          	
0F/CA:          	; INCREMENT BLOCK POINTER
0F/CA: 8005     8:	LOAD	A,[BANK]
0F/CB: 8406     	LOAD	B,[POINTER]
0F/CC: 5401     	ADDI	B,1
0F/CD: F5C6     	BRNN	1B
0F/CE: 3400     	LOADI	B,0
0F/CF: 5001     	ADDI	A,1
0F/D0: 3806     	LOADI	C,BUF_B+4 
0F/D1: D200     	CMP	A,C
0F/D2: F7C1     	BRNZ	1B
0F/D3: 8004     	LOAD	A,[BLOCK]
0F/D4: 5001     	ADDI	A,1
0F/D5: F7AF     	BRNZ	0B
0F/D7:          	
0F/D6:          	; TERMINATE THE RECORD
0F/D6: AC0C     0:	STORE	[SPARK],D
0F/D7: 8007     	LOAD	A,[MB_PNTR]
0F/D8: 8408     	LOAD	B,[MB_END]
0F/D9: 880B     	LOAD	C,[LINES]
0F/DA: 8C00     	LOAD	D,[CBLOCK]
0F/DB: AC80     	STORE	[DBANK],D
0F/DC: D100     	CMP	A,B
0F/DD: F602     	BRZ	1F
0F/DE: 3CFF     	LOADI	D,0XFF
0F/DF: BC00     	STOREF	[A],D
0F/E0: B9E2     1:	STOREF	[B+2-32],C
0F/E1: 3C00     	LOADI	D,0
0F/E2: AC80     	STORE	[DBANK],D
0F/E3: 8C0C     	LOAD	D,[SPARK]
0F/E5:          	
0F/E4:          	; RESTORE STACK AND RETURN
0F/E4: 3000     	LOADI	A,0
0F/E5: 3400     9:	LOADI	B,0
0F/E6: A480     	STORE	[DBANK],B
0F/E7: 5C02     	ADDI	D,2
0F/E8: FF1A     	JUMP	IRET
0F/EA:          
0F/E9:          	; BANK IS DONE, MOVE ON TO THE NEXT
0F/E9:          BI	= BI+1
0F/E9:          .TEXT
0F/E9:          .BANK	BI
10/80:          FIO2_B	= BI
10/80:          
10/80:          	; SHADOW OF FWRITE
10/80:          	; START BY CLOSING A FILE IF IT'S OPEN
10/80: 3810     FWRITEA:LOADI	C,BI
10/81: BB01     	STOREF	[D+1],C
10/82: 3407     	LOADI	B,S_CLOSE
10/83: 3885     	LOADI	C,@+2
10/84: FF7F     	JUMP	SYSCALL
10/86:          	
10/85:          	; SAVE STACK
10/85: AC0C     	STORE	[SPARK],D
10/87:          	
10/86:          	; SET CREAT TARGET
10/86: 3000     	LOADI	A,0
10/87: A06C     	STORE	[ARG_BNK],A
10/88: 3018     	LOADI	A,FNAME
10/8A:          	
10/89:          	; ATTEMPT TO CREAT FILE
10/89: 3810     	LOADI	C,BI
10/8A: BB01     	STOREF	[D+1],C
10/8B: 340D     	LOADI	B,S_CREAT
10/8C: 388E     	LOADI	C,@+2
10/8D: FF76     	JUMP	SYSCALL
10/8E: 5000     	ADDI	A,0
10/8F: F755     	BRNZ	9F
10/91:          	
10/90:          	; SET ARG BANK
10/90: 3002     	LOADI	A,BUF_B
10/91: A06C     	STORE	[ARG_BNK],A
10/93:          	
10/92:          	; RESET BANK / BLOCK / POINTER INFORMATION
10/92: 3002     	LOADI	A,BUF_B
10/93: A005     	STORE	[BANK],A
10/94: 3000     	LOADI	A,0
10/95: A004     	STORE	[BLOCK],A
10/96: A006     	STORE	[POINTER],A
10/98:          	
10/97:          	; SET AT START OF BUFFER
10/97: 880F     	LOAD	C,[LINETAB]
10/98: 8C10     	LOAD	D,[LINETAB+1]
10/99: 3404     	LOADI	B,4
10/9A: 4700     	ADD	B,D
10/9B: 5C20     	ADDI	D,32
10/9C: AC08     	STORE	[MB_END],D
10/9E:          	
10/9D:          	; READ A VALUE FROM THE LINE BUFFER
10/9D: A407     0:	STORE	[MB_PNTR],B
10/9E: A800     	STORE	[CBLOCK],C
10/9F: AC08     	STORE	[MB_END],D
10/A0: 3000     	LOADI	A,0
10/A1: 5800     	ADDI	C,0
10/A2: F608     	BRZ	1F	; END OF LINE BUFFER
10/A3: A880     	STORE	[DBANK],C
10/A4: 9100     	LOADF	A,[B]
10/A5: 3400     	LOADI	B,0
10/A6: A480     	STORE	[DBANK],B
10/A7: 5000     	ADDI	A,0
10/A9:          	
10/A8:          	; IF THE CHARACTER IS ZERO, DO CR/LF
10/A8: 340D     	LOADI	B,0X0D
10/A9: F602     	BRZ	2F
10/AB:          	
10/AA:          	; IF THE CHARATER IS NEGATIVE, MOVE ON TO THE NEXT BLOCK
10/AA: F430     	BRN	4F
10/AC:          	
10/AB:          	; OTHERWISE, JUST PUT IT IN VERBATIM
10/AB: 2400     1:	MOV	B,A
10/AD:          	
10/AC:          	; WRITE A CHARACTER TO THE OUTPUT BUFFER
10/AC: A40A     2:	STORE	[CHAR],B
10/AD: 8805     	LOAD	C,[BANK]
10/AE: 8C06     	LOAD	D,[POINTER]
10/AF: 5C00     	ADDI	D,0
10/B0: F518     	BRNN	3F
10/B2:          	
10/B1:          	; POINTER TOO BIG, RESET IT AND INCREMENT D
10/B1: 5801     	ADDI	C,1
10/B2: 3C06     	LOADI	D,BUF_B+4
10/B3: DB00     	CMP	C,D
10/B4: 3C00     	LOADI	D,0
10/B5: F713     	BRNZ	3F
10/B7:          	
10/B6:          	; BANK TOO BIG, WRITE THE BANK AND RESET
10/B6:          	; TODO: WRITE BANK HERE
10/B6: 8004     	LOAD	A,[BLOCK]
10/B7: 8C0C     	LOAD	D,[SPARK]
10/B8: 3810     	LOADI	C,BI
10/B9: BB01     	STOREF	[D+1],C
10/BA: 3409     	LOADI	B,S_WRITE
10/BB: 38BD     	LOADI	C,@+2
10/BC: FF47     	JUMP	SYSCALL
10/BD: 5000     	ADDI	A,0
10/BE: F726     	BRNZ	9F
10/C0:          	
10/BF:          	; INCREMENT BLOCK
10/BF: 8004     	LOAD	A,[BLOCK]
10/C0: 5001     	ADDI	A,1
10/C1: A004     	STORE	[BLOCK],A
10/C2: 30FF     	LOADI	A,0XFF
10/C3: F620     	BRZ	8F
10/C5:          
10/C4:          	; RESET STATE
10/C4: 3802     	LOADI	C,BUF_B
10/C5: 3C00     	LOADI	D,0
10/C7:          	
10/C6:          	; IF THE CHAR IS 0, THEN WE ARE DONE
10/C6: 840A     	LOAD	B,[CHAR]
10/C7: 5400     	ADDI	B,0
10/C8: F61B     	BRZ	8F
10/CA:          
10/C9:          	; ADDRESS IS GOOD, WRITE IT
10/C9: A880     3:	STORE	[DBANK],C
10/CA: B700     	STOREF	[D],B
10/CB: 3000     	LOADI	A,0
10/CC: A080     	STORE	[DBANK],A
10/CE:          	
10/CD:          	; INCREMENT POINTER AND STORE
10/CD: 5C01     	ADDI	D,1
10/CE: A805     	STORE	[BANK],C
10/CF: AC06     	STORE	[POINTER],D
10/D1:          	
10/D0:          	; REPEAT IF ZERO
10/D0: 5400     	ADDI	B,0
10/D1: F6DA     	BRZ	2B
10/D3:          	
10/D2:          	; INSERT A 0X0A IF WE JUST DID A 0X0D
10/D2: 740D     	SUBI	B,0X0D
10/D3: 340A     	LOADI	B,0X0A
10/D4: F6D7     	BRZ	2B
10/D6:          	
10/D5:          	; MOVE ON TO THE NEXT CHARACTER
10/D5: 8407     	LOAD	B,[MB_PNTR]
10/D6: 8800     	LOAD	C,[CBLOCK]
10/D7: 8C08     	LOAD	D,[MB_END]
10/D9:          	
10/D8:          	; INCREMENT
10/D8: 5401     	ADDI	B,1
10/D9: D700     	CMP	B,D
10/DA: F7C2     	BRNZ	0B
10/DC:          	
10/DB:          	; GET THE NEXT BLOCK
10/DB: A880     4:	STORE	[DBANK],C
10/DC: 9BE0     	LOADF	C,[D+0-32]
10/DD: 97E1     	LOADF	B,[D+1-32]
10/DE: 3000     	LOADI	A,0
10/DF: A080     	STORE	[DBANK],A
10/E0: 3C20     	LOADI	D,32
10/E1: 4D00     	ADD	D,B
10/E2: 5403     	ADDI	B,3
10/E3: FFB9     	JUMP	0B
10/E5:          	
10/E4:          	
10/E4:          	; RESTORE STACK AND RETURN
10/E4: 3000     8:	LOADI	A,0
10/E5: 3400     9:	LOADI	B,0
10/E6: A480     	STORE	[DBANK],B
10/E7: 8C0C     	LOAD	D,[SPARK]
10/E8: 5C02     	ADDI	D,2
10/E9: FF19     	JUMP	IRET
10/EB:          
10/EA:          	; BANK IS DONE, MOVE ON TO THE NEXT
10/EA:          BI	= BI+1
10/EA:          
