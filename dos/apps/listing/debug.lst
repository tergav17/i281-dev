00/00:          ; DOSDEF.S
01/80:          ; THIS FILE CONTAINS IMPORTANT DEFINES USED IN DOS/281
01/80:          
01/80:          ; BIOS CALLS
01/80:          REBOOT	= 0
01/80:          AREBOOT = 1
01/80:          INDIR	= 2
01/80:          IRET	= 3
01/80:          SYSCALL	= 4
01/80:          SYSJUMP	= 5
01/80:          PRGM	= 6
01/80:          IWRITE	= 7
01/80:          ZSTART	= 8
01/80:          
01/80:          HALT	= 0X7F
01/80:          
01/80:          ; SYSTEM CALLS
01/80:          S_EXIT	= 0
01/80:          S_PUTC	= 1
01/80:          S_GETC	= 2
01/80:          S_STAT	= 3
01/80:          S_PUTS	= 4
01/80:          S_INPUT	= 5
01/80:          S_OPEN	= 6
01/80:          S_CLOSE	= 7
01/80:          S_READ	= 8
01/80:          S_WRITE	= 9
01/80:          S_FSRCH	= 10
01/80:          S_NEXT	= 11
01/80:          S_DELET	= 12
01/80:          S_CREAT	= 13
01/80:          S_FREE	= 14
01/80:          S_EXEC	= 15
01/80:          
01/80:          ; MEMORY AREAS
01/80:          CF_NAME	= 0X60
01/80:          CF_SIZE	= 0X68
01/80:          CF_USR	= 0X6A
01/80:          DFT_USR	= 0X6B
01/80:          ARG_BNK	= 0X6C
01/80:          BD_FREE	= 0X6E
01/80:          MAX_IB	= 0X70
01/80:          MAX_DB	= 0X71
01/80:          CMDL_B	= 0X72
01/80:          AUTO_B	= 0X73
01/80:          KERNMEM	= 0X78
01/80:          BIOSMEM	= 0X7C
01/80:          
01/80:          ; DATA BANK ADDRESS
01/80:          DBANK	= 0X80		
01/80:          
01/80:          ; DEBUG.S
01/80:          ; MODIFY A .SAV RECORD
01/80:          
01/80:          ; BANK ALLOCATION STUFF
01/80:          BI	= 1
01/80:          BD	= 1
01/80:          
01/80:          ; MAXIMUM ARGUMENTS
01/80:          MAXARGS	= 1
01/80:          
01/80:          .TEXT
01/80:          .BANK	BI
01/80:          CORE0_B	= BI
01/80:          
01/80:          	; START BY PROCESSING THE ARGUMENTS
01/80: 3000     START:	LOADI	A,0
01/81: A080     	STORE	[DBANK],A
01/83:          	
01/82:          	; RESET ARG STATE
01/82: A000     	STORE	[ARGC],A
01/84:          	
01/83:          	; SET UP STACK
01/83: 3C5E     	LOADI	D,0X60-2
01/85:          	
01/84:          	; SYSCALL RETURN BANK
01/84: 3801     	LOADI	C,1	
01/85: BB01     	STOREF	[D+1],C
01/87:          	
01/86:          	; SET UP POINTER
01/86: 3800     	LOADI	C,0
01/88:          	
01/87:          	; GO TO ARGUMENT BANK
01/87: 8072     0:	LOAD	A,[CMDL_B]
01/88: A06C     	STORE	[ARG_BNK],A
01/89: A080     	STORE	[DBANK],A
01/8B:          
01/8A:          	; SKIP THE CURRENT ARGUMENT
01/8A: 9200     1:	LOADF	A,[C]
01/8B: 3420     	LOADI	B,0X20
01/8C: D100     	CMP	A,B
01/8D: F902     	BRBE	2F
01/8E: 5801     	ADDI	C,1
01/8F: FFFA     	JUMP	1B
01/91:          
01/90:          	; LOOK FOR AN ARGUMENT
01/90: 9200     2:	LOADF	A,[C]
01/91: 5000     	ADDI	A,0
01/92: F62B     	BRZ	ARGDONE
01/93: D100     	CMP	A,B
01/94: F802     	BRA	3F
01/95: 5801     	ADDI	C,1
01/96: FFF9     	JUMP	2B
01/98:          
01/97:          	; IS IT A FLAG?
01/97: 342D     3:	LOADI	B,'-'
01/98: D100     	CMP	A,B
01/99: F711     	BRNZ	5F
01/9B:          	
01/9A:          	; HANDLE FLAGS HERE	
01/9A: 5801     4:	ADDI	C,1
01/9B: 9200     	LOADF	A,[C]
01/9C: 5000     	ADDI	A,0
01/9D: F620     	BRZ	ARGDONE
01/9E: 3420     	LOADI	B,0X20
01/9F: D100     	CMP	A,B
01/A0: F9EF     	BRBE	2B
01/A2:          	
01/A1:          	; REGISTER THE FLAG
01/A1: 3400     	LOADI	B,0
01/A2: A480     	STORE	[DBANK],B
01/A4:          
01/A3:          ;	SUBI	A,'A'
01/A3:          ;	BRNZ	@+2
01/A3:          ;	LOADI	B,AFLAG
01/A3:          	
01/A3:          	; IS IT A RECOGNIZED FLAG?
01/A3: 5400     	ADDI	B,0
01/A4: F60F     	BRZ	ARGBAD
01/A5: 3001     	LOADI	A,1
01/A6: B100     	STOREF	[B],A
01/A8:          
01/A7:          	; THERE MAY BE ANOTHER FLAG
01/A7: 8472     	LOAD	B,[CMDL_B]
01/A8: A46C     	STORE	[ARG_BNK],B
01/A9: A480     	STORE	[DBANK],B
01/AA: FFEF     	JUMP	4B
01/AC:          
01/AB:          	; SAVE THE ARGUMENT
01/AB: 3400     5:	LOADI	B,0
01/AC: A480     	STORE	[DBANK],B
01/AD: 8400     	LOAD	B,[ARGC]
01/AE: B901     	STOREF	[B+ARGV],C
01/B0:          	
01/AF:          	; DID WE EXCEED THE ALLOWED NUMBER OF ARGUMENTS
01/AF: 7401     	SUBI	B,MAXARGS
01/B0: F003     	BRC	ARGBAD
01/B1: 5402     	ADDI	B,MAXARGS+1
01/B2: A400     	STORE	[ARGC],B
01/B3: FFD3     	JUMP	0B
01/B5:          	
01/B4:          	; BAD ARGUMENT
01/B4: 3000     ARGBAD:	LOADI	A,0
01/B5: A080     	STORE	[DBANK],A
01/B7:          	
01/B6: 3001     	LOADI	A,STR0_B
01/B7: A06C     	STORE	[ARG_BNK],A
01/B8: 3000     	LOADI	A,ERROR0
01/BA:          	
01/B9:          	; PRINT ERROR MESSAGE
01/B9: 3404     	LOADI	B,S_PUTS
01/BA: 38BC     	LOADI	C,EXIT
01/BB: FF48     	JUMP	SYSCALL	
01/BD:          
01/BC:          	; EXIT PROGRAM
01/BC: 3400     EXIT:	LOADI	B,0
01/BD: FF47     	JUMP	SYSJUMP
01/BF:          	
01/BE:          	; ARGUMENT PROCESSING DONE
01/BE: 3000     ARGDONE:LOADI	A,0
01/BF: A080     	STORE	[DBANK],A
01/C1:          	
01/C0:          	; CHECK ARG COUNT
01/C0: 8000     	LOAD	A,[ARGC]
01/C1: 7001     	SUBI	A,1
01/C2: F7F1     	BRNZ	ARGBAD
01/C4:          	
01/C3:          	; GO TO PROMPT
01/C3: 3402     	LOADI	B,CMD0_B
01/C4: 3882     	LOADI	C,PROMPT
01/C5: FF3C     	JUMP	INDIR
01/C7:          	
01/C6: FFF5     	JUMP	EXIT
01/C8:          
01/C7:          
01/C7:          	; BANK IS DONE, MOVE ON TO THE NEXT
01/C7:          BI	= BI+1
01/C7:          .TEXT
01/C7:          .BANK	BI
02/80:          CMD0_B	= BI
02/80:          
02/80: 304D     ERROR:	LOADI	A,ST_ERR
02/81: FF01     	JUMP	0F
02/83:          
02/82:          	; SEND UP THE COMMAND LINE PROMPT
02/82: 3050     PROMPT:	LOADI	A,ST_PRM
02/83: 3802     0:	LOADI	C,BI
02/84: BB01     	STOREF	[D+1],C
02/85: 3401     	LOADI	B,STR0_B
02/86: A46C     	STORE	[ARG_BNK],B
02/87: 3404     	LOADI	B,S_PUTS
02/88: 388A     	LOADI	C,@+2
02/89: FF7A     	JUMP	SYSCALL
02/8B:          	
02/8A:          	; GET USER INPUT
02/8A: 3402     	LOADI	B,BUF_B
02/8B: A46C     	STORE	[ARG_BNK],B
02/8C: 3405     	LOADI	B,S_INPUT
02/8D: 388F     	LOADI	C,@+2
02/8E: FF75     	JUMP	SYSCALL
02/90:          
02/8F:          	; PREPARE TO PARSE
02/8F: 3000     	LOADI	A,0
02/90: A003     	STORE	[POINTER],A
02/91: A004     	STORE	[STATE],A
02/92: A009     	STORE	[ADDRESS],A
02/94:          	
02/93:          	; EXECUTE PARSE
02/93: 3898     	LOADI	C,@+5
02/94: BB00     	STOREF	[D],C
02/95: 3402     	LOADI	B,CMD0_B
02/96: 38A9     	LOADI	C,PARSEH
02/97: FF6A     	JUMP	INDIR
02/98: 5000     	ADDI	A,0
02/99: F4E6     	BRN	ERROR
02/9B:          	
02/9A:          	; MAKE SURE THE NEXT VALUE IS ZERO
02/9A: 8803     	LOAD	C,[POINTER]
02/9B: 3402     	LOADI	B,BUF_B
02/9C: A480     	STORE	[DBANK],B
02/9D: 9A01     	LOADF	C,[C+1]
02/9E: 3400     	LOADI	B,0
02/9F: A480     	STORE	[DBANK],B
02/A0: 5800     	ADDI	C,0
02/A1: F7DE     	BRNZ	ERROR
02/A3:          	
02/A2:          	; PARSE COMMAND
02/A2: 7051     	SUBI	A,'Q'
02/A3: 3401     	LOADI	B,CORE0_B
02/A4: 38BC     	LOADI	C,EXIT
02/A5: F65C     	BRZ	INDIR
02/A7:          	
02/A6: 70F7     	SUBI	A,'H'-'Q'
02/A7: F6FF     	BRZ	@
02/A9:          	
02/A8: FFD7     	JUMP	ERROR
02/AA:          	
02/A9:          	; PARSES A HEXADECIMAL NUMBER
02/A9:          	; THE NUMBER WILL CONTINUE TO BE PARSED UNTIL
02/A9:          	; THE END OF THE NUMBER IS REACHED.
02/A9:          	; [POINTER] = ADDRESS OF NUMBER
02/A9:          	; RETURNS A=0XFF IF THE PARSING OVERFLOWED
02/A9:          	; USES: A, B, C
02/A9: 3000     PARSEH:	LOADI	A,0
02/AA: A005     	STORE	[VALUE],A
02/AB: A006     	STORE	[VALUE+1],A
02/AD:          
02/AC:          	; READ A CHARACTER FROM THE COMMAND LINE
02/AC: 8803     0:	LOAD	C,[POINTER]
02/AD: 3402     	LOADI	B,BUF_B
02/AE: A480     	STORE	[DBANK],B
02/AF: 9200     	LOADF	A,[C]
02/B0: 3400     	LOADI	B,0
02/B1: A480     	STORE	[DBANK],B
02/B2: 5801     	ADDI	C,1
02/B3: A803     	STORE	[POINTER],C
02/B5:          	
02/B4:          	; CHECK BOUNDS
02/B4: 3430     	LOADI	B,'0'
02/B5: D100     	CMP	A,B
02/B6: F14C     	BRB	IRET
02/B7: 3439     	LOADI	B,'9'
02/B8: D100     	CMP	A,B
02/B9: F907     	BRBE	1F
02/BB:          	
02/BA: 3441     	LOADI	B,'A'
02/BB: D100     	CMP	A,B
02/BC: F146     	BRB	IRET
02/BD: 3446     	LOADI	B,'F'
02/BE: D100     	CMP	A,B
02/BF: F843     	BRA	IRET
02/C1:          	
02/C0: 7007     	SUBI	A,'A'-('0'+10)
02/C2:          	
02/C1:          	; CONVERT FROM ASCII
02/C1: 7030     1:	SUBI	A,'0'
02/C3:          
02/C2:          	; MULTIPLY VALUE BY 4
02/C2: A00B     	STORE	[TEMP],A
02/C3: 8405     	LOAD	B,[VALUE]
02/C4: 8806     	LOAD	C,[VALUE+1]
02/C5: 3004     	LOADI	A,4
02/C6: 4500     2:	SHIFTL	B
02/C7: F00C     	BRC	9F
02/C8: 4A00     	SHIFTL	C
02/C9: F101     	BRNC	3F
02/CA: 5401     	ADDI	B,1
02/CB: 7001     3:	SUBI	A,1
02/CC: F7F9     	BRNZ	2B
02/CE:          	
02/CD:          	; ADD TO VALUE
02/CD: 800B     	LOAD	A,[TEMP]
02/CE: 4800     	ADD	C,A
02/CF: A405     	STORE	[VALUE],B
02/D0: A806     	STORE	[VALUE+1],C
02/D2:          	
02/D1:          	; SET STATE
02/D1: 3001     	LOADI	A,1
02/D2: A004     	STORE	[STATE],A
02/D3: FFD8     	JUMP	0B
02/D5:          	
02/D4:          	; ERROR
02/D4: 30FF     9:	LOADI	A,0XFF
02/D5: FF2D     	JUMP	IRET
02/D7:          
02/D6:          	; BANK IS DONE, MOVE ON TO THE NEXT
02/D6:          BI	= BI+1
02/D6:          .TEXT
02/D6:          .BANK	BI
03/80:          TERM_B	= BI
03/80:          
03/80:          
03/80:          .DATA
03/00:          .BANK	BD
01/00:          STR0_B	= BD
01/00:          
01/00:          	; ERROR MESSAGES
01/00: 494E5641
       4C494420
       41524755
       4D454E54
       530A0D   .DEFL BYTE ERROR0	"INVALID ARGUMENTS",0X0A,0X0D,
01/13: 55534147
       453A2044
       45425547
       2046494C
       450A0D00 			"USAGE: DEBUG FILE",0X0A,0X0D,0
01/27: 43414E27
       54204F50
       454E2046
       494C450A
       0D00     .DEFL BYTE ERROR1	"CAN'T OPEN FILE",0X0A,0X0D,0
01/39: 43414E27
       54204352
       45415445
       2046494C
       450A0D00 .DEFL BYTE ERROR2	"CAN'T CREATE FILE",0X0A,0X0D,0
01/4D:          
01/4D: 0A0D3F   .DEFL BYTE ST_ERR	0X0A,0X0D,"?"
01/50: 0A0D2A00 .DEFL BYTE ST_PRM	0X0A,0X0D,"*",0
01/54:          
01/54:          	; ZERO BANK STUFF
01/54:          .BANK	0
00/00:          .BSS
00/00:          
00/00:          	; COMMAND LINE ARGUMENTS
00/00: 00       .DEFL BYTE ARGC		0
00/01: 0000     .DEFL BYTE ARGV		0,0
00/03:          
00/03:          	; PARSE STATE
00/03: 00       .DEFL BYTE POINTER	0
00/04: 00       .DEFL BYTE STATE	0
00/05: 0000     .DEFL BYTE VALUE	0,0
00/07:          
00/07:          	; BLOCK EDIT STATE
00/07: 00       .DEFL BYTE CBLOCK	0
00/08: 00       .DEFL BYTE DIRTY	0
00/09: 00       .DEFL BYTE ADDRESS	0
00/0A:          
00/0A:          	; STACK PARKING SPACE
00/0A: 00       .DEFL BYTE SPARK	0
00/0B:          
00/0B:          	; TEMPORARY VALUE
00/0B: 00       .DEFL BYTE TEMP		0
00/0C:          
00/0C:          BD	= BD+1
00/0C:          .DATA
00/0C:          .BANK	BD
02/00:          BUF_B	= BD
02/00:          
02/00:          	; GENERAL PURPOSE BUFFER
02/00:          	
02/00:          BD	= BD+1
02/00:          .DATA
02/00:          .BANK	BD
03/00:          BTAB_B	= BD
03/00:          
03/00:          	; BLOCK ADDRESS TABLE
03/00:          	; TURNS A LOGIC SAV BLOCK INTO A PHYSICAL FILE BLOCK
03/00:          	
03/00:          BD	= BD+1
03/00:          .DATA
03/00:          .BANK	BD
04/00:          WORK_B	= BD
04/00:          BD	= BD+3
04/00:          
04/00:          	; WORK BANK
04/00:          	; WORK_B + 0 = RECORD HEADER
04/00:          	; WORK_B + 1 = DATA SEGMENT
04/00:          	; WORK_B + 2 = ISR SEGMENT 128-191
