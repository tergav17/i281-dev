00/00:          ; DOSDEF.S
01/80:          ; THIS FILE CONTAINS IMPORTANT DEFINES USED IN DOS/281
01/80:          ; GAVIN TERSTEEG, 2024
01/80:          ; SDMAY24-14
01/80:          
01/80:          ; BIOS CALLS
01/80:          BOOT	= 0
01/80:          ALTBOOT = 1
01/80:          INDIR	= 2
01/80:          IRET	= 3
01/80:          SYSCALL	= 4
01/80:          SYSJUMP	= 5
01/80:          PRGM	= 6
01/80:          IWRITE	= 7
01/80:          ZSTART	= 8
01/80:          
01/80:          HALT	= 0X7F
01/80:          
01/80:          ; SYSTEM CALLS
01/80:          S_EXIT	= 0
01/80:          S_PUTC	= 1
01/80:          S_GETC	= 2
01/80:          S_STAT	= 3
01/80:          S_PUTS	= 4
01/80:          S_INPUT	= 5
01/80:          S_OPEN	= 6
01/80:          S_CLOSE	= 7
01/80:          S_READ	= 8
01/80:          S_WRITE	= 9
01/80:          S_FSRCH	= 10
01/80:          S_NEXT	= 11
01/80:          S_DELET	= 12
01/80:          S_CREAT	= 13
01/80:          S_FREE	= 14
01/80:          S_EXEC	= 15
01/80:          
01/80:          ; MEMORY AREAS
01/80:          CF_NAME	= 0X60
01/80:          CF_SIZE	= 0X68
01/80:          CF_USR	= 0X6A
01/80:          DFT_USR	= 0X6B
01/80:          ARG_BNK	= 0X6C
01/80:          BD_FREE	= 0X6E
01/80:          MAX_IB	= 0X70
01/80:          MAX_DB	= 0X71
01/80:          CMDL_B	= 0X72
01/80:          AUTO_B	= 0X73
01/80:          KERNMEM	= 0X78
01/80:          BIOSMEM	= 0X7C
01/80:          
01/80:          ; DATA BANK ADDRESS
01/80:          DBANK	= 0X80		
01/80:          
01/80:          
01/80:          ; DEBUG.S
01/80:          ; MODIFY A .SAV RECORD
01/80:          ; GAVIN TERSTEEG, 2024
01/80:          ; SDMAY24-14
01/80:          
01/80:          ; BANK ALLOCATION STUFF
01/80:          BI	= 1
01/80:          BD	= 1
01/80:          
01/80:          ; MAXIMUM ARGUMENTS
01/80:          MAXARGS	= 1
01/80:          
01/80:          .TEXT
01/80:          .BANK	BI
01/80:          CORE0_B	= BI
01/80:          
01/80:          	; START BY PROCESSING THE ARGUMENTS
01/80: 3000     START:	LOADI	A,0
01/81: A080     	STORE	[DBANK],A
01/83:          	
01/82:          	; RESET ARG STATE
01/82: A000     	STORE	[ARGC],A
01/84:          	
01/83:          	; SET UP STACK
01/83: 3C5E     	LOADI	D,0X60-2
01/85:          	
01/84:          	; SYSCALL RETURN BANK
01/84: 3801     	LOADI	C,1	
01/85: BB01     	STOREF	[D+1],C
01/87:          	
01/86:          	; SET UP POINTER
01/86: 3800     	LOADI	C,0
01/88:          	
01/87:          	; GO TO ARGUMENT BANK
01/87: 8072     0:	LOAD	A,[CMDL_B]
01/88: A06C     	STORE	[ARG_BNK],A
01/89: A080     	STORE	[DBANK],A
01/8B:          
01/8A:          	; SKIP THE CURRENT ARGUMENT
01/8A: 9200     1:	LOADF	A,[C]
01/8B: 3420     	LOADI	B,0X20
01/8C: D100     	CMP	A,B
01/8D: F902     	BRBE	2F
01/8E: 5801     	ADDI	C,1
01/8F: FFFA     	JUMP	1B
01/91:          
01/90:          	; LOOK FOR AN ARGUMENT
01/90: 9200     2:	LOADF	A,[C]
01/91: 5000     	ADDI	A,0
01/92: F62B     	BRZ	ARGDONE
01/93: D100     	CMP	A,B
01/94: F802     	BRA	3F
01/95: 5801     	ADDI	C,1
01/96: FFF9     	JUMP	2B
01/98:          
01/97:          	; IS IT A FLAG?
01/97: 342D     3:	LOADI	B,'-'
01/98: D100     	CMP	A,B
01/99: F711     	BRNZ	5F
01/9B:          	
01/9A:          	; HANDLE FLAGS HERE	
01/9A: 5801     4:	ADDI	C,1
01/9B: 9200     	LOADF	A,[C]
01/9C: 5000     	ADDI	A,0
01/9D: F620     	BRZ	ARGDONE
01/9E: 3420     	LOADI	B,0X20
01/9F: D100     	CMP	A,B
01/A0: F9EF     	BRBE	2B
01/A2:          	
01/A1:          	; REGISTER THE FLAG
01/A1: 3400     	LOADI	B,0
01/A2: A480     	STORE	[DBANK],B
01/A4:          
01/A3:          ;	SUBI	A,'A'
01/A3:          ;	BRNZ	@+2
01/A3:          ;	LOADI	B,AFLAG
01/A3:          	
01/A3:          	; IS IT A RECOGNIZED FLAG?
01/A3: 5400     	ADDI	B,0
01/A4: F60F     	BRZ	ARGBAD
01/A5: 3001     	LOADI	A,1
01/A6: B100     	STOREF	[B],A
01/A8:          
01/A7:          	; THERE MAY BE ANOTHER FLAG
01/A7: 8472     	LOAD	B,[CMDL_B]
01/A8: A46C     	STORE	[ARG_BNK],B
01/A9: A480     	STORE	[DBANK],B
01/AA: FFEF     	JUMP	4B
01/AC:          
01/AB:          	; SAVE THE ARGUMENT
01/AB: 3400     5:	LOADI	B,0
01/AC: A480     	STORE	[DBANK],B
01/AD: 8400     	LOAD	B,[ARGC]
01/AE: B901     	STOREF	[B+ARGV],C
01/B0:          	
01/AF:          	; DID WE EXCEED THE ALLOWED NUMBER OF ARGUMENTS
01/AF: 7401     	SUBI	B,MAXARGS
01/B0: F003     	BRC	ARGBAD
01/B1: 5402     	ADDI	B,MAXARGS+1
01/B2: A400     	STORE	[ARGC],B
01/B3: FFD3     	JUMP	0B
01/B5:          	
01/B4:          	; BAD ARGUMENT
01/B4: 3000     ARGBAD:	LOADI	A,0
01/B5: A080     	STORE	[DBANK],A
01/B7:          	
01/B6: 3001     	LOADI	A,STR0_B
01/B7: A06C     	STORE	[ARG_BNK],A
01/B8: 3000     	LOADI	A,ERROR0
01/BA:          	
01/B9:          	; PRINT ERROR MESSAGE
01/B9: 3404     	LOADI	B,S_PUTS
01/BA: 38BC     	LOADI	C,EXIT
01/BB: FF48     	JUMP	SYSCALL	
01/BD:          
01/BC:          	; EXIT PROGRAM
01/BC: 3400     EXIT:	LOADI	B,0
01/BD: FF47     	JUMP	SYSJUMP
01/BF:          	
01/BE:          	; ARGUMENT PROCESSING DONE
01/BE: 3000     ARGDONE:LOADI	A,0
01/BF: A080     	STORE	[DBANK],A
01/C1:          	
01/C0:          	; CHECK ARG COUNT
01/C0: 8000     	LOAD	A,[ARGC]
01/C1: 7001     	SUBI	A,1
01/C2: F7F1     	BRNZ	ARGBAD
01/C4:          	
01/C3:          	; CALL SVREAD
01/C3: 38C8     	LOADI	C,@+5
01/C4: BB00     	STOREF	[D],C
01/C5: 3406     	LOADI	B,FIO_B
01/C6: 3880     	LOADI	C,SVREAD
01/C7: FF3A     	JUMP	INDIR
01/C9:          	
01/C8:          	; GO TO PROMPT
01/C8: 3402     	LOADI	B,CMD0_B
01/C9: 3882     	LOADI	C,PROMPT
01/CA: FF37     	JUMP	INDIR
01/CC:          
01/CB:          
01/CB:          	; BANK IS DONE, MOVE ON TO THE NEXT
01/CB:          BI	= BI+1
01/CB:          .TEXT
01/CB:          .BANK	BI
02/80:          CMD0_B	= BI
02/80:          
02/80: 3057     ERROR:	LOADI	A,ST_ERR
02/81: FF01     	JUMP	0F
02/83:          
02/82:          	; SEND UP THE COMMAND LINE PROMPT
02/82: 305A     PROMPT:	LOADI	A,ST_PRM
02/83: 3802     0:	LOADI	C,BI
02/84: BB01     	STOREF	[D+1],C
02/85: 3401     	LOADI	B,STR0_B
02/86: A46C     	STORE	[ARG_BNK],B
02/87: 3404     	LOADI	B,S_PUTS
02/88: 388A     	LOADI	C,@+2
02/89: FF7A     	JUMP	SYSCALL
02/8B:          	
02/8A:          	; GET USER INPUT
02/8A: 3402     	LOADI	B,BUF_B
02/8B: A46C     	STORE	[ARG_BNK],B
02/8C: 3405     	LOADI	B,S_INPUT
02/8D: 388F     	LOADI	C,@+2
02/8E: FF75     	JUMP	SYSCALL
02/90:          
02/8F:          	; PREPARE TO PARSE
02/8F: 3000     	LOADI	A,0
02/90: A003     	STORE	[POINTER],A
02/91: A004     	STORE	[STATE],A
02/92: A009     	STORE	[ADDRESS],A
02/94:          	
02/93:          	; EXECUTE PARSE
02/93: 3898     	LOADI	C,@+5
02/94: BB00     	STOREF	[D],C
02/95: 3402     	LOADI	B,CMD0_B
02/96: 38BC     	LOADI	C,PARSEH
02/97: FF6A     	JUMP	INDIR
02/98: 5000     	ADDI	A,0
02/99: F4E6     	BRN	ERROR
02/9B:          	
02/9A:          	; MAKE SURE THE NEXT VALUE IS ZERO
02/9A: 8803     	LOAD	C,[POINTER]
02/9B: 3402     	LOADI	B,BUF_B
02/9C: A480     	STORE	[DBANK],B
02/9D: 9A00     	LOADF	C,[C]
02/9E: 3400     	LOADI	B,0
02/9F: A480     	STORE	[DBANK],B
02/A0: 5800     	ADDI	C,0
02/A1: F7DE     	BRNZ	ERROR
02/A3:          	
02/A2:          	; PARSE COMMAND
02/A2: 7051     	SUBI	A,'Q'
02/A3: F706     	BRNZ	1F
02/A4: 8004     	LOAD	A,[STATE]
02/A5: 5000     	ADDI	A,0
02/A6: F7D9     	BRNZ	ERROR
02/A7: 3405     	LOADI	B,CMD3_B
02/A8: 3880     	LOADI	C,QUIT
02/A9: FF58     	JUMP	INDIR
02/AB:          	
02/AA:          	; MAKE SURE THAT VALUE IS LESS THAN 256
02/AA:          	; AND SET ADDRESS
02/AA: 8405     1:	LOAD	B,[VALUE]
02/AB: 5400     	ADDI	B,0
02/AC: F7D3     	BRNZ	ERROR
02/AD: 8406     	LOAD	B,[VALUE+1]
02/AE: A409     	STORE	[ADDRESS],B
02/B0:          	
02/AF:          	; [M]ODIFY DATA MEMORY
02/AF: 70FC     	SUBI	A,'M'-'Q'
02/B0: 3403     	LOADI	B,CMD1_B
02/B1: 3880     	LOADI	C,MDATA
02/B2: F64F     	BRZ	INDIR
02/B4:          	
02/B3:          	; MODIFY [I]NSTRUCTION
02/B3: 70FC     	SUBI	A,'I'-'M'
02/B4: 3404     	LOADI	B,CMD2_B
02/B5: 3880     	LOADI	C,MINSTR
02/B6: F64B     	BRZ	INDIR
02/B8:          	
02/B7:          	; READ BLOCK
02/B7: 7009     	SUBI	A,'R'-'I'
02/B8: 3405     	LOADI	B,CMD3_B
02/B9: 388E     	LOADI	C,RBANK
02/BA: F647     	BRZ	INDIR
02/BC:          	
02/BB:          	
02/BB: FFC4     	JUMP	ERROR
02/BD:          	
02/BC:          	; PARSES A HEXADECIMAL NUMBER
02/BC:          	; THE NUMBER WILL CONTINUE TO BE PARSED UNTIL
02/BC:          	; THE END OF THE NUMBER IS REACHED.
02/BC:          	; [POINTER] = ADDRESS OF NUMBER
02/BC:          	; RETURNS A=0XFF IF THE PARSING OVERFLOWED
02/BC:          	; USES: A, B, C
02/BC: 3000     PARSEH:	LOADI	A,0
02/BD: A005     	STORE	[VALUE],A
02/BE: A006     	STORE	[VALUE+1],A
02/C0:          
02/BF:          	; READ A CHARACTER FROM THE COMMAND LINE
02/BF: 8803     0:	LOAD	C,[POINTER]
02/C0: 3402     	LOADI	B,BUF_B
02/C1: A480     	STORE	[DBANK],B
02/C2: 9200     	LOADF	A,[C]
02/C3: 3400     	LOADI	B,0
02/C4: A480     	STORE	[DBANK],B
02/C5: 5801     	ADDI	C,1
02/C6: A803     	STORE	[POINTER],C
02/C8:          	
02/C7:          	; CHECK BOUNDS
02/C7: 3430     	LOADI	B,'0'
02/C8: D100     	CMP	A,B
02/C9: F139     	BRB	IRET
02/CA: 3439     	LOADI	B,'9'
02/CB: D100     	CMP	A,B
02/CC: F907     	BRBE	1F
02/CE:          	
02/CD: 3441     	LOADI	B,'A'
02/CE: D100     	CMP	A,B
02/CF: F133     	BRB	IRET
02/D0: 3446     	LOADI	B,'F'
02/D1: D100     	CMP	A,B
02/D2: F830     	BRA	IRET
02/D4:          	
02/D3: 7007     	SUBI	A,'A'-('0'+10)
02/D5:          	
02/D4:          	; CONVERT FROM ASCII
02/D4: 7030     1:	SUBI	A,'0'
02/D6:          
02/D5:          	; MULTIPLY VALUE BY 4
02/D5: A00E     	STORE	[TEMP],A
02/D6: 8405     	LOAD	B,[VALUE]
02/D7: 8806     	LOAD	C,[VALUE+1]
02/D8: 3004     	LOADI	A,4
02/D9: 4500     2:	SHIFTL	B
02/DA: F00C     	BRC	9F
02/DB: 4A00     	SHIFTL	C
02/DC: F101     	BRNC	3F
02/DD: 5401     	ADDI	B,1
02/DE: 7001     3:	SUBI	A,1
02/DF: F7F9     	BRNZ	2B
02/E1:          	
02/E0:          	; ADD TO VALUE
02/E0: 800E     	LOAD	A,[TEMP]
02/E1: 4800     	ADD	C,A
02/E2: A405     	STORE	[VALUE],B
02/E3: A806     	STORE	[VALUE+1],C
02/E5:          	
02/E4:          	; SET STATE
02/E4: 3001     	LOADI	A,1
02/E5: A004     	STORE	[STATE],A
02/E6: FFD8     	JUMP	0B
02/E8:          	
02/E7:          	; ERROR
02/E7: 30FF     9:	LOADI	A,0XFF
02/E8: FF1A     	JUMP	IRET
02/EA:          
02/E9:          
02/E9:          	; BANK IS DONE, MOVE ON TO THE NEXT
02/E9:          BI	= BI+1
02/E9:          .TEXT
02/E9:          .BANK	BI
03/80:          CMD1_B	= BI
03/80:          
03/80:          	; MODIFY DATA
03/80:          	; MAKE SURE STATE IS 1
03/80: 8004     MDATA:	LOAD	A,[STATE]
03/81: 5000     	ADDI	A,0
03/82: F641     	BRZ	9F
03/84:          	
03/83:          	; MAKE SURE ADDRESS IS LESS THAN 128
03/83: 8009     	LOAD	A,[ADDRESS]
03/84: 3480     	LOADI	B,0X80
03/85: D100     	CMP	A,B
03/86: F03D     	BRAE	9F
03/88:          	
03/87:          	; PRINT ADDRESS
03/87: 3803     0:	LOADI	C,BI
03/88: BB01     	STOREF	[D+1],C
03/89: 388E     	LOADI	C,@+5
03/8A: BB00     	STOREF	[D],C
03/8B: 3408     	LOADI	B,PRINT_B
03/8C: 3880     	LOADI	C,PADDR
03/8D: FF74     	JUMP	INDIR
03/8F:          	
03/8E:          	; READ DATA AND PRINT
03/8E: 8009     	LOAD	A,[ADDRESS]
03/8F: 3408     	LOADI	B,WORK_B+1
03/90: A480     	STORE	[DBANK],B
03/91: 9000     	LOADF	A,[A]
03/92: 3400     	LOADI	B,0
03/93: A480     	STORE	[DBANK],B
03/94: 3899     	LOADI	C,@+5
03/95: BB00     	STOREF	[D],C
03/96: 3408     	LOADI	B,PRINT_B
03/97: 3895     	LOADI	C,PBYTE
03/98: FF69     	JUMP	INDIR
03/9A:          	
03/99:          	; PRINT COLON
03/99: 303A     	LOADI	A,':'
03/9A: 3401     	LOADI	B,S_PUTC
03/9B: 389D     	LOADI	C,@+2
03/9C: FF67     	JUMP	SYSCALL
03/9E:          	
03/9D:          	; GET A LINE FROM THE USER
03/9D: 3002     	LOADI	A,BUF_B
03/9E: A06C     	STORE	[ARG_BNK],A
03/9F: 3405     	LOADI	B,S_INPUT
03/A0: 38A2     	LOADI	C,@+2
03/A1: FF62     	JUMP	SYSCALL
03/A3:          	
03/A2:          	; PARSE THE HEX
03/A2: 3000     	LOADI	A,0
03/A3: A003     	STORE	[POINTER],A
03/A4: A004     	STORE	[STATE],A
03/A5: 38AA     	LOADI	C,@+5
03/A6: BB00     	STOREF	[D],C
03/A7: 3402     	LOADI	B,CMD0_B
03/A8: 38BC     	LOADI	C,PARSEH
03/A9: FF58     	JUMP	INDIR
03/AA: 5000     	ADDI	A,0
03/AB: F418     	BRN	9F
03/AD:          	
03/AC:          	; SEE IF WE SHOULD EXIT
03/AC: 5000     	ADDI	A,0
03/AD: F713     	BRNZ	8F
03/AF:          	
03/AE:          	; DO WE SKIP
03/AE: 8004     	LOAD	A,[STATE]
03/AF: 5000     	ADDI	A,0
03/B0: F60C     	BRZ	1F
03/B2:          	
03/B1:          	; MAKE SURE VALUE IS LESS THAN 256
03/B1: 8405     	LOAD	B,[VALUE]
03/B2: 5400     	ADDI	B,0
03/B3: F710     	BRNZ	9F
03/B5:          	
03/B4:          	; STORE INTO MEMORY
03/B4: 8009     	LOAD	A,[ADDRESS]
03/B5: 8406     	LOAD	B,[VALUE+1]
03/B6: 3808     	LOADI	C,WORK_B+1
03/B7: A880     	STORE	[DBANK],C
03/B8: B400     	STOREF	[A],B
03/B9: 3800     	LOADI	C,0
03/BA: A880     	STORE	[DBANK],C
03/BB: 30FF     	LOADI	A,0XFF
03/BC: A008     	STORE	[DIRTY],A
03/BE:          
03/BD:          	; INCREMENT ADDRESS
03/BD: 8009     1:	LOAD	A,[ADDRESS]
03/BE: 5001     	ADDI	A,1
03/BF: A009     	STORE	[ADDRESS],A
03/C0: F5C6     	BRNN	0B
03/C2:          
03/C1:          	; NORMAL EXIT
03/C1: 3402     8:	LOADI	B,CMD0_B
03/C2: 3882     	LOADI	C,PROMPT
03/C3: FF3E     	JUMP	INDIR
03/C5:          
03/C4:          	; ERROR EXIT
03/C4: 3402     9:	LOADI	B,CMD0_B
03/C5: 3880     	LOADI	C,ERROR
03/C6: FF3B     	JUMP	INDIR
03/C8:          	
03/C7:          	; BANK IS DONE, MOVE ON TO THE NEXT
03/C7:          BI	= BI+1
03/C7:          .TEXT
03/C7:          .BANK	BI
04/80:          CMD2_B	= BI
04/80:          
04/80:          	; MODIFY INSTRUCTION
04/80:          	; MAKE SURE STATE IS 1
04/80: 8004     MINSTR:	LOAD	A,[STATE]
04/81: 5000     	ADDI	A,0
04/82: F655     	BRZ	9F
04/84:          	
04/83:          	; MAKE SURE ADDRESS IS GREATER THAN 128
04/83: 8009     	LOAD	A,[ADDRESS]
04/84: 3480     	LOADI	B,0X80
04/85: D100     	CMP	A,B
04/86: F151     	BRB	9F
04/88:          	
04/87:          	; PRINT ADDRESS
04/87: 3804     0:	LOADI	C,BI
04/88: BB01     	STOREF	[D+1],C
04/89: 388E     	LOADI	C,@+5
04/8A: BB00     	STOREF	[D],C
04/8B: 3408     	LOADI	B,PRINT_B
04/8C: 3880     	LOADI	C,PADDR
04/8D: FF74     	JUMP	INDIR
04/8F:          	
04/8E:          	; READ INSTRUCTION AND PRINT
04/8E: 8009     	LOAD	A,[ADDRESS]
04/8F: 3409     	LOADI	B,WORK_B+2
04/90: 4000     	SHIFTL	A
04/91: 4000     	SHIFTL	A
04/92: F101     	BRNC	1F
04/93: 5401     	ADDI	B,1
04/94: C100     1:	SHIFTR	A
04/95: A480     	STORE	[DBANK],B
04/96: 9401     	LOADF	B,[A+1]
04/97: 9000     	LOADF	A,[A]
04/98: 3800     	LOADI	C,0
04/99: A880     	STORE	[DBANK],C
04/9A: A40C     	STORE	[HIGHB],B
04/9B: 38A0     	LOADI	C,@+5
04/9C: BB00     	STOREF	[D],C
04/9D: 3408     	LOADI	B,PRINT_B
04/9E: 3895     	LOADI	C,PBYTE
04/9F: FF62     	JUMP	INDIR
04/A0: 800C     	LOAD	A,[HIGHB]
04/A1: 38A6     	LOADI	C,@+5
04/A2: BB00     	STOREF	[D],C
04/A3: 3408     	LOADI	B,PRINT_B
04/A4: 3895     	LOADI	C,PBYTE
04/A5: FF5C     	JUMP	INDIR
04/A7:          	
04/A6:          	; PRINT COLON
04/A6: 303A     	LOADI	A,':'
04/A7: 3401     	LOADI	B,S_PUTC
04/A8: 38AA     	LOADI	C,@+2
04/A9: FF5A     	JUMP	SYSCALL
04/AB:          	
04/AA:          	; GET A LINE FROM THE USER
04/AA: 3002     	LOADI	A,BUF_B
04/AB: A06C     	STORE	[ARG_BNK],A
04/AC: 3405     	LOADI	B,S_INPUT
04/AD: 38AF     	LOADI	C,@+2
04/AE: FF55     	JUMP	SYSCALL
04/B0:          	
04/AF:          	; PARSE THE HEX
04/AF: 3000     	LOADI	A,0
04/B0: A003     	STORE	[POINTER],A
04/B1: A004     	STORE	[STATE],A
04/B2: 38B7     	LOADI	C,@+5
04/B3: BB00     	STOREF	[D],C
04/B4: 3402     	LOADI	B,CMD0_B
04/B5: 38BC     	LOADI	C,PARSEH
04/B6: FF4B     	JUMP	INDIR
04/B7: 5000     	ADDI	A,0
04/B8: F41F     	BRN	9F
04/BA:          	
04/B9:          	; SEE IF WE SHOULD EXIT
04/B9: 5000     	ADDI	A,0
04/BA: F71A     	BRNZ	8F
04/BC:          	
04/BB:          	; DO WE SKIP
04/BB: 8004     	LOAD	A,[STATE]
04/BC: 5000     	ADDI	A,0
04/BD: F613     	BRZ	3F
04/BF:          	
04/BE:          	; STORE INTO MEMORY
04/BE: 8009     	LOAD	A,[ADDRESS]
04/BF: 8405     	LOAD	B,[VALUE]
04/C0: 3809     	LOADI	C,WORK_B+2
04/C1: 4000     	SHIFTL	A
04/C2: 4000     	SHIFTL	A
04/C3: F101     	BRNC	2F
04/C4: 5801     	ADDI	C,1
04/C5: C100     2:	SHIFTR	A
04/C6: A880     	STORE	[DBANK],C
04/C7: B400     	STOREF	[A],B
04/C8: 3400     	LOADI	B,0
04/C9: A480     	STORE	[DBANK],B
04/CA: 8406     	LOAD	B,[VALUE+1]
04/CB: A880     	STORE	[DBANK],C
04/CC: B401     	STOREF	[A+1],B
04/CD: 3800     	LOADI	C,0
04/CE: A880     	STORE	[DBANK],C
04/CF: 30FF     	LOADI	A,0XFF
04/D0: A008     	STORE	[DIRTY],A
04/D2:          
04/D1:          	; INCREMENT ADDRESS
04/D1: 8009     3:	LOAD	A,[ADDRESS]
04/D2: 5001     	ADDI	A,1
04/D3: A009     	STORE	[ADDRESS],A
04/D4: F4B2     	BRN	0B
04/D6:          
04/D5:          	; NORMAL EXIT
04/D5: 3402     8:	LOADI	B,CMD0_B
04/D6: 3882     	LOADI	C,PROMPT
04/D7: FF2A     	JUMP	INDIR
04/D9:          
04/D8:          	; ERROR EXIT
04/D8: 3402     9:	LOADI	B,CMD0_B
04/D9: 3880     	LOADI	C,ERROR
04/DA: FF27     	JUMP	INDIR
04/DC:          
04/DB:          	; BANK IS DONE, MOVE ON TO THE NEXT
04/DB:          BI	= BI+1
04/DB:          .TEXT
04/DB:          .BANK	BI
05/80:          CMD3_B	= BI
05/80:          
05/80:          
05/80:          	; EXIT OUT OF PROGRAM
05/80: 8008     QUIT:	LOAD	A,[DIRTY]
05/81: 5000     	ADDI	A,0
05/82: F608     	BRZ	9F
05/84:          	
05/83:          	; WRITE OUT THE CBLOCK
05/83: 3805     	LOADI	C,BI
05/84: BB01     	STOREF	[D+1],C
05/85: 3007     	LOADI	A,WORK_B
05/86: A06C     	STORE	[ARG_BNK],A
05/87: 8007     	LOAD	A,[CBLOCK]
05/88: 3409     	LOADI	B,S_WRITE
05/89: 388B     	LOADI	C,@+2
05/8A: FF79     	JUMP	SYSCALL
05/8C:          	
05/8B:          	; EXIT
05/8B: 3401     9:	LOADI	B,CORE0_B
05/8C: 38BC     	LOADI	C,EXIT
05/8D: FF74     	JUMP	INDIR
05/8F:          	
05/8E:          	; READ A BANK
05/8E: 3805     RBANK:	LOADI	C,BI
05/8F: BB01     	STOREF	[D+1],C
05/90: 8008     	LOAD	A,[DIRTY]
05/91: 5000     	ADDI	A,0
05/92: F617     	BRZ	9F
05/94:          	
05/93:          	; WRITE OUT THE CBLOCK
05/93: 3007     	LOADI	A,WORK_B
05/94: A06C     	STORE	[ARG_BNK],A
05/95: 8007     	LOAD	A,[CBLOCK]
05/96: 3409     	LOADI	B,S_WRITE
05/97: 3899     	LOADI	C,@+2
05/98: FF6B     	JUMP	SYSCALL
05/9A:          	
05/99:          	; ALLOCATE BLOCK ON MAP
05/99: 8807     	LOAD	C,[CBLOCK]
05/9A: 3407     	LOADI	B,WORK_B
05/9B: A480     	STORE	[DBANK],B
05/9C: 8002     	LOAD	A,[2]
05/9D: 3403     	LOADI	B,BTAB_B
05/9E: 4000     	SHIFTL	A
05/9F: F101     	BRNC	0F
05/A0: 5401     	ADDI	B,1
05/A1: C100     0:	SHIFTR	A
05/A2: A480     	STORE	[DBANK],B
05/A3: B800     	STOREF	[A],C
05/A4: 5402     	ADDI	B,2
05/A5: A480     	STORE	[DBANK],B
05/A6: 38FF     	LOADI	C,0XFF
05/A7: B800     	STOREF	[A],C
05/A8: 3400     	LOADI	B,0
05/A9: A480     	STORE	[DBANK],B
05/AB:          	
05/AA:          	
05/AA:          	; READ IN A NEW BLOCK
05/AA: 8009     9:	LOAD	A,[ADDRESS]
05/AB: 38B0     	LOADI	C,@+5
05/AC: BB00     	STOREF	[D],C
05/AD: 3407     	LOADI	B,BIO_B
05/AE: 3880     	LOADI	C,BREAD
05/AF: FF52     	JUMP	INDIR
05/B1:          	
05/B0:          	; GO BACK TO PROMPT
05/B0: 3402     	LOADI	B,CMD0_B
05/B1: 3882     	LOADI	C,PROMPT
05/B2: FF4F     	JUMP	INDIR
05/B4:          
05/B3:          	; BANK IS DONE, MOVE ON TO THE NEXT
05/B3:          BI	= BI+1
05/B3:          .TEXT
05/B3:          .BANK	BI
06/80:          FIO_B	= BI
06/80:          
06/80:          	; READS IN THE INITIAL SAVE FILE
06/80:          	; IF A RECORD IS FOUND, THE BLOCK WILL BE RECORDED
06/80:          	; THE PURPOSE OF THIS IS TO GET A MAP OF WHAT BANKS
06/80:          	; EXIST ON WHAT BLOCKS IN THE FILE
06/80:          	; REBUILDS THE ALLOCATION TABLE
06/80:          	; USES: A, B, C
06/80: 7C02     SVREAD:	SUBI	D,2
06/81: 3000     	LOADI	A,0
06/82: A00B     	STORE	[ISFULL],A
06/83: 3800     	LOADI	C,0
06/84: 3405     0:	LOADI	B,ALLOC_B
06/85: A480     	STORE	[DBANK],B
06/86: B200     	STOREF	[C],A
06/87: 3406     	LOADI	B,ALLOC_B+1
06/88: A480     	STORE	[DBANK],B
06/89: B200     	STOREF	[C],A
06/8A: 5801     	ADDI	C,1
06/8B: F5F8     	BRNN	0B
06/8C: A080     	STORE	[DBANK],A
06/8E:          	
06/8D:          	; ATTEMPT TO OPEN FILE
06/8D: 8072     	LOAD	A,[CMDL_B]
06/8E: A06C     	STORE	[ARG_BNK],A
06/8F: 8001     	LOAD	A,[ARGV]
06/90: 3806     	LOADI	C,BI
06/91: BB01     	STOREF	[D+1],C
06/92: 3406     	LOADI	B,S_OPEN
06/93: 3895     	LOADI	C,@+2
06/94: FF6F     	JUMP	SYSCALL
06/95: 5000     	ADDI	A,0
06/96: F608     	BRZ	1F
06/98:          	
06/97:          	; CAN'T OPEN, CREATE THE FILE
06/97: 8001     	LOAD	A,[ARGV]
06/98: 340D     	LOADI	B,S_CREAT
06/99: 389B     	LOADI	C,@+2
06/9A: FF69     	JUMP	SYSCALL
06/9B: 5000     	ADDI	A,0
06/9C: F602     	BRZ	1F
06/9E:          	
06/9D:          	; ERROR
06/9D: 3027     	LOADI	A,ERROR1
06/9E: FF2B     	JUMP	9F
06/A0:          	
06/9F:          	; RESET BLOCK COUNTER
06/9F: 3007     1:	LOADI	A,WORK_B
06/A0: A06C     	STORE	[ARG_BNK],A
06/A1: 3800     	LOADI	C,0
06/A3:          	
06/A2:          	; READ A BLOCK
06/A2: A80A     2:	STORE	[FNEXT],C
06/A3: 2200     	MOV	A,C
06/A4: 3408     	LOADI	B,S_READ
06/A5: 38A7     	LOADI	C,@+2
06/A6: FF5D     	JUMP	SYSCALL
06/A7: 5000     	ADDI	A,0
06/A8: F71C     	BRNZ	4F
06/AA:          	
06/A9:          	; CHECK BLOCK
06/A9: 880A     	LOAD	C,[FNEXT]
06/AA: 304A     	LOADI	A,ERROR3
06/AB: 3407     	LOADI	B,WORK_B
06/AC: A480     	STORE	[DBANK],B
06/AD: 8400     	LOAD	B,[0]
06/AE: 7402     	SUBI	B,0X02
06/AF: F71A     	BRNZ	9F
06/B0: 8401     	LOAD	B,[1]
06/B1: 7481     	SUBI	B,0X81
06/B2: F717     	BRNZ	9F
06/B4:          	
06/B3:          	; GRAB BANK #
06/B3: 8002     	LOAD	A,[2]
06/B4: 3403     	LOADI	B,BTAB_B
06/B5: 4000     	SHIFTL	A
06/B6: F101     	BRNC	3F
06/B7: 5401     	ADDI	B,1
06/B8: C100     3:	SHIFTR	A
06/B9: A480     	STORE	[DBANK],B
06/BA: B800     	STOREF	[A],C
06/BC:          	
06/BB:          	; MARK AS ALLOCATED
06/BB: 5402     	ADDI	B,2
06/BC: A480     	STORE	[DBANK],B
06/BD: 34FF     	LOADI	B,0XFF
06/BE: B400     	STOREF	[A],B
06/C0:          	
06/BF:          	; INCREMENT BLOCK COUNTER
06/BF: 3000     	LOADI	A,0
06/C0: A080     	STORE	[DBANK],A
06/C1: 5801     	ADDI	C,1
06/C2: F1DF     	BRNC	2B
06/C3: 30FF     	LOADI	A,0XFF
06/C4: A00B     	STORE	[ISFULL],A
06/C6:          	
06/C5:          	; DONE READING, LETS OPEN A BLOCK
06/C5: 5C02     4:	ADDI	D,2
06/C6: 3001     	LOADI	A,1
06/C7: 3407     	LOADI	B,BIO_B
06/C8: 3880     	LOADI	C,BREAD
06/C9: FF38     	JUMP	INDIR
06/CB:          	
06/CA:          	; ERROR OUT!
06/CA: 3400     9:	LOADI	B,0
06/CB: A480     	STORE	[DBANK],B
06/CC: 3401     	LOADI	B,CORE0_B
06/CD: B701     	STOREF	[D+1],B
06/CE: 3401     	LOADI	B,STR0_B
06/CF: A46C     	STORE	[ARG_BNK],B
06/D0: 3404     	LOADI	B,S_PUTS
06/D1: 38BC     	LOADI	C,EXIT
06/D2: FF31     	JUMP	SYSCALL
06/D4:          	
06/D3:          	; BANK IS DONE, MOVE ON TO THE NEXT
06/D3:          BI	= BI+1
06/D3:          .TEXT
06/D3:          .BANK	BI
07/80:          BIO_B	= BI
07/80:          
07/80:          	; READS IN A BANK
07/80:          	; IF THAT BANK DOESN'T EXIST, CLEAR OUT THE BUFFER
07/80:          	; DIRTY FLAG IS ALSO RESET
07/80:          	; A = BANK TO READ IN
07/80:          	; USES: A, B, C
07/80: 7C02     BREAD:	SUBI	D,2
07/82:          	
07/81:          	; RESET DIRTY FLAG
07/81: 3400     	LOADI	B,0
07/82: A408     	STORE	[DIRTY],B
07/84:          
07/83:          	; SAVE BANK
07/83: A00E     	STORE	[TEMP],A
07/85:          
07/84:          	; GRAB BANK #
07/84: 3405     	LOADI	B,ALLOC_B
07/85: 4000     	SHIFTL	A
07/86: F101     	BRNC	3F
07/87: 5401     	ADDI	B,1
07/88: C100     3:	SHIFTR	A
07/89: A480     	STORE	[DBANK],B
07/8A: 9800     	LOADF	C,[A]
07/8C:          	
07/8B:          	; CHECK IF IT'S BEEN ALLOCATED
07/8B: 5800     	ADDI	C,0
07/8C: F60F     	BRZ	0F
07/8E:          	
07/8D:          	; YEP, LETS READ IT INTO MEMORY
07/8D: 7402     	SUBI	B,2
07/8E: A480     	STORE	[DBANK],B
07/8F: 9000     	LOADF	A,[A]
07/90: 3800     	LOADI	C,0
07/91: A880     	STORE	[DBANK],C
07/92: A007     	STORE	[CBLOCK],A
07/93: 3807     	LOADI	C,BI
07/94: BB01     	STOREF	[D+1],C
07/95: 3807     	LOADI	C,WORK_B
07/96: A86C     	STORE	[ARG_BNK],C
07/97: 3408     	LOADI	B,S_READ 
07/98: 389A     	LOADI	C,@+2
07/99: FF6A     	JUMP	SYSCALL
07/9A: 5000     	ADDI	A,0
07/9B: F630     	BRZ	8F
07/9D:          	
07/9C:          	; CLEAR BUFFER
07/9C: 3400     0:	LOADI	B,0
07/9D: A480     	STORE	[DBANK],B
07/9E: 800E     	LOAD	A,[TEMP]
07/9F: 3407     	LOADI	B,WORK_B
07/A0: A480     	STORE	[DBANK],B
07/A1: A002     	STORE	[2],A
07/A2: 3002     	LOADI	A,0X02
07/A3: A000     	STORE	[0],A
07/A4: 3081     	LOADI	A,0X81
07/A5: A001     	STORE	[1],A
07/A6: 3003     	LOADI	A,0X03
07/A7: 34FF     	LOADI	B,0XFF
07/A8: B400     1:	STOREF	[A],B
07/A9: 5001     	ADDI	A,1
07/AA: F5FD     	BRNN	1B
07/AC:          	
07/AB: 3408     	LOADI	B,WORK_B+1
07/AC: A480     	STORE	[DBANK],B
07/AD: 3000     	LOADI	A,0
07/AE: 3800     	LOADI	C,0
07/AF: B800     2:	STOREF	[A],C
07/B0: 5001     	ADDI	A,1
07/B1: F5FD     	BRNN	2B
07/B3:          	
07/B2: 3409     	LOADI	B,WORK_B+2
07/B3: A480     	STORE	[DBANK],B
07/B4: 3000     	LOADI	A,0
07/B5: 3820     	LOADI	C,0X20
07/B6: B800     3:	STOREF	[A],C
07/B7: 5001     	ADDI	A,1
07/B8: F5FD     	BRNN	3B
07/BA:          	
07/B9: 340A     	LOADI	B,WORK_B+3
07/BA: A480     	STORE	[DBANK],B
07/BB: 3000     	LOADI	A,0
07/BC: B800     4:	STOREF	[A],C
07/BD: 5001     	ADDI	A,1
07/BE: F5FD     	BRNN	4B
07/C0:          	
07/BF:          	; CHECK IF THERE IS SPACE
07/BF: 3000     	LOADI	A,0
07/C0: A080     	STORE	[DBANK],A
07/C1: 840B     	LOAD	B,[ISFULL]
07/C2: 303B     	LOADI	A,ERROR2
07/C3: 5400     	ADDI	B,0
07/C4: F709     	BRNZ	9F
07/C6:          	
07/C5:          	; THERE IS SPACE, INCREMENT FNEXT
07/C5: 800A     	LOAD	A,[FNEXT]
07/C6: A007     	STORE	[CBLOCK],A
07/C7: 5001     	ADDI	A,1
07/C8: A00A     	STORE	[FNEXT],A
07/C9: F702     	BRNZ	8F
07/CA: 30FF     	LOADI	A,0XFF
07/CB: A00B     	STORE	[ISFULL],A
07/CD:          
07/CC:          	; RESTORE STACK AND RETURN
07/CC: 5C02     8:	ADDI	D,2
07/CD: FF35     	JUMP	IRET
07/CF:          
07/CE:          	; ERROR OUT!
07/CE: 3400     9:	LOADI	B,0
07/CF: A480     	STORE	[DBANK],B
07/D0: 3401     	LOADI	B,CORE0_B
07/D1: B701     	STOREF	[D+1],B
07/D2: 3401     	LOADI	B,STR0_B
07/D3: A46C     	STORE	[ARG_BNK],B
07/D4: 3404     	LOADI	B,S_PUTS
07/D5: 38BC     	LOADI	C,EXIT
07/D6: FF2D     	JUMP	SYSCALL
07/D8:          	
07/D7:          	
07/D7:          	; BANK IS DONE, MOVE ON TO THE NEXT
07/D7:          BI	= BI+1
07/D7:          .TEXT
07/D7:          .BANK	BI
08/80:          PRINT_B	= BI
08/80:          
08/80:          	; PRINT THE CURRENT ADDRESS
08/80: 7C02     PADDR:	SUBI	D,2
08/82:          
08/81:          	; DO A CR/LF
08/81: 3808     	LOADI	C,BI
08/82: BB01     	STOREF	[D+1],C
08/83: 300A     	LOADI	A,0X0A
08/84: 3401     	LOADI	B,S_PUTC
08/85: 3887     	LOADI	C,@+2
08/86: FF7D     	JUMP	SYSCALL
08/87: 300D     	LOADI	A,0X0D
08/88: 3401     	LOADI	B,S_PUTC
08/89: 388B     	LOADI	C,@+2
08/8A: FF79     	JUMP	SYSCALL
08/8C:          
08/8B:          	; PRINT ADDRESS BYTE
08/8B: 8009     	LOAD	A,[ADDRESS]
08/8C: 388F     	LOADI	C,@+3
08/8D: BB00     	STOREF	[D],C
08/8E: FF06     	JUMP	PBYTE
08/90:          	
08/8F:          	; PRINT SLASH AND SPACE
08/8F: 302F     	LOADI	A,'/'
08/90: 3401     	LOADI	B,S_PUTC
08/91: 3893     	LOADI	C,@+2
08/92: FF71     	JUMP	SYSCALL
08/94:          
08/93: 5C02     	ADDI	D,2 
08/94: FF6E     	JUMP	IRET
08/96:          	
08/95:          	; PRINT A BYTE
08/95:          	; A = BYTE TO PRINT
08/95: 7C02     PBYTE:	SUBI	D,2
08/96: A00E     	STORE	[TEMP],A
08/97: C100     	SHIFTR	A
08/98: C100     	SHIFTR	A
08/99: C100     	SHIFTR	A
08/9A: C100     	SHIFTR	A
08/9B: 3808     	LOADI	C,BI
08/9C: BB01     	STOREF	[D+1],C
08/9D: 38A0     	LOADI	C,@+3
08/9E: BB00     	STOREF	[D],C
08/9F: FF07     	JUMP	PNYBBLE
08/A0: 5C02     	ADDI	D,2
08/A1: 800E     	LOAD	A,[TEMP]
08/A2: 3410     	LOADI	B,16
08/A3: D100     0:	CMP	A,B
08/A4: F102     	BRB	PNYBBLE
08/A5: 7010     	SUBI	A,16
08/A6: FFFC     	JUMP	0B
08/A8:          	
08/A7:          	; PUT A NYBBLE ON THE TERMINAL
08/A7:          	; A = NYBBLE TO OUTPUT
08/A7: 340A     PNYBBLE:LOADI	B,10
08/A8: D100     	CMP	A,B
08/A9: F101     	BRB	0F
08/AA: 5007     	ADDI	A,'A'-'0'-10
08/AB: 5030     0:	ADDI	A,'0'
08/AC: 3401     	LOADI	B,S_PUTC
08/AD: FF57     	JUMP	SYSJUMP
08/AF:          
08/AE:          .DATA
08/00:          .BANK	BD
01/00:          STR0_B	= BD
01/00:          
01/00:          	; ERROR MESSAGES
01/00: 494E5641
       4C494420
       41524755
       4D454E54
       530A0D   .DEFL BYTE ERROR0	"INVALID ARGUMENTS",0X0A,0X0D,
01/13: 55534147
       453A2044
       45425547
       2046494C
       450A0D00 			"USAGE: DEBUG FILE",0X0A,0X0D,0
01/27: 43414E27
       54204352
       45415445
       2046494C
       450A0D00 .DEFL BYTE ERROR1	"CAN'T CREATE FILE",0X0A,0X0D,0
01/3B: 4F555420
       4F462053
       50414345
       0A0D00   .DEFL BYTE ERROR2	"OUT OF SPACE",0X0A,0X0D,0
01/4A: 42414420
       5245434F
       52440A0D
       00       .DEFL BYTE ERROR3	"BAD RECORD",0X0A,0X0D,0
01/57:          
01/57: 0A0D3F   .DEFL BYTE ST_ERR	0X0A,0X0D,"?"
01/5A: 0A0D4000 .DEFL BYTE ST_PRM	0X0A,0X0D,"@",0
01/5E:          
01/5E:          	; ZERO BANK STUFF
01/5E:          .BANK	0
00/00:          .BSS
00/00:          
00/00:          	; COMMAND LINE ARGUMENTS
00/00: 00       .DEFL BYTE ARGC		0
00/01: 0000     .DEFL BYTE ARGV		0,0
00/03:          
00/03:          	; PARSE STATE
00/03: 00       .DEFL BYTE POINTER	0
00/04: 00       .DEFL BYTE STATE	0
00/05: 0000     .DEFL BYTE VALUE	0,0
00/07:          
00/07:          	; BLOCK EDIT STATE
00/07: 00       .DEFL BYTE CBLOCK	0
00/08: 00       .DEFL BYTE DIRTY	0
00/09: 00       .DEFL BYTE ADDRESS	0
00/0A: 00       .DEFL BYTE FNEXT	0
00/0B: 00       .DEFL BYTE ISFULL	0
00/0C: 00       .DEFL BYTE HIGHB	0
00/0D:          
00/0D:          	; STACK PARKING SPACE
00/0D: 00       .DEFL BYTE SPARK	0
00/0E:          
00/0E:          	; TEMPORARY VALUE
00/0E: 00       .DEFL BYTE TEMP		0
00/0F:          
00/0F:          BD	= BD+1
00/0F:          .DATA
00/0F:          .BANK	BD
02/00:          BUF_B	= BD
02/00:          
02/00:          	; GENERAL PURPOSE BUFFER
02/00:          	
02/00:          BD	= BD+1
02/00:          .DATA
02/00:          .BANK	BD
03/00:          BTAB_B	= BD
03/00:          BD	= BD+1
03/00:          
03/00:          	; BLOCK ADDRESS TABLE
03/00:          	; TURNS A LOGIC SAV BLOCK INTO A PHYSICAL FILE BLOCK
03/00:          
03/00:          BD	= BD+1
03/00:          .DATA
03/00:          .BANK	BD
05/00:          ALLOC_B	= BD
05/00:          BD	= BD+1
05/00:          
05/00:          	; BLOCK ALLOCATION TABLE
05/00:          	; MARKS IF A LOGICAL SAV BLOCK HAS BEEN ALLOCATED YET
05/00:          	
05/00:          BD	= BD+1
05/00:          .DATA
05/00:          .BANK	BD
07/00:          WORK_B	= BD
07/00:          BD	= BD+3
07/00:          
07/00:          	; WORK BANK
07/00:          	; WORK_B + 0 = RECORD HEADER
07/00:          	; WORK_B + 1 = DATA SEGMENT
07/00:          	; WORK_B + 2 = ISR SEGMENT 128-191
07/00:          	; WORK_B + 3 = ISR SEGMENT 192-255
