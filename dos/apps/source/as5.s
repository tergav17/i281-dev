; AS5.S
; ASSEMBLY OUTPUT GENERATOR
; GAVIN TERSTEEG, 2024
; SDMAY24-14

BI	= BI+1
.TEXT
.BANK	BI
EMIT0_B	= BI

	; INITALIZE THE EMISSION SECTION
	; CREATE THE OUTPUT FILE, AND RESET ALL BANK STATE INFORMATION
EMINIT:	LOADI	A,0
	STORE	[FNEXT],A
	
	; CLEAR ALLOCATION TABLE
	LOADI	B,0
	LOADI	A,ALLOC_B
	LOADI	C,@+2
	JUMP	CLRBANK
	LOADI	A,ALLOC_B+1
	LOADI	C,@+2
	JUMP	CLRBANK
	
	; CREATE 'AOUT' FILE
	SUBI	D,2
	LOADI	B,STR_B
	STORE	[ARG_BNK],B
	LOADI	A,AOUT
	LOADI	C,BI
	STOREF	[D+1],C
	LOADI	C,@+2
	LOADI	B,S_CREAT
	LOADI	C,@+2
	JUMP	SYSCALL
	ADDI	A,0
	BRZ	1F
	
	; ERROR!
	LOADI	A,AOUTERR
	LOADI	B,S_PUTS
	LOADI	C,@+2
	JUMP	SYSCALL
	LOADI	B,S_EXIT
	JUMP	SYSCALL
	
	; RESET DIRTY
1:	LOADI	A,0
	STORE	[DIRTY],A

	ADDI	D,2
	JUMP	IRET

	; RESET COUNTERS FOR THE NEXT PASS
	; ALSO OPENS UP BANK 1
EMPASS:	LOADI	B,0
	LOADI	A,DCNT_B
	LOADI	C,@+2
	JUMP	CLRBANK
	LOADI	A,DCNT_B+1
	LOADI	C,@+2
	JUMP	CLRBANK

	; DO WE START IN THE LOWER SECTION?
	LOAD	A,[LFLAG]
	ADDI	A,0
	BRNZ	1F
	LOADI	B,0X80
	
	; RESET CODE MEMORY COUNTERS
1:	LOADI	A,CCNT_B
	LOADI	C,@+2
	JUMP	CLRBANK
	LOADI	A,CCNT_B+1
	LOADI	C,@+2
	JUMP	CLRBANK
	
	; FALL THROUGH TO SETBANK
	LOADI	A,1
	
	; CHANGES WHAT BANK BYTES WILL BE EMITTED INTO  
	; A = BANK TO EMIT INTO
SETBANK:LOADI	B,EMIT1_B
	LOADI	C,SETBANA
	JUMP	INDIR

	; SERVICE FUNCTION TO FILL A BANK
	; A = BANK TO CLEAR
	; B = FILL BYTE
	; C = RETURN ADDRESS
CLRBANK:STORE	[DBANK],A
	LOADI	A,0
0:	STOREF	[A],B
	ADDI	A,1
	BRNN	0B
	LOADI	A,0
	STORE	[DBANK],A
	JUMPR	C
	
BI	= BI+1
.TEXT
.BANK	BI
EMIT1_B	= BI

	; SHADOW OF SETBANK
SETBANA:JUMP	IRET

	; BLOCK ADDRESS TABLE
	; TURNS A LOGIC SAV BLOCK INTO A PHYSICAL FILE BLOCK
.BANK	BD
.BSS
BTAB_B	= BD


BD	= BD+2

	; BLOCK ALLOCATION TABLE
	; MARKS IF A LOGICAL SAV BLOCK HAS BEEN ALLOCATED YET
.BANK	BD
.BSS
ALLOC_B	= BD


BD	= BD+2

	; DATA BANK COUNTERS
	; STORES DATA COUNTERS FOR EACH BANK
.BANK	BD
.BSS
DCNT_B	= BD


BD	= BD+2

	; CODE BANK COUNTERS
	; STORES CODE COUNTERS FOR EACH BANK
.BANK	BD
.BSS
CCNT_B	= BD


BD	= BD+2

	; WORK BANK FOR STORAGE .SAV RECORDS
	; WORK_B + 0 = RECORD HEADER
	; WORK_B + 1 = DATA SEGMENT
	; WORK_B + 2 = ISR SEGMENT 128-191
	; WORK_B + 3 = ISR SEGMENT 192-255
.BANK	BD
.BSS
WORK_B	= BD


BD	= BD+4