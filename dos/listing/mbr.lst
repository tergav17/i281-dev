00/00:          ; MBR.S
01/80:          ; MASTER BOOT RECORD (2ND STAGE BOOTLOADER)
01/80:          
01/80:          ; DEFINES
01/80:          INDIR	= 0X01
01/80:          PRGM	= 0X02
01/80:          HALT	= 0X7F
01/80:          
01/80:          DBANK	= 0X80		; DATA BANK ADDRESS 
01/80:          CF	= 0XA0		; COMPACT FLASH BASE ADDRESS
01/80:          CF_DATA	= CF+0X00	; CF DATA
01/80:          CF_ERR	= CF+0X01	; CF ERROR
01/80:          CF_FEAT	= CF+0x01	; CF FEATURES
01/80:          CF_CNT	= CF+0X02	; CF SECTOR COUNT
01/80:          CF_LBA0	= CF+0X03	; CF LBA BITS 0-7
01/80:          CF_LBA1	= CF+0X04	; CF LBA BITS 8-15
01/80:          CF_LBA2	= CF+0X05	; CF LBA BITS 16-23
01/80:          CF_LBA3	= CF+0X06	; CF LBA BITS 24-27
01/80:          CF_STAT	= CF+0X07	; CF STATUS
01/80:          CF_CMD	= CF+0X07	; CF COMMAND
01/80:          
01/80:          CF_READ	= 0X20		; READ COMMAND
01/80:          
01/80:          BLKTAB	= 2		; START PAGE OF THE BLOCK TABLE
01/80:          ISRBLK	= 6		; START PAGE OF STORED INSTRUCTIONS
01/80:          
01/80:          .TEXT
01/80:          
01/80:          	; LOAD ADDRESS OF FILE RECORDS
01/80: 3011     	LOADI	A,17
01/82:          	
01/81:          	; BEGIN FILE SEARCH
01/81:          	; EXECUTE READ OPERATION
01/81: 3400     0:	LOADI	B,0
01/82: 3884     	LOADI	C,@+2
01/83: FF6C     	JUMP	CFREAD
01/85:          	
01/84:          	; MATCH THE FIRST 10 WORDS
01/84: 3800     1:	LOADI	C,FNAME
01/85: 3C00     	LOADI	D,0
01/87:          	
01/86:          	; MATCH CHARACTER
01/86: 80A0     2:	LOAD	A,[CF_DATA]
01/87: 9600     	LOADF	B,[C]
01/88: D100     	CMP	A,B
01/89: F601     	BRZ	3F
01/8B:          	
01/8A:          	; DOESN'T MATCH, SET A FLAG
01/8A: 3C01     	LOADI	D,1
01/8C:          	
01/8B:          	; NEXT CHARACTER
01/8B: 7809     3:	SUBI	C,FNAME+9
01/8C: F602     	BRZ	4F
01/8D: 580A     	ADDI	C,FNAME+10
01/8E: FFF7     	JUMP	2B
01/90:          
01/8F:          	; MATCH COMPLETE
01/8F:          	; DID WE WIN?
01/8F: 5C00     4:	ADDI	D,0
01/90: F60A     	BRZ	9F
01/92:          	
01/91:          	; NO WE DID NOT, NEXT ENTRY
01/91: 3406     	LOADI	B,6
01/92: 80A0     5:	LOAD	A,[CF_DATA]
01/93: 7401     	SUBI	B,1
01/94: F7FD     	BRNZ	5B
01/96:          	
01/95:          	; CHECK NEXT ENTRY STATUS
01/95: 5000     	ADDI	A,0
01/97:          	
01/96:          	; IT'S 0X00: DO THE NEXT ENTRY IN THE BLOCK
01/96: F6ED     	BRZ	1B
01/98:          	
01/97:          	; IT'S 0XFF: WE ARE OUT OF ENTRIES
01/97: F4E7     	BRN	HALT
01/99:          	
01/98:          	; IT'S 0X01, THE RECORD IS ON THE NEXT BLOCK
01/98: 80A3     	LOAD	A,[CF_LBA0]
01/99: 5001     	ADDI	A,1
01/9A: FFE6     	JUMP	0B
01/9C:          
01/9B:          	; WE HAVE FOUND THE FILE, EXTRACT RELEVANT DATA
01/9B:          	; START WITH READING THE FILE SIZE
01/9B: 80A0     9:	LOAD	A,[CF_DATA]
01/9C: 5000     	ADDI	A,0
01/9D: F702     	BRNZ	0F
01/9F:          	
01/9E:          	; FILE IS FULL
01/9E: 84A0     	LOAD	B,[CF_DATA]
01/9F: FF03     	JUMP	1F
01/A1:          	
01/A0:          	; READ LSB OF SIZE
01/A0: 80A0     0:	LOAD	A,[CF_DATA]
01/A2:          	
01/A1:          	; CHECK IF FILE IS EMPTY
01/A1: 5000     	ADDI	A,0
01/A2: F6DC     	BRZ	HALT
01/A4:          	
01/A3:          	; SAVE SIZE
01/A3: A00A     1:	STORE	[SIZE],A
01/A5:          
01/A4:          	; GET THE BLOCK TABLE ADDRESS
01/A4: 80A0     	LOAD	A,[CF_DATA]	; THIS ONE DOES THE UNUSED BYTE
01/A5: 84A0     	LOAD	B,[CF_DATA]
01/A6: 80A0     	LOAD	A,[CF_DATA]
01/A8:          	
01/A7:          	; READ OUT THE REST OF THE BLOCK
01/A7:          	; 0X01 INDICATES THE END OF THE BLOCK
01/A7: 88A0     2:	LOAD	C,[CF_DATA]
01/A8: 5800     	ADDI	C,0
01/A9: F705     	BRNZ	4F
01/AB:          	
01/AA:          	; READ 15 BYTES AND DISCARD
01/AA: 3C0F     	LOADI	D,15
01/AB: 88A0     3:	LOAD	C,[CF_DATA]
01/AC: 7C01     	SUBI	D,1
01/AD: F7FD     	BRNZ	3B
01/AE: FFF8     	JUMP	2B
01/B0:          	
01/AF:          	; WE ARE FINALLY DONE, LETS OPEN UP THE BLOCK TABLE
01/AF: 38B1     4:	LOADI	C,@+2
01/B0: FF3F     	JUMP	CFREAD
01/B2:          	
01/B1:          	; LETS STORE THIS IN DATA BANKS BLKTAB - BLKTAB+3
01/B1: 3802     	LOADI	C,BLKTAB
01/B2: 3C04     	LOADI	D,4
01/B4:          	
01/B3:          	; COPY TIME :)
01/B3: A880     0:	STORE	[DBANK],C
01/B4: 3400     	LOADI	B,0
01/B5: 80A0     1:	LOAD	A,[CF_DATA]
01/B6: B100     	STOREF	[B],A
01/B7: 5401     	ADDI	B,1
01/B8: F5FC     	BRNN	1B
01/B9: 5801     	ADDI	C,1
01/BA: 7C01     	SUBI	D,1
01/BB: F7F7     	BRNZ	0B
01/BD:          	
01/BC:          	; SET CURRENT BANK AND RECORD
01/BC: 840B     	LOAD	B,[CBANK]
01/BD: 880C     	LOAD	C,[CRECORD]
01/BF:          	
01/BE:          	; MAIN LOOP TO LOAD THE .SAV FILE
01/BE: A480     0:	STORE	[DBANK],B
01/BF: A40B     	STORE	[CBANK],B
01/C0: A80C     	STORE	[CRECORD],C
01/C2:          
01/C1:          	; GET RECORD TO LOAD
01/C1: 9201     	LOADF	A,[C+1]
01/C2: 9600     	LOADF	B,[C]
01/C4:          	
01/C3:          	; AND READ THE BLOCK
01/C3: 38C5     	LOADI	C,@+2
01/C4: FF2B     	JUMP	CFREAD
01/C6:          	
01/C5:          	; GET THE DESTINATION BANK
01/C5: 80A0     	LOAD	A,[CF_DATA]
01/C6: 80A0     	LOAD	A,[CF_DATA]
01/C7: 80A0     	LOAD	A,[CF_DATA]
01/C8: A080     	STORE	[DBANK],A
01/CA:          	
01/C9:          	; SKIP 125 BYTES
01/C9: 347D     	LOADI	B,125
01/CA: 8CA0     1:	LOAD	D,[CF_DATA]
01/CB: 7401     	SUBI	B,1
01/CC: F7FD     	BRNZ	1B
01/CE:          	
01/CD:          	; LOAD 128 BYTES INTO THE DATA BANK
01/CD: 8CA0     2:	LOAD	D,[CF_DATA]
01/CE: BD00     	STOREF	[B],D
01/CF: 5401     	ADDI	B,1
01/D0: F5FC     	BRNN	2B
01/D2:          	
01/D1:          	; LOAD FIRST 128 BYTES OF INSTRUCTIONS
01/D1: 3806     	LOADI	C,ISRBLK
01/D2: A880     	STORE	[DBANK],C
01/D3: 8CA0     3:	LOAD	D,[CF_DATA]
01/D4: BD80     	STOREF	[B+0X80],D
01/D5: 5401     	ADDI	B,1
01/D6: F4FC     	BRN	3B
01/D8:          	
01/D7:          	; LOAD SECOND 128 BYTES OF INSTRUCTIONS
01/D7: 3807     	LOADI	C,ISRBLK+1
01/D8: A880     	STORE	[DBANK],C
01/D9: 8CA0     4:	LOAD	D,[CF_DATA]
01/DA: BD00     	STOREF	[B],D
01/DB: 5401     	ADDI	B,1
01/DC: F5FC     	BRNN	4B
01/DE:          	
01/DD:          	; CALL THE 'PRGM' BIOS CALL
01/DD:          	; A = DESTINATION ISR PAGE
01/DD:          	; B = SOURCE DATA PAGE
01/DD:          	; C = RETURN ADDRESS
01/DD:          	; D = RETURN ISR PAGE
01/DD: 3406     	LOADI	B,ISRBLK
01/DE: 3C01     	LOADI	D,1
01/DF: 38E1     	LOADI	C,@+2
01/E0: FF21     	JUMP	PRGM
01/E2:          	
01/E1:          	; MOVE ON TO NEXT BLOCK OR RECORD
01/E1:          	; CHECK IF WE ARE DONE
01/E1: 3001     	LOADI	A,1
01/E2: A080     	STORE	[DBANK],A
01/E3: 800A     	LOAD	A,[SIZE]
01/E4: 7001     	SUBI	A,1
01/E5: 3400     	LOADI	B,0
01/E6: 3881     	LOADI	C,0X81
01/E7: F619     	BRZ	INDIR
01/E8: A00A     	STORE	[SIZE],A
01/EA:          	
01/E9:          	; UPDATE POINTERS AND RETURN
01/E9: 840B     	LOAD	B,[CBANK]
01/EA: 880C     	LOAD	C,[CRECORD]
01/EB: 5802     	ADDI	C,2
01/EC: F5D1     	BRNN	0B
01/ED: 3800     	LOADI	C,0
01/EE: 5401     	ADDI	B,1
01/EF: FFCE     	JUMP	0B
01/F1:          	
01/F0:          
01/F0:          	; READS FROM THE CF CARD
01/F0:          	; A READ COMMAND IS EXECUTED AND
01/F0:          	; A WAIT IS PERFORMED UNTIL THE
01/F0:          	; COMMAND COMPLETES
01/F0:          	; A = LSB BLOCK ADDRESS
01/F0:          	; B = MSB BLOCK ADDRESS
01/F0:          	; USES: A, C, D
01/F0: A0A3     CFREAD:	STORE	[CF_LBA0],A
01/F1: A4A4     	STORE	[CF_LBA1],B
01/F2: 3001     	LOADI	A,1
01/F3: A0A2     	STORE	[CF_CNT],A
01/F5:          
01/F4:          	; LETS WAIT FOR A POTENTIAL PREVIOUS COMMAND TO COMPLETE
01/F4: 2E00     	MOV	D,C
01/F5: 38F7     	LOADI	C,@+2
01/F6: FF03     	JUMP	CFWAIT
01/F8:          
01/F7:          	; ACTUALLY EXECUTE THE READ COMMAND NOW
01/F7: 3020     	LOADI	A,CF_READ
01/F8: A0A7     	STORE	[CF_CMD],A
01/FA:          	
01/F9:          	; WAIT FOR IT TO COMPLETE
01/F9: 2B00     	MOV	C,D
01/FB:          
01/FA:          	; WAIT FOR THE CF CARD TO BECOME READY
01/FA:          	; FOR THIS TO HAPPEN, THE BUSY FLAG MUST BE 0
01/FA:          	; AND THE READY FLAG MUST BE 1
01/FA:          	; IF A CF CARD ISN'T PRESENT, THIS ROUTINE HANGS
01/FA:          	; BUT WE DON'T CARE
01/FA:          	; USES: B
01/FA: 80A7     CFWAIT:	LOAD	A,[CF_STAT]
01/FC:          
01/FB:          	; CHECK BIT 7 (BUSY FLAG)
01/FB: 4000     	SHIFTL	A
01/FD:          	
01/FC:          	; GO BACK TO START BUSY
01/FC: F0FD     	BRC	CFWAIT
01/FE:          	
01/FD:          	; CHECK BIT 6 (READY FLAG)
01/FD: 4000     	SHIFTL	A
01/FF:          	
01/FE:          	; GO BACK TO START IF NOT READY
01/FE: F1FB     	BRNC	CFWAIT
01/100:          	
01/FF:          	; RETURN FROM FUNCTION CALL
01/FF: FE00     	JUMPR	C
01/101:          
01/00:          
01/00:          
01/00:          .DATA
01/00:          
01/00: FF304B45
       524E454C
       5359     .DEFL BYTE FNAME	0XFF,'0',"KERNEL","SY"
01/0A: 00       .DEFL BYTE SIZE		0
01/0B: 02       .DEFL BYTE CBANK	BLKTAB
