00/00:          ; COMMON.S
01/80:          ; SYSTEM COMMON DEFINITIONS
01/80:          
01/80:          ; BIOS CALLS
01/80:          REBOOT	= 0
01/80:          AREBOOT = 1
01/80:          INDIR	= 2
01/80:          IRET	= 3
01/80:          SYSCALL	= 4
01/80:          SYSJUMP	= 5
01/80:          PRGM	= 6
01/80:          IWRITE	= 7
01/80:          ZSTART	= 8
01/80:          
01/80:          ; DEFINES
01/80:          HALT	= 0x7F
01/80:          
01/80:          DBANK	= 0X80		; DATA BANK ADDRESS
01/80:          
01/80:          UART	= 0X90		; UART BASE ADDRESS
01/80:          UART_RH	= UART+0X00	; UART READ HOLDING
01/80:          UART_TH	= UART+0X00	; UART TRANSMIT HOLDING
01/80:          UART_DL = UART+0X00	; UART DIVISOR LOW
01/80:          UART_DH = UART+0X01	; UART DIVISOR HIGH
01/80:          UART_LC = UART+0X03	; UART LINE CONTROL
01/80:          UART_LS	= UART+0X05	; UART LINE STATUS
01/80:          SCRATCH	= UART+0X07	; SCRATCH BYTE ADDRESS
01/80:          
01/80:          CF	= 0XA0		; COMPACT FLASH BASE ADDRESS
01/80:          CF_DATA	= CF+0X00	; CF DATA
01/80:          CF_ERR	= CF+0X01	; CF ERROR
01/80:          CF_FEAT	= CF+0x01	; CF FEATURES
01/80:          CF_CNT	= CF+0X02	; CF SECTOR COUNT
01/80:          CF_LBA0	= CF+0X03	; CF LBA BITS 0-7
01/80:          CF_LBA1	= CF+0X04	; CF LBA BITS 8-15
01/80:          CF_LBA2	= CF+0X05	; CF LBA BITS 16-23
01/80:          CF_LBA3	= CF+0X06	; CF LBA BITS 24-27
01/80:          CF_STAT	= CF+0X07	; CF STATUS
01/80:          CF_CMD	= CF+0X07	; CF COMMAND
01/80:          
01/80:          CF_8BIT	= 0X01		; 8 BIT MODE
01/80:          CF_DCAC	= 0X82		; DISABLE CACHE
01/80:          
01/80:          CF_READ	= 0X20		; READ COMMAND
01/80:          CF_WRIT = 0X30		; WRITE COMMAND
01/80:          CF_SETF	= 0XEF		; SET FEATURE COMMAND
01/80:          
01/80:          ; LOW.S
01/80:          ; LOW MEMORY OF THE DOS/281 SYSTEM
01/80:          ; HANDLES SYSCALLS
01/80:          
01/80:          ; EQUATES
01/80:          KMEM_ST	= 0X78	; KERNEL MEMORY STACK SAVE SLOT
01/80:          ARG_BNK = 0x6C	; ARGUMENT BANK
01/80:          DFT_USR	= 0X6B	; DEFAULT USER AREA
01/80:          
01/80:          .BANK 0
00/80:          .TEXT
00/80:          
00/80:          	; JUMP STUB FOR RECEIVING SYSCALLS
00/80: FF03     	JUMP	SYSPREP
00/82:          
00/81:          
00/81:          	; ENTRY POINT FOR THE KERENL AFTER THE 2ND STAGE BOOT
00/81:          	; JUST JUMP DIRECTLY TO THE 'INIT' ROUTINE IN CORE 
00/81: 34FF     ENTRY:	LOADI	B,CORE0_B
00/82: 3880     	LOADI	C,INIT
00/83: FF7E     	JUMP	INDIR
00/85:          	
00/84:          	; SYSTEM CALL HANDLER PREPARATION
00/84:          	; SAVE THE PREVIOUS STACK, AND SWITCH TO THE KERNEL STACK
00/84:          	; THEN MOVE TO THE SYSTEM CALL HANDLER
00/84: AC78     SYSPREP:STORE	[KMEM_ST],D
00/86:          	
00/85:          	; GET THE ARGUMENT BANK
00/85: 8C6C     	LOAD	D,[ARG_BNK]
00/87:          	
00/86:          	; MOVE TO KERNEL WORK AREA
00/86: 38FF     	LOADI	C,WORK_B
00/87: A880     	STORE	[DBANK],C
00/89:          	
00/88:          	; SET THE SOURCE BANK
00/88: AC05     	STORE	[SRC_BNK],D
00/8A:          	
00/89:          	; SET UP KERNEL STACK
00/89: 3C7E     0:	LOADI	D,0X80-2
00/8B:          	
00/8A:          	; SAVE PLACE RETURN ADDRESS INTO THE STACK
00/8A: 3892     	LOADI	C,SYSDONE
00/8B: BB00     	STOREF	[D],C
00/8C: 3800     	LOADI	C,0
00/8D: BB01     	STOREF	[D+1],C
00/8F:          	
00/8E:          	; STICK THE CURRENT SYSTEM CALL IN M0
00/8E: A400     	STORE	[M0],B
00/90:          	
00/8F:          	; HANDLE THE SYSTEM CALL
00/8F: 34F8     	LOADI	B,SYS0_B
00/90: 3880     	LOADI	C,SYSHNDL
00/91: FF70     	JUMP	INDIR
00/93:          	
00/92:          	
00/92:          	; SYSTEM CALL DONE
00/92: 3800     SYSDONE:LOADI	C,0
00/93: A880     	STORE	[DBANK],C
00/95:          	
00/94:          	; RESTORE USER STACK
00/94: 8C78     	LOAD	D,[KMEM_ST]
00/96:          	
00/95:          	; RETURN
00/95: FF6D     	JUMP	IRET
00/97:          	
00/96:          .DATA
00/96:          
00/00:          	; SET UP ZERO PAGE
00/00:          .ORG	0X6B
00/6B: 30       .DEF BYTE	'0'
00/6C:          
00/6C:          
00/6C:          
00/6C:          	; SET UP UPPER BANK STUFF
00/6C:          	; THE 'B_' SYMBOLS WILL BE USED TO KEEP TRACK OF WHAT BANKS ARE
00/6C:          	; IN USE
00/6C:          	; 'BI" WILL BE USED FOR INSTRUCTION BANKS
00/6C:          	; 'BD' WILL BE USED FOR DATA BANKS
00/6C:          	; AT THE END OF ASSEMBLY, THESE VALUES WILL BE USED TO DETERMINE
00/6C:          	; HOW MUCH FREE MEMORY USER PROGRAMS HAVE
00/6C:          BI	= 255
00/6C:          BD	= 255
00/6C:          
00/6C:          ; CORE.S
00/6C:          ; MAIN 'GUTS' OF DOS/281
00/6C:          
00/6C:          .BANK BI
FF/00:          CORE0_B	= BI
FF/00:          .TEXT
FF/00:          
FF/80:          	; SET UP SYSTEM FOR OPERATION
FF/80:          	; BRING UP THE WORK BANK
FF/80: 30FF     INIT:	LOADI	A,WORK_B
FF/81: A080     	STORE	[DBANK],A
FF/83:          	
FF/82:          	; SET THE STACK POINTER TO THE TOP OF THE STACK
FF/82: 3C7E     	LOADI	D,0X80-2
FF/84:          
FF/83:          	; INITALIZE THE TTY DRIVER
FF/83: 38FF     	LOADI	C,BI
FF/84: BB01     	STOREF	[D+1],C
FF/85: 388A     	LOADI	C,@+5
FF/86: BB00     	STOREF	[D],C
FF/88:          	
FF/87: 34FD     	LOADI	B,TTY0_B
FF/88: 3880     	LOADI	C,TTYINIT
FF/89: FF78     	JUMP	INDIR
FF/8B:          	
FF/8A:          	; SEND OUT THE 'HELLO' SPLASH
FF/8A: 38FF     	LOADI	C,WORK_B
FF/8B: A805     	STORE	[SRC_BNK],C
FF/8C: 3060     	LOADI	A,S_HELLO
FF/8E:          	
FF/8D: 3892     	LOADI	C,@+5
FF/8E: BB00     	STOREF	[D],C
FF/90:          	
FF/8F: 34FD     	LOADI	B,TTY0_B
FF/90: 3890     	LOADI	C,TTYPUTS
FF/91: FF70     	JUMP	INDIR
FF/93:          	
FF/92:          	; INITALIZE THE BLOCK DRIVER
FF/92: 3897     	LOADI	C,@+5
FF/93: BB00     	STOREF	[D],C
FF/95:          	
FF/94: 34FC     	LOADI	B,BLK0_B
FF/95: 3880     	LOADI	C,BLKINIT
FF/96: FF6B     	JUMP	INDIR
FF/98:          	
FF/97:          	; INDEX ALLOCATION BITMAP
FF/97: 3000     	LOADI	A,0X00
FF/98: 389D     	LOADI	C,@+5
FF/99: BB00     	STOREF	[D],C
FF/9B:          	
FF/9A: 34F5     	LOADI	B,AL0_B
FF/9B: 38B5     	LOADI	C,INDEX
FF/9C: FF65     	JUMP	INDIR
FF/9E:          	
FF/9D:          	; DOT PROMPT
FF/9D: 301D     PROMPT: LOADI	A,ST_PRMT
FF/9E: 38FF     CPRMPT:	LOADI	C,WORK_B	; USED FOR CUSTOM PROMPTS
FF/9F: A805     	STORE	[SRC_BNK],C
FF/A1:          
FF/A0: 38FF     	LOADI	C,BI
FF/A1: BB01     	STOREF	[D+1],C
FF/A2: 38A7     	LOADI	C,@+5
FF/A3: BB00     	STOREF	[D],C
FF/A5:          	
FF/A4: 34FD     	LOADI	B,TTY0_B
FF/A5: 3890     	LOADI	C,TTYPUTS
FF/A6: FF5B     	JUMP	INDIR
FF/A8:          	
FF/A7:          	; GET AN INPUT FROM THE TERMINAL
FF/A7: 38FE     	LOADI	C,CMDL_B
FF/A8: A805     	STORE	[SRC_BNK],C
FF/AA:          	
FF/A9: 38AE     	LOADI	C,@+5
FF/AA: BB00     	STOREF	[D],C
FF/AC:          	
FF/AB: 34FD     	LOADI	B,TTY0_B
FF/AC: 38A2     	LOADI	C,TTYINPT
FF/AD: FF54     	JUMP	INDIR
FF/AF:          	
FF/AE:          	; DO CR / LF
FF/AE: 300D     	LOADI	A,0X0D
FF/AF: 38B4     	LOADI	C,@+5
FF/B0: BB00     	STOREF	[D],C
FF/B2:          	
FF/B1: 34FD     	LOADI	B,TTY0_B
FF/B2: 3889     	LOADI	C,TTYPUTC
FF/B3: FF4E     	JUMP	INDIR
FF/B5:          	
FF/B4: 300A     	LOADI	A,0X0A
FF/B5: 38BA     	LOADI	C,@+5
FF/B6: BB00     	STOREF	[D],C
FF/B8:          	
FF/B7: 34FD     	LOADI	B,TTY0_B
FF/B8: 3889     	LOADI	C,TTYPUTC
FF/B9: FF48     	JUMP	INDIR
FF/BB:          	
FF/BA:          	; NOW, EXECUTE THE COMMAND
FF/BA: 34FE     	LOADI	B,CORE1_B
FF/BB: 3880     	LOADI	C,EXEC
FF/BC: FF45     	JUMP	INDIR
FF/BE:          
FF/BD:          	; BANK IS DONE, MOVE ON TO THE NEXT
FF/BD:          BI	= BI-1
FF/BD:          .BANK BI
FE/80:          CORE1_B	= BI
FE/80:          .TEXT
FE/80:          
FE/80:          	; ATTEMPT TO EXECUTE WHATEVER HAS BEEN PLACE IN THE CMD
FE/80:          	; BUFFER
FE/80:          	; START BY CLOSING THE FILE
FE/80: 38FE     EXEC:	LOADI	C,BI
FE/81: BB01     	STOREF	[D+1],C
FE/82: 3887     	LOADI	C,@+5
FE/83: BB00     	STOREF	[D],C
FE/85:          	
FE/84: 34FB     	LOADI	B,FS0_B
FE/85: 38E6     	LOADI	C,FCLOSE
FE/86: FF7B     	JUMP	INDIR	
FE/88:          	
FE/87:          	; SET WORKING USER AREA TO '0'
FE/87:          	; TODO: CHANGE THIS TO DEFAULT AREA
FE/87: 3030     	LOADI	A,'0'
FE/88: A009     	STORE	[WRK_USR],A
FE/8A:          
FE/89:          	; ATTEMPT TO SET PARAMETERS FOR SEARCH
FE/89: 3000     	LOADI	A,0
FE/8A: 388F     	LOADI	C,@+5
FE/8B: BB00     	STOREF	[D],C
FE/8D:          	
FE/8C: 34FB     	LOADI	B,FS0_B
FE/8D: 3880     	LOADI	C,SSPARAM
FE/8E: FF73     	JUMP	INDIR
FE/90:          	
FE/8F:          	; CHECK TO MAKE SURE IT RETURNS 0XFE
FE/8F: 70FE     	SUBI	A,0XFE
FE/90: F750     	BRNZ	EXECERR
FE/92:          	
FE/91:          	; MANUALLY SET THE EXTENSION AS 'SV'
FE/91: 3053     	LOADI	A,'S'
FE/92: A010     	STORE	[PATTERN+6],A
FE/93: 3056     	LOADI	A,'V'
FE/94: A011     	STORE	[PATTERN+7],A
FE/96:          	
FE/95:          	; AND SEARCH FOR IT
FE/95: 3000     	LOADI	A,0
FE/96: 389B     	LOADI	C,@+5
FE/97: BB00     	STOREF	[D],C
FE/99:          	
FE/98: 34FB     	LOADI	B,FS0_B
FE/99: 38D9     	LOADI	C,FSEARCH
FE/9A: FF67     	JUMP	INDIR
FE/9C:          	
FE/9B:          	; DID IT WORK?
FE/9B: 5000     	ADDI	A,0
FE/9C: F744     	BRNZ	EXECERR
FE/9E:          	
FE/9D:          	; NOW OPEN IT
FE/9D: 38A2     	LOADI	C,@+5
FE/9E: BB00     	STOREF	[D],C
FE/A0:          	
FE/9F: 34FB     	LOADI	B,FS0_B
FE/A0: 38E3     	LOADI	C,FOPEN
FE/A1: FF60     	JUMP	INDIR
FE/A3:          	
FE/A2:          	; RESET LOAD STATE
FE/A2: 30F2     	LOADI	A,KBUF_B
FE/A3: A005     	STORE	[SRC_BNK],A
FE/A4: 3000     	LOADI	A,0
FE/A6:          	
FE/A5:          	; READ IN THE SAV RECORD
FE/A5: A004     0:	STORE	[L0],A
FE/A6: 38AB     	LOADI	C,@+5
FE/A7: BB00     	STOREF	[D],C
FE/A9:          	
FE/A8: 34FB     	LOADI	B,FS0_B
FE/A9: 38E9     	LOADI	C,FREAD
FE/AA: FF57     	JUMP	INDIR
FE/AC:          	
FE/AB:          	; SAVE THE STACK
FE/AB: AC00     	STORE	[M0],D
FE/AD:          	
FE/AC:          	; MAKE SURE THE READ WORKED
FE/AC: 5000     	ADDI	A,0
FE/AD: F733     	BRNZ	EXECERR
FE/AF:          	
FE/AE:          	; CHECK THAT THE RECORD IS VALID
FE/AE: 30F2     	LOADI	A,KBUF_B
FE/AF: A080     	STORE	[DBANK],A
FE/B1:          	
FE/B0:          	; LOOK FOR THE 0X0281 AT THE BEGINNING OF THE RECORD
FE/B0: 8000     	LOAD	A,[0X00]
FE/B1: 7002     	SUBI	A,0X02
FE/B2: F72E     	BRNZ	EXECERR
FE/B3: 8001     	LOAD	A,[0X01]
FE/B4: 7081     	SUBI	A,0X81
FE/B5: F72B     	BRNZ	EXECERR
FE/B7:          	
FE/B6:          	; GRAB THE DESTINATION SECTOR
FE/B6: 8002     	LOAD	A,[0X02]
FE/B8:          	
FE/B7:          	; NO BANK 0!
FE/B7: 5000     	ADDI	A,0
FE/B8: F628     	BRZ	EXECERR
FE/BA:          	
FE/B9:          	; MAKE SURE IT ISN'T TOO BIG TOO
FE/B9: 34EF     	LOADI	B,MAX_IB
FE/BA: D100     	CMP	A,B
FE/BB: F025     	BRAE	EXECERR
FE/BC: 34F1     	LOADI	B,MAX_DB
FE/BD: D100     	CMP	A,B
FE/BE: F022     	BRAE	EXECERR
FE/C0:          	
FE/BF:          	; AND LOAD UP THE DATA BLOCK
FE/BF: 3800     	LOADI	C,0
FE/C0: 34F3     1:	LOADI	B,KBUF_B+1
FE/C1: A480     	STORE	[DBANK],B
FE/C2: 9600     	LOADF	B,[C]
FE/C3: A080     	STORE	[DBANK],A
FE/C4: B600     	STOREF	[C],B
FE/C5: 5801     	ADDI	C,1
FE/C6: F5F9     	BRNN	1B
FE/C8:          	
FE/C7:          	; FINALLY, LOAD UP THE ISR BLOCK
FE/C7: 34F4     	LOADI	B,KBUF_B+2
FE/C8: 3CFE     	LOADI	D,BI
FE/C9: 38CB     	LOADI	C,@+2
FE/CA: FF3B     	JUMP	PRGM
FE/CC:          	
FE/CB:          	; RESTORE THE STACK AND WORK AREA
FE/CB: 30FF     	LOADI	A,WORK_B
FE/CC: A080     	STORE	[DBANK],A
FE/CD: 8C00     	LOAD	D,[M0]
FE/CF:          	
FE/CE:          	; EITHER MOVE ON TO THE NEXT BLOCK OR EXIT
FE/CE: 8004     	LOAD	A,[L0]
FE/CF: 841A     	LOAD	B,[OF_SIZE+1]
FE/D0: 5001     	ADDI	A,1
FE/D1: D100     	CMP	A,B
FE/D2: F7D2     	BRNZ	0B
FE/D4:          	
FE/D3:          	; SET SYSTEM VARIABLES
FE/D3: 3400     	LOADI	B,0
FE/D4: A480     	STORE	[DBANK],B
FE/D5: 34EF     	LOADI	B,MAX_IB
FE/D6: A470     	STORE	[0X70],B
FE/D7: 34F1     	LOADI	B,MAX_DB
FE/D8: A471     	STORE	[0X71],B
FE/D9: 34FE     	LOADI	B,CMDL_B
FE/DA: A472     	STORE	[0X72],B
FE/DB: 3400     	LOADI	B,0
FE/DC: A473     	STORE	[0X73],B
FE/DE:          	
FE/DD:          	; RUN THE PROGRAM
FE/DD: 3401     	LOADI	B,1
FE/DE: A480     	STORE	[DBANK],B
FE/DF: 3880     	LOADI	C,0X80
FE/E0: FF21     	JUMP	INDIR
FE/E2:          	
FE/E1:          
FE/E1:          
FE/E1:          	; HANDLE ERROR IN EXEC
FE/E1: 30FF     EXECERR:LOADI	A,WORK_B
FE/E2: A080     	STORE	[DBANK],A
FE/E3: 301C     	LOADI	A,ST_ERR
FE/E4: 34FF     	LOADI	B,CORE0_B
FE/E5: 389E     	LOADI	C,CPRMPT
FE/E6: FF1B     	JUMP	INDIR
FE/E8:          
FE/E7:          	; BANK IS DONE, MOVE ON TO THE NEXT
FE/E7:          BI	= BI-1
FE/E7:          
FE/E7:          	; ALLOCATE A BANK FOR THE KERNEL WORK AREA
FE/E7:          	; 0X60-7F = KERNEL STACK SPACE
FE/E7:          .BANK	BD
FF/BD:          WORK_B	= BD
FF/BD:          .DATA
FF/BD:          
FF/00:          	; MISC VALUES
FF/00:          	; USED AS TEMP REGISTERS FOR ALL SORTS OF STUFF
FF/00: 00       .DEFL BYTE M0		0
FF/01: 00       .DEFL BYTE M1		0
FF/02: 00       .DEFL BYTE M2		0
FF/03:          
FF/03:          	; DEVICE SPECIFIC MISC VALUES
FF/03:          	; SAFE TO USE IN DEVICE DRIVERS
FF/03: 00       .DEFL BYTE D0		0
FF/04:          
FF/04:          	; STATE INFORMATION FOR LOADING A BINARY INTO MEMORY
FF/04: 00       .DEFL BYTE L0		0
FF/05:          
FF/05:          	; SOURCE BANK OF WHATEVER OPERATION IS BEING DONE
FF/05:          	; MAINLY USED TO KEEP TRACK OF THE BANK ADDRESS
FF/05:          	; OF STUFF BEING WORKED ON IN USER SPACE
FF/05: 00       .DEFL BYTE SRC_BNK	0
FF/06:          
FF/06:          	; ADDRESSES FOR THE BLOCK DEVICE DRIVER
FF/06:          	; USED DURING A 'READ' OR 'WRITE' CALL
FF/06: 0000     .DEFL BYTE BLK		0,0
FF/08:          
FF/08:          	; PATTERN FOR SEARCHING FOR FILES
FF/08:          	; AND WORKING USER AREA
FF/08: FF       .DEFL BYTE MATCH	0XFF	; THIS IS ALWAYS 0XFF
FF/09: 30       .DEFL BYTE WRK_USR	'0'
FF/0A: 2D2D2D2D
       2D2D2D2D .DEFL BYTE PATTERN	"--------"
FF/12:          
FF/12:          	; STATE INFORMATION FOR SEARCHING 
FF/12: 00       .DEFL BYTE SRCH_LO	0	; LOW BLOCK
FF/13: 00       .DEFL BYTE SRCH_BK	0	; CURRENT BANK
FF/14: 00       .DEFL BYTE SRCH_RP	0	; RECORD POINTER
FF/15: 00       .DEFL BYTE SRCH_LS	0	; LAST ENDING
FF/16:          
FF/16:          	; STATE INFORMATION FOR OPEN FILES
FF/16: 00       .DEFL BYTE OF_OPEN	0	; OF_OPEN = 1 IF THERE IS A FILE OPEN
FF/17: 0000     .DEFL BYTE OF_BTAB	0,0	; BLOCK TABLE ADDRESS
FF/19: 0000     .DEFL BYTE OF_SIZE	0,0	; OPEN FILE SIZE
FF/1B: 00       .DEFL BYTE OF_DRTY	0	; OPEN FILE IS DIRTY
FF/1C:          
FF/1C:          	; ERROR
FF/1C: 3F       .DEFL BYTE ST_ERR	"?"
FF/1D:          
FF/1D:          	; COMMAND LINE PROMPT
FF/1D: 0A0D2E00 .DEFL BYTE ST_PRMT	0X0A,0X0D,'.',0
FF/21:          
FF/21:          	; STATE INFORMATION FOR ALLOCATION BITMAP
FF/21: 00       .DEFL BYTE AB_CBLK	0	; CURRENT BLOCK IN THE ALLOCATION TABLE
FF/22: 00       .DEFL BYTE AB_DRTY	0	; IS ALLOCATION BLOCK DIRTY?
FF/23: 00       .DEFL BYTE AB_BANK	0	; CURRENT BANK
FF/24: 00       .DEFL BYTE AB_CPNT	0	; CHUNK POINTER
FF/25: 00       .DEFL BYTE AB_BIT	0	; CHUNK BIT
FF/26: 0000     .DEFL BYTE AB_FREE	0,0	; BLOCK TO FREE
FF/28:          
FF/28:          
FF/28:          	; EMPTY PATTERN USED TO FIND UNUSED FILE RECORDS
FF/28: 003F3F3F
       3F3F3F3F
       3F3F     .DEFL BYTE EMPTYP	0X00,'?',"????????"
FF/32:          
FF/32:          	; PLACE 'HELLO' AT BOTTOM  OF STACK
FF/32:          	; WE DON'T CARE IF IT GETS OVERWRITTEN LATER
FF/32:          .ORG 0X60
FF/60: 444F532F
       32383120
       56312E31
       0A0D00   .DEFL BYTE S_HELLO	"DOS/281 V1.1",0X0A,0X0D,0
FF/6F:          
FF/6F:          
FF/6F:          	; BANK IS DONE, MOVE ON TO THE NEXT
FF/6F:          BD	= BD-1
FF/6F:          
FF/6F:          	; COMMAND LINE BANK
FF/6F:          CMDL_B	= BD
FF/6F:          
FF/6F:          	; BANK IS DONE, MOVE ON TO THE NEXT
FF/6F:          BD	= BD-4
FF/6F:          	
FF/6F:          	; ALLOCATION BITMAP BUFFER
FF/6F:          ABM_B	= BD
FF/6F:          
FF/6F:          	; BANK IS DONE, MOVE ON TO THE NEXT
FF/6F:          BD	= BD-4
FF/6F:          
FF/6F:          	; FILE BLOCK TABLE
FF/6F:          FBT_B	= BD
FF/6F:          
FF/6F:          	; BANK IS DONE, MOVE ON TO THE NEXT
FF/6F:          BD	= BD-4
FF/6F:          
FF/6F:          	; KERNEL BUFFER
FF/6F:          KBUF_B	= BD
FF/6F:          
FF/6F:          	; BANK IS DONE, MOVE ON TO THE NEXT
FF/6F:          BD	= BD-1
FF/6F:          ; TTY.S
FF/6F:          ; SERIAL CONSOLE DRIVER
FF/6F:          
FF/6F:          .BANK BI
FD/00:          TTY0_B	= BI
FD/00:          .TEXT
FD/00:          
FD/80:          	; SERIAL INIT
FD/80:          	; SET UP THE 16C550 UART
FD/80:          	; ASSUMES WORK BANK IS SELECTED
FD/80:          	; USES: A, B, C
FD/80: 3080     TTYINIT:LOADI	A,0X80
FD/81: A093     	STORE	[UART_LC],A
FD/83:          	
FD/82:          	; DIVISOR = 12
FD/82:          	; FOR 9600B @ 1.843, 19200B @ 3.604
FD/82: 300C     	LOADI	A,12
FD/83: A090     	STORE	[UART_DL],A
FD/84: 3000     	LOADI	A,0
FD/85: A091     	STORE	[UART_DH],A
FD/87:          	
FD/86:          	; SET 8-BIT, 1 STOP, RESET DLAB
FD/86: 3003     	LOADI	A,0X03
FD/87: A093     	STORE	[UART_LC],A
FD/89:          
FD/88: FF51     	JUMP	TTYDONE
FD/8A:          
FD/89:          	; PUTS A CHARACTER ONTO THE TERMINAL
FD/89:          	; ASSUMES WORK BANK IS SELECTED
FD/89:          	; A = CHARACTER TO PRINT
FD/89:          	; USES: B
FD/89: 8495     TTYPUTC:LOAD	B,[UART_LS]
FD/8B:          
FD/8A:          	; READ 5TH BIT TO SEE IF WE CAN TRANSMIT YET
FD/8A: 4500     	SHIFTL	B
FD/8B: 4500     	SHIFTL	B
FD/8C: 4500     	SHIFTL	B
FD/8D: F1FB     	BRNC	TTYPUTC
FD/8F:          	
FD/8E:          	; TRANSMITE BYTE
FD/8E: A090     	STORE	[UART_TH],A
FD/8F: FF4A     	JUMP	TTYDONE
FD/91:          
FD/90:          	; PUTS A STRING FROM USER SPACE ONTO THE TERMINAL
FD/90:          	; ASSUMES WORK BANK IS SELECTED
FD/90:          	; A = ADDRESS OF STRING
FD/90:          	; [SRC_BNK] = DATA BANK OF STRING
FD/90:          	; USES: A, B, C
FD/90: 8405     TTYPUTS:LOAD	B,[SRC_BNK]
FD/91: A480     	STORE	[DBANK],B
FD/93:          
FD/92:          	; READ BYTE FROM STRING
FD/92: 9800     0:	LOADF	C,[A]
FD/93: 5800     	ADDI	C,0
FD/94: F645     	BRZ	TTYDONE
FD/96:          	
FD/95:          	; GET THE LINE STATUS REGISTER
FD/95: 8495     1:	LOAD	B,[UART_LS]
FD/97:          
FD/96:          	; READ 5TH BIT TO SEE IF WE CAN TRANSMIT YET
FD/96: 4500     	SHIFTL	B
FD/97: 4500     	SHIFTL	B
FD/98: 4500     	SHIFTL	B
FD/99: F1FB     	BRNC	1B
FD/9B:          	
FD/9A:          	; TRANSMIT BYTE
FD/9A: A890     	STORE	[UART_TH],C
FD/9C:          	
FD/9B:          	; INCREMENT POINTER
FD/9B: 5001     	ADDI	A,1
FD/9D:          	
FD/9C:          	; RETURN TO PRINT LOOP
FD/9C: FFF5     	JUMP	0B
FD/9E:          	
FD/9D:          	; WAIT FOR A CHARACTER TO BE TYPED AND THEN RETURNS IT
FD/9D:          	; CHARACTER WILL NOT BE ECHOED
FD/9D:          	; IF TTYSTAT RETURN 0XFF, THE RETURN WILL BE INSTANT
FD/9D:          	; ASSUMES WORK BANK IS SELECTED
FD/9D:          	; CHARACTER RETURNED IN A
FD/9D:          	; USES: A, B
FD/9D: 8495     TTYGETC:LOAD	B,[UART_LS]
FD/9F:          
FD/9E:          	; READ 1ST BIT
FD/9E: C500     	SHIFTR	B
FD/9F: F1FD     	BRNC	TTYGETC
FD/A1:          	
FD/A0:          	; READ BYTE
FD/A0: 8090     	LOAD	A,[UART_RH]
FD/A1: FF38     	JUMP	TTYDONE
FD/A3:          	
FD/A2:          	; INPUTS A LINE OF CHARACTER INTO A DATA BANK
FD/A2:          	; RESULTING STRING WILL START AT ADDRESS ZERO, AND BE ZERO
FD/A2:          	; TERMINATED
FD/A2:          	; ASSUMES WORK BANK IS SELECTED
FD/A2:          	; [SRC_BNK] = DATA BANK OF RESULT
FD/A2:          	; USES: A, B, C
FD/A2: 8405     TTYINPT:LOAD	B,[SRC_BNK]
FD/A3: A480     	STORE	[DBANK],B
FD/A5:          	
FD/A4:          	; SET POINTER FOR STORAGE
FD/A4: 3800     	LOADI	C,0
FD/A6:          
FD/A5:          	; READ CHARACTER FROM CONSOLE
FD/A5:          	; GET THE LINE STATUS REGISTER
FD/A5: 8495     0:	LOAD	B,[UART_LS]
FD/A7:          
FD/A6:          	; CHECK BIT 0 TO SEE IF WE HAVE A CHARACTER 
FD/A6: C500     	SHIFTR	B
FD/A7: F1FD     	BRNC	0B
FD/A9:          	
FD/A8:          	; READ THE CHARACTER INTO A
FD/A8: 8090     	LOAD	A,[UART_RH]
FD/AA:          
FD/A9:          	; SEE IF IT IS A 'CR' CHARACTER
FD/A9: 340D     1:	LOADI	B,0X0D
FD/AA: D100     	CMP	A,B
FD/AB: F626     	BRZ	9F
FD/AD:          	
FD/AC:          	; SEE IF IT IS A 'BS' CHARACTER
FD/AC: 3408     	LOADI	B,0X08
FD/AD: D100     	CMP	A,B
FD/AE: F615     	BRZ	4F
FD/B0:          	
FD/AF:          	; IGNORE ALL OTHER WHITESPACE CHARACTERS
FD/AF: 3420     	LOADI	B,0X20
FD/B0: D100     	CMP	A,B
FD/B1: F1F3     	BRB	0B
FD/B3:          	
FD/B2:          	; CHECK IF IT IS A DELETE CHARACTER
FD/B2: 347F     	LOADI	B,0X7F
FD/B3: D100     	CMP	A,B
FD/B4: F702     	BRNZ	2F
FD/B6:          	
FD/B5:          	; YEP, CONVERT IT IN TO A 'BS' CHARACTER
FD/B5: 3008     	LOADI	A,0X08
FD/B6: FFF2     	JUMP	1B
FD/B8:          	
FD/B7:          	; CHECK TO SEE IF THERE IS SPACE TO PLACE THE CHARACTERS
FD/B7:          	; INTO THE BUFFER
FD/B7: D600     2:	CMP	B,C
FD/B8: F6EC     	BRZ	0B
FD/BA:          
FD/B9:          	; CONVERT TO UPPER CASE
FD/B9: 3461     	LOADI	B,0X61
FD/BA: D100     	CMP	A,B
FD/BB: F104     	BRB	3F
FD/BC: 347A     	LOADI	B,0X7A
FD/BD: D100     	CMP	A,B
FD/BE: F801     	BRA	3F
FD/BF: 7020     	SUBI	A,0X20
FD/C1:          	
FD/C0:          	; PRINT THE CHARACTER
FD/C0: A090     3:	STORE	[UART_TH],A
FD/C2:          	
FD/C1:          	; PLACE IT INTO THE BUFFER
FD/C1: B200     	STOREF	[C],A
FD/C2: 5801     	ADDI	C,1
FD/C3: FFE1     	JUMP	0B
FD/C5:          
FD/C4:          	; HANDLE BACKSPACE
FD/C4:          	; SUBTRACT ONE FROM THE BUFFER
FD/C4: 5800     4:	ADDI	C,0
FD/C5: F6DF     	BRZ	0B
FD/C6: 7801     	SUBI	C,1
FD/C8:          
FD/C7:          	; ECHO THE CHARACTER
FD/C7: A090     	STORE	[UART_TH],A
FD/C9:          
FD/C8:          	; PRINT AN ADDITIONAL SPACE AND THEN BACKSPACE
FD/C8: 8495     5:	LOAD	B,[UART_LS]
FD/C9: C500     	SHIFTR	B
FD/CA: F1FD     	BRNC	5B
FD/CC:          	
FD/CB: 3420     	LOADI	B,0X20
FD/CC: A490     	STORE	[UART_TH],B
FD/CE:          	
FD/CD: 8495     6:	LOAD	B,[UART_LS]
FD/CE: C500     	SHIFTR	B
FD/CF: F1FD     	BRNC	6B
FD/D1:          	
FD/D0: A090     	STORE	[UART_TH],A
FD/D2:          	
FD/D1: FFD3     	JUMP	0B
FD/D3:          	
FD/D2:          	; TERMINATE THE STRING AND EXIT
FD/D2: 3000     9:	LOADI	A,0
FD/D3: B200     	STOREF	[C],A
FD/D4: FF05     	JUMP	TTYDONE
FD/D6:          	
FD/D5:          
FD/D5:          	; POLL THE UART TO SEE IF THERE IS A CHARACTER WAITING
FD/D5:          	; ASSUMES WORK BANK IS SELECTED
FD/D5:          	; RETURNS A=0XFF IF THERE IS A CHARACTER, OTHERWISE A=0X00
FD/D5: 3000     TTYSTAT:LOADI	A,0
FD/D7:          
FD/D6:          	; GET THE LINE STATUS REGISTER
FD/D6: 8495     	LOAD	B,[UART_LS]
FD/D8:          
FD/D7:          	; READ 1ST BIT
FD/D7: C500     	SHIFTR	B
FD/D8: F101     	BRNC	TTYDONE
FD/DA:          	
FD/D9:          	; SET A AND FALL TO TTYDONE
FD/D9: 30FF     	LOADI	A,0XFF
FD/DB:          
FD/DA:          	; INTERNAL TTY FUNCTION TO RESET TO WORK BANK AND RETURN
FD/DA: 38FF     TTYDONE:LOADI	C,WORK_B
FD/DB: A880     	STORE	[DBANK],C
FD/DC: FF26     	JUMP	IRET
FD/DE:          
FD/DD:          	; BANK IS DONE, MOVE ON TO THE NEXT
FD/DD:          BI	= BI-1
FD/DD:          ; BLK.S
FD/DD:          ; BLOCK DEVICE DRIVER
FD/DD:          ; (COMPACT FLASH VERSION)
FD/DD:          
FD/DD:          .BANK BI
FC/80:          BLK0_B	= BI
FC/80:          .TEXT
FC/80:          
FC/80:          	; BLOCK DEVICE INIT
FC/80:          	; SET UP THE COMPACT FLASH CARD
FC/80:          	; ASSUMES WORK BANK IS SELECTED
FC/80:          	; USES: A, B, C
FC/80: 3882     BLKINIT:LOADI	C,@+2
FC/81: FF43     	JUMP	CFWAIT
FC/83:          	
FC/82:          	; SET LBA3 TO 0XE0
FC/82: 30E0     	LOADI	A,0XE0
FC/83: A0A6     	STORE	[CF_LBA3],A
FC/85:          	
FC/84:          	; SET 8 BIT MODE
FC/84: 3001     	LOADI	A,CF_8BIT
FC/85: A0A1     	STORE	[CF_FEAT],A
FC/86: 30EF     	LOADI	A,CF_SETF
FC/87: A0A7     	STORE	[CF_CMD],A
FC/89:          	
FC/88:          	; NOW DISABLE THE CACHE
FC/88: 388A     	LOADI	C,@+2
FC/89: FF3B     	JUMP	CFWAIT
FC/8A: 3082     	LOADI	A,CF_DCAC
FC/8B: A0A1     	STORE	[CF_FEAT],A
FC/8C: 30EF     	LOADI	A,CF_SETF
FC/8D: A0A7     	STORE	[CF_CMD],A
FC/8F:          
FC/8E: FF3C     	JUMP	BLKDONE
FC/90:          
FC/8F:          	; READS A BLOCK (512 BYTES) FROM THE BLOCK DEVICE
FC/8F:          	; CONTENTS WILL BE PLACED IN 4 SEQUENTIAL DATA BANKS
FC/8F:          	; ASSUMES WORK BANK IS SELECTED
FC/8F:          	; A = LOWEST DESTINATION DATA BANK
FC/8F:          	; RETURNS A = 0X00
FC/8F:          	; USES: A, B, C, D0
FC/8F: 3891     BLKREAD:LOADI	C,@+2
FC/90: FF2A     	JUMP	CFADDR
FC/92:          	
FC/91:          	; EXECUTE THE READ COMMAND AND WAIT
FC/91: 3420     	LOADI	B,CF_READ
FC/92: A4A7     	STORE	[CF_CMD],B
FC/93: 3895     	LOADI	C,@+2
FC/94: FF30     	JUMP	CFWAIT
FC/96:          	
FC/95:          	; COPY INTO 4 DATA BANKS
FC/95: 3804     	LOADI	C,4
FC/96: A003     0:	STORE	[D0],A
FC/97: A080     	STORE	[DBANK],A
FC/98: 3000     	LOADI	A,0
FC/9A:          	
FC/99:          	; COPY 128 BYTES
FC/99: 84A0     1:	LOAD	B,[CF_DATA]
FC/9A: B400     	STOREF	[A],B
FC/9B: 5001     	ADDI	A,1
FC/9C: F5FC     	BRNN	1B
FC/9E:          	
FC/9D:          	; NEXT BANK?
FC/9D: 30FF     	LOADI	A,WORK_B
FC/9E: A080     	STORE	[DBANK],A
FC/9F: 8003     	LOAD	A,[D0]
FC/A0: 5001     	ADDI	A,1
FC/A1: 7801     	SUBI	C,1
FC/A2: F7F3     	BRNZ	0B
FC/A4:          	
FC/A3:          	; OPERATION COMPLETE
FC/A3: 3000     	LOADI	A,0
FC/A4: FF26     	JUMP	BLKDONE
FC/A6:          	
FC/A5:          	; WRITES A BLOCK (512 BYTES) TO THE BLOCK DEVICE
FC/A5:          	; CONTENTS WILL BE TAKEN FROM 4 SEQUENTIAL DATA BANKS
FC/A5:          	; ASSUMES WORK BANK IS SELECTED
FC/A5:          	; A = LOWEST SOURCE DATA BANK
FC/A5:          	; RETURNS A = 0X00
FC/A5:          	; USES: A, B, C, D0
FC/A5: 38A7     BLKWRIT:LOADI	C,@+2
FC/A6: FF14     	JUMP	CFADDR
FC/A8:          	
FC/A7:          	; EXECUTE THE WRITE COMMAND AND WAIT
FC/A7: 3430     	LOADI	B,CF_WRIT
FC/A8: A4A7     	STORE	[CF_CMD],B
FC/A9: 38AB     	LOADI	C,@+2
FC/AA: FF1A     	JUMP	CFWAIT
FC/AC:          	
FC/AB:          	; COPY OUT OF 4 DATA BANKS
FC/AB: 3804     	LOADI	C,4
FC/AC: A003     0:	STORE	[D0],A
FC/AD: A080     	STORE	[DBANK],A
FC/AE: 3000     	LOADI	A,0
FC/B0:          	
FC/AF:          	; COPY 128 BYTES
FC/AF: 9400     1:	LOADF	B,[A]
FC/B0: A4A0     	STORE	[CF_DATA],B
FC/B1: 5001     	ADDI	A,1
FC/B2: F5FC     	BRNN	1B
FC/B4:          	
FC/B3:          	; NEXT BANK?
FC/B3: 30FF     	LOADI	A,WORK_B
FC/B4: A080     	STORE	[DBANK],A
FC/B5: 8003     	LOAD	A,[D0]
FC/B6: 5001     	ADDI	A,1
FC/B7: 7801     	SUBI	C,1
FC/B8: F7F3     	BRNZ	0B
FC/BA:          	
FC/B9:          	; OPERATION COMPLETE
FC/B9: 3000     	LOADI	A,0
FC/BA: FF10     	JUMP	BLKDONE
FC/BC:          
FC/BB:          	; SET THE LBA ADDRESS OF THE CF CARD
FC/BB:          	; USING THE BLOCK ADDRESS ON THE WORK BANK
FC/BB:          	; BLOCK COUNT IS ALSO SET
FC/BB:          	; AFTER THAT, A WAIT IS PERFORMED SO A
FC/BB:          	; COMMAND CAN BE EXECUTED AFTER
FC/BB:          	; USES: B
FC/BB: 8407     CFADDR:	LOAD	B,[BLK+1]
FC/BC: A4A3     	STORE	[CF_LBA0],B
FC/BD: 8406     	LOAD	B,[BLK]
FC/BE: A4A4     	STORE	[CF_LBA1],B
FC/BF: 3400     	LOADI	B,0
FC/C0: A4A5     	STORE	[CF_LBA2],B
FC/C1: 34E0     	LOADI	B,0XE0
FC/C2: A4A6     	STORE	[CF_LBA3],B
FC/C3: 3401     	LOADI	B,1
FC/C4: A4A2     	STORE	[CF_CNT],B
FC/C6:          
FC/C5:          	; WAIT FOR THE CF CARD TO BECOME READY
FC/C5:          	; FOR THIS TO HAPPEN, THE BUSY FLAG MUST BE 0
FC/C5:          	; AND THE READY FLAG MUST BE 1
FC/C5:          	; IF A CF CARD ISN'T PRESENT, THIS ROUTINE HANGS
FC/C5:          	; BUT WE DON'T CARE
FC/C5:          	; USES: B
FC/C5: 84A7     CFWAIT:	LOAD	B,[CF_STAT]
FC/C7:          
FC/C6:          	; CHECK BIT 7 (BUSY FLAG)
FC/C6: 4500     	SHIFTL	B
FC/C8:          	
FC/C7:          	; GO BACK TO START BUSY
FC/C7: F0FD     	BRC	CFWAIT
FC/C9:          	
FC/C8:          	; CHECK BIT 6 (READY FLAG)
FC/C8: 4500     	SHIFTL	B
FC/CA:          	
FC/C9:          	; GO BACK TO START IF NOT READY
FC/C9: F1FB     	BRNC	CFWAIT
FC/CB:          	
FC/CA:          	; RETURN FROM FUNCTION CALL
FC/CA: FE35     	JUMPR	C
FC/CC:          
FC/CB:          
FC/CB:          	; INTERNAL BLK FUNCTION TO RESET TO WORK BANK AND RETURN
FC/CB: 38FF     BLKDONE:LOADI	C,WORK_B
FC/CC: A880     	STORE	[DBANK],C
FC/CD: FF35     	JUMP	IRET
FC/CF:          
FC/CE:          	; BANK IS DONE, MOVE ON TO THE NEXT
FC/CE:          BI	= BI-1
FC/CE:          ; FS.S
FC/CE:          ; FILE SYSTEM HANDLING ROUTINES
FC/CE:          
FC/CE:          .BANK BI
FB/80:          FS0_B	= BI
FB/80:          .TEXT
FB/80:          	; SET SEARCH PARAMETERS
FB/80:          	; USING A STRING IN USER SPACE, THE FILE SEARCH PATTERN WILL
FB/80:          	; BE UPDATED
FB/80:          	; THE FILE SEARCH POINTER WILL ALSO BE RESET
FB/80:          	; ASSUMES WORK BANK IS SELECTED
FB/80:          	; A = ADDRESS OF STRING
FB/80:          	; [SRC_BNK] = DATA BANK OF STRING
FB/80:          	; RETURNS A=0X00 IF PATTERN IS VALID, OTHERWISE 0XFF
FB/80:          	; 0XFE CAN BE RETURNED IF THERE NEVER IS A '.' IN THE FILE
FB/80:          	; USES: A, B, C, M0, M1, M2
FB/80: A000     SSPARAM:STORE	[M0],A
FB/82:          
FB/81:          	; STORE PATTERN COUNTER
FB/81: 3006     	LOADI	A,6
FB/82: A001     	STORE	[M1],A
FB/84:          	
FB/83:          	; STORE PATTERN POINTER
FB/83: 300A     	LOADI	A,PATTERN
FB/84: A002     	STORE	[M2],A
FB/86:          	
FB/85:          	; RESET THE PATTERN
FB/85: 300A     	LOADI	A,PATTERN
FB/86: 3408     	LOADI	B,8
FB/87: 3820     	LOADI	C,0X20
FB/88: B800     0:	STOREF	[A],C
FB/89: 5001     	ADDI	A,1
FB/8A: 7401     	SUBI	B,1
FB/8B: F7FC     	BRNZ	0B
FB/8D:          	
FB/8C:          	; DO AN INITAL CHECKOUT OF THE PATTERN
FB/8C: 8005     	LOAD	A,[SRC_BNK]
FB/8D: 8400     	LOAD	B,[M0]
FB/8E: A080     	STORE	[DBANK],A
FB/90:          	
FB/8F:          	; MAKE SURE THERE IS ACTUALLY A PATTERN
FB/8F: 9900     	LOADF	C,[B]
FB/90: 3020     	LOADI	A,0X20
FB/91: D200     	CMP	A,C
FB/92: F042     	BRAE	9F
FB/94:          	
FB/93:          	; SEE IF THERE IS A USER AREA PREFIX
FB/93:          	; AND CHANGE BANK TO KERNEL WORK AREA
FB/93: 9101     	LOADF	A,[B+1]
FB/94: 703A     	SUBI	A,':'
FB/95: 30FF     	LOADI	A,WORK_B
FB/96: A080     	STORE	[DBANK],A
FB/97: F70C     	BRNZ	1F
FB/99:          	
FB/98:          	; MAKE SURE THAT THE USER AREA PREFIX IS VALID
FB/98: 303F     	LOADI	A,'?'
FB/99: D800     	CMP	C,A
FB/9A: F606     	BRZ	0F
FB/9B: 3030     	LOADI	A,'0'
FB/9C: D800     	CMP	C,A
FB/9D: F137     	BRB	9F
FB/9E: 3039     	LOADI	A,'9'
FB/9F: D800     	CMP	C,A
FB/A0: F834     	BRA	9F
FB/A2:          
FB/A1:          	; SET THE WORKING USER AREA
FB/A1: A809     0:	STORE	[WRK_USR],C
FB/A3:          	
FB/A2:          	; AND SKIP THE PREFIX
FB/A2: 5402     	ADDI	B,2
FB/A3: A400     	STORE	[M0],B
FB/A5:          
FB/A4:          	; GRAB THE NEXT CHARACTER
FB/A4:          	; C = NEXT CHARACTER
FB/A4: 8400     1:	LOAD	B,[M0]
FB/A5: 8005     	LOAD	A,[SRC_BNK]
FB/A6: A080     	STORE	[DBANK],A
FB/A7: 9900     	LOADF	C,[B]
FB/A8: 30FF     	LOADI	A,WORK_B
FB/A9: A080     	STORE	[DBANK],A
FB/AB:          	
FB/AA:          	; INCREMENT AND SAVE POINTER INTO M0
FB/AA: 5401     	ADDI	B,1
FB/AB: A400     	STORE	[M0],B
FB/AD:          	
FB/AC:          	; GRAB PATTERN POINTER
FB/AC: 8002     	LOAD	A,[M2]
FB/AE:          	
FB/AD:          	; SEE IF THE PATTERN IS COMPLETE
FB/AD:          	; AND GRAB PATTERN COUNTER
FB/AD: 3420     	LOADI	B,0X20
FB/AE: D600     	CMP	B,C
FB/AF: 8401     	LOAD	B,[M1]
FB/B0: F01A     	BRAE	6F
FB/B2:          	
FB/B1:          	; SEE IF IT IS A '.'
FB/B1: 782E     	SUBI	C,'.'
FB/B2: F611     	BRZ	5F
FB/B4:          	
FB/B3:          	; THERE MUST BE SPACE IN THE PATTERN BUFFER FOR ANY
FB/B3:          	; OF THE NEXT VALUES TO BE VALID
FB/B3:          	; LETS CHECK IT
FB/B3: 7401     	SUBI	B,1
FB/B4: F420     	BRN	9F
FB/B6:          	
FB/B5:          	; SEE IF IT IS A '*'
FB/B5: 78FC     	SUBI	C,'*'-'.'
FB/B6: F606     	BRZ	3F
FB/B8:          	
FB/B7:          	; OTHERWISE, IT'S A NORMAL CHARACTER
FB/B7:          	; PLACE IT IN THE BUFFER AND MOVE ON
FB/B7: 582A     	ADDI	C,'*'
FB/B8: B800     	STOREF	[A],C
FB/B9: 5001     	ADDI	A,1
FB/BA: A002     2:	STORE	[M2],A
FB/BB: A401     	STORE	[M1],B
FB/BC: FFE7     	JUMP	1B
FB/BE:          
FB/BD:          	; HANDLE '*'
FB/BD:          	; FILL REST OF PATTERN SECTION WITH '?'
FB/BD: 5401     3:	ADDI	B,1
FB/BE: 383F     	LOADI	C,'?'
FB/BF: B800     4:	STOREF	[A],C
FB/C0: 5001     	ADDI	A,1
FB/C1: 7401     	SUBI	B,1
FB/C2: F7FC     	BRNZ	4B
FB/C3: FFF6     	JUMP	2B
FB/C5:          	
FB/C4:          	; HANDLE '.'
FB/C4:          	; MAKE SURE THE LAST 2 BYTES OF THE PATTERN BUFFER ARE EMPTY
FB/C4:          	; AND THERE HASN'T BEEN A '.' ALREADY
FB/C4: 3810     5:	LOADI	C,PATTERN+6
FB/C5: 4100     	ADD	A,B
FB/C6: D200     	CMP	A,C
FB/C7: F80D     	BRA	9F
FB/C9:          	
FB/C8:          	; SET THE NEW PATTERN POINTER
FB/C8: 3010     	LOADI	A,PATTERN+6
FB/C9: 3402     	LOADI	B,2
FB/CA: FFEF     	JUMP	2B
FB/CC:          
FB/CB:          	; PATTERN IS COMPLETE
FB/CB:          	; MAKE SURE ALL FIELDS HAVE BEEN FILLED IN
FB/CB: 3810     6:	LOADI	C,PATTERN+6
FB/CC: D200     	CMP	A,C
FB/CD: F902     	BRBE	7F
FB/CE: 3000     	LOADI	A,0
FB/CF: FF1F     	JUMP	FS0DONE
FB/D1:          	
FB/D0:          	; CHECK TO SEE IF A '.' HAS BEEN PLACED
FB/D0: 4100     7:	ADD	A,B
FB/D1: D200     	CMP	A,C
FB/D2: F702     	BRNZ	9F
FB/D3: 30FE     	LOADI	A,0XFE
FB/D4: FF1A     	JUMP	FS0DONE
FB/D6:          	
FB/D5:          	; PATTERN IS INVALID
FB/D5: 30FF     9:	LOADI	A,0XFF
FB/D6: FF18     	JUMP	FS0DONE
FB/D8:          	
FB/D7:          	; SIMILAR TO FSEARCH, BUT LOOKS FOR AN EMPTY FILE
FB/D7: 3428     FEMPTY:	LOADI	B,EMPTYP
FB/D8: FF01     	JUMP	0F
FB/DA:          		
FB/D9:          	; FILE RECORD FORMAT (16 BYTES)
FB/D9:          	; 0:     FILE ALLOCATED TAG
FB/D9:          	;   0X00 = UNALLOCATED
FB/D9:          	;   0XFF = ALLOCATED
FB/D9:          	; 1:     USER AREA
FB/D9:          	;   '0'-'9' FOR USER AREA
FB/D9:          	; 2-7:   FILE NAME
FB/D9:          	;   'A'-'Z','0'-'9','-','_'
FB/D9:          	; 8-9:   FILE EXTENSION
FB/D9:          	;   'A'-'Z','0'-'9','-','_'
FB/D9:          	; 10-11  FILE SIZE IN BLOCKS
FB/D9:          	; 12:    UNUSED
FB/D9:          	; 13-14: FILE BLOCK TABLE ADDRESS
FB/D9:          	;   16 BIT PHYSICAL ADDRESS OF BLOCK TABLE
FB/D9:          	; 15:    NEXT RECORD / END RECORD
FB/D9:          	;   0X00 = HAS NEXT RECORD
FB/D9:          	;   0X01 = NEXT RECORD ON NEXT BLOCK
FB/D9:          	;   0XFF = END OF RECORD 
FB/D9:          	
FB/D9:          	; SEARCHES THE FILE RECORDS UNTIL ONE MATCHING THE CURRENT PATTERN
FB/D9:          	; IS FOUND OR ALL RECORDS ARE EXHAUSTED
FB/D9:          	; ASSUMES WORK BANK IS SELECTED
FB/D9:          	; A = 0 TO RESET THE SEARCH, 1 TO CONTINUE TO NEXT ENTRY
FB/D9:          	; A RETURNS 0X00 IF FOUND, OTHERWISE 0XFF IS RETURNED
FB/D9:          	; USES: A, B, C, M0, M1, M2
FB/D9: 3408     FSEARCH:LOADI	B,MATCH
FB/DA: A402     0:	STORE	[M2],B
FB/DB: 5000     	ADDI	A,0
FB/DC: 34FA     	LOADI	B,FS1_B
FB/DD: 38C7     	LOADI	C,FSNEXT
FB/DE: F723     	BRNZ	INDIR
FB/E0:          	
FB/DF:          	; RESET SEARCH STATE
FB/DF: 3011     	LOADI	A,17
FB/E0: A012     	STORE	[SRCH_LO],A
FB/E2:          	
FB/E1:          	; CHECK THE RECORD
FB/E1: 3880     	LOADI	C,FSSTART
FB/E2: FF1F     	JUMP	INDIR
FB/E4:          	
FB/E3:          	; OPENS THE FILE THAT IS CURRENTLY BEING POINTED
FB/E3:          	; TO BE THE FILE SEARCH STATE
FB/E3:          	; DUE TO THIS, FOPEN MUST BE RUN IMMEDIATELY
FB/E3:          	; AFTER A FILE SEARCH
FB/E3:          	; ASSUMES WORK BANK IS SELECTED
FB/E3:          	; A RETURNS 0X00 IF SUCCESSFUL, OTHERWISE 0XFF IS RETURNED
FB/E3:          	; USES: A, B, C, M0
FB/E3: 34FA     FOPEN:	LOADI	B,FS1_B
FB/E4: 38DA     	LOADI	C,FOPENA
FB/E5: FF1C     	JUMP	INDIR
FB/E7:          	
FB/E6:          	; CLOSES ANY FILES THAT ARE OPEN
FB/E6:          	; ALL BUFFERS WILL BE FLUSHED AFTER THE OPERATION COMPLETES
FB/E6:          	; USES: A, B, C, M0, M1, M2
FB/E6: 34F9     FCLOSE:	LOADI	B,FS2_B
FB/E7: 38DA     	LOADI	C,FCLOSEA
FB/E8: FF19     	JUMP	INDIR
FB/EA:          
FB/E9:          	; READS A BLOCK OUT OF THE CURRENTLY OPEN FILE
FB/E9:          	; AN ERROR IS RETURNED IF THE BLOCK IS OUTSIDE OF THE CURRENT
FB/E9:          	; FILE SIZE
FB/E9:          	; A FILE MUST CURRENTLY BE OPEN
FB/E9:          	; A = BLOCK TO READ
FB/E9:          	; [SRC_BNK] = DESTINATION OF READ DATA
FB/E9:          	; ASSUMES WORK BANK IS SELECTED
FB/E9:          	; A RETURNS 0X00 IF SUCCESSFUL, OTHERWISE 0XFF IS RETURNED
FB/E9:          	; USES: A, B, C, M0
FB/E9: 34F9     FREAD:	LOADI	B,FS2_B
FB/EA: 3880     	LOADI	C,FREADA
FB/EB: FF16     	JUMP	INDIR
FB/ED:          	
FB/EC:          	; WRITE A BLOCK INTO THE CURRENTLY OPEN FILE
FB/EC:          	; IF THE ADDRESS IS AN EXISTING BLOCK, IT WILL BE OVERWRITTEN
FB/EC:          	; IF THE ADDRESS IS EQUAL TO THE FILE SIZE, THEN A NEW BLOCK
FB/EC:          	; WILL BE ALLOCATED
FB/EC:          	; OTHERWISE THERE WILL BE AN ERROR
FB/EC:          	; A FILE MUST CURRENTLY BE OPEN
FB/EC:          	; A = BLOCK TO WRITE
FB/EC:          	; [SRC_BNK] = SOURCE OF WRITE DATA
FB/EC:          	; ASSUMES WORK BANK IS SELECTED
FB/EC:          	; A RETURNS 0X00 IF SUCCESSFUL, OTHERWISE 0XFF IS RETURNED
FB/EC:          	; USES: A, B, C, M0, M1, M2
FB/EC: 34F9     FWRITE:	LOADI	B,FS2_B
FB/ED: 3898     	LOADI	C,FWRITEA
FB/EE: FF13     	JUMP	INDIR
FB/F0:          
FB/EF:          
FB/EF:          
FB/EF:          	; INTERNAL FS0 FUNCTION TO RESET TO WORK BANK AND RETURN
FB/EF: 38FF     FS0DONE:LOADI	C,WORK_B
FB/F0: A880     	STORE	[DBANK],C
FB/F1: FF11     	JUMP	IRET
FB/F3:          
FB/F2:          	; BANK IS DONE, MOVE ON TO THE NEXT
FB/F2:          BI	= BI-1
FB/F2:          .BANK BI
FA/80:          FS1_B	= BI
FA/80:          .TEXT
FA/80:          
FA/80:          	; START THE FILE SEARCH ON A BLOCK
FA/80:          	; RESET INTER-BLOCK SEARCH STATE
FA/80:          	; AND READ THE BLOCK
FA/80:          	; THEN EXECUTE FSCHECK
FA/80:          	; ASSUMES WORK BANK IS SELECTED
FA/80:          	; USES: A, B, C
FA/80: 3000     FSSTART:LOADI	A,0
FA/81: A014     	STORE	[SRCH_RP],A
FA/82: 30F2     	LOADI	A,KBUF_B
FA/83: A013     	STORE	[SRCH_BK],A
FA/85:          	
FA/84:          	; SET ADDRESS FOR READ
FA/84: 3400     	LOADI	B,0
FA/85: A406     	STORE	[BLK],B
FA/86: 8412     	LOAD	B,[SRCH_LO]
FA/87: A407     	STORE	[BLK+1],B
FA/89:          	
FA/88:          	; AND EXECUTE A READ INTO THE KBUF
FA/88: 7C02     	SUBI	D,2
FA/89: 38FA     	LOADI	C,FS1_B
FA/8A: BB01     	STOREF	[D+1],C
FA/8B: 3890     	LOADI	C,@+5
FA/8C: BB00     	STOREF	[D],C
FA/8D: 34FC     	LOADI	B,BLK0_B
FA/8E: 388F     	LOADI	C,BLKREAD
FA/8F: FF72     	JUMP	INDIR
FA/90: 5C02     	ADDI	D,2
FA/92:          
FA/91:          	; FILE SEARCH CHECK
FA/91:          	; USING THE CURRENT SEARCH STATE, THE RECORD WILL BE CHECKED
FA/91:          	; AGAINST THE CURRENT PATTERN
FA/91:          	; ASSUMES WORK BANK IS SELECTED
FA/91:          	; A RETURNS 0X00 IF FOUND, OTHERWISE FSNEXT IS CALLED
FA/91:          	; USES: A, B, C, M0, M1
FA/91: 380A     FSCHECK:LOADI	C,10
FA/92: A801     	STORE	[M1],C
FA/94:          
FA/93:          	; RECORD THE CURRENT RECORD ENDING
FA/93: 8014     	LOAD	A,[SRCH_RP]
FA/94: 8413     	LOAD	B,[SRCH_BK]
FA/95: A480     	STORE	[DBANK],B 
FA/96: 980F     	LOADF	C,[A+15]
FA/97: 34FF     	LOADI	B,WORK_B
FA/98: A480     	STORE	[DBANK],B
FA/99: A815     	STORE	[SRCH_LS],C
FA/9B:          	
FA/9A:          	; GET THE PATTERN TO MATCH AGAINST
FA/9A: 8802     	LOAD	C,[M2]
FA/9C:          	
FA/9B:          	; GET BYTE OF MATCH PATTERN
FA/9B: A800     0:	STORE	[M0],C
FA/9C: 9A00     	LOADF	C,[C]
FA/9D: 783F     	SUBI	C,'?'
FA/9E: F608     	BRZ	1F
FA/9F: 583F     	ADDI	C,'?'
FA/A1:          	
FA/A0:          	; SWITCH TO RECORD BANK
FA/A0: 8413     	LOAD	B,[SRCH_BK]
FA/A1: A480     	STORE	[DBANK],B
FA/A3:          	
FA/A2:          	; CHECK AGAINST THE RECORD POINTER
FA/A2: 9400     	LOADF	B,[A]
FA/A3: D600     	CMP	B,C
FA/A4: 34FF     	LOADI	B,WORK_B
FA/A5: A480     	STORE	[DBANK],B
FA/A6: F720     	BRNZ	FSNEXT
FA/A8:          	
FA/A7:          	; THAT ONE MATCHED, KEEP GOING
FA/A7: 5001     1:	ADDI	A,1
FA/A8: 8800     	LOAD	C,[M0]
FA/A9: 5801     	ADDI	C,1
FA/AA: 8401     	LOAD	B,[M1]
FA/AB: 7401     	SUBI	B,1
FA/AC: A401     	STORE	[M1],B
FA/AD: F7ED     	BRNZ	0B
FA/AF:          	
FA/AE:          	; WE HAVE A MATCH!
FA/AE:          	; COPY USER AREA INTO USER SPACE
FA/AE: AC00     	STORE	[M0],D
FA/AF: 8014     	LOAD	A,[SRCH_RP]
FA/B0: 8413     	LOAD	B,[SRCH_BK]
FA/B1: A480     	STORE	[DBANK],B 
FA/B2: 9801     	LOADF	C,[A+1]
FA/B3: 3400     	LOADI	B,0
FA/B4: A480     	STORE	[DBANK],B
FA/B5: A86A     	STORE	[0X6A],C
FA/B7:          	
FA/B6:          	; COPY FILE NAME AND SIZE
FA/B6: 3C0A     	LOADI	D,10
FA/B7: 34FF     	LOADI	B,WORK_B
FA/B8: A480     	STORE	[DBANK],B
FA/B9: 8413     2:	LOAD	B,[SRCH_BK]
FA/BA: A480     	STORE	[DBANK],B 
FA/BB: 980B     	LOADF	C,[A+11]
FA/BC: 3400     	LOADI	B,0
FA/BD: A480     	STORE	[DBANK],B
FA/BE: BB5F     	STOREF	[D+0X60-1],C
FA/BF: 7001     	SUBI	A,1
FA/C0: 7C01     	SUBI	D,1
FA/C1: 34FF     	LOADI	B,WORK_B
FA/C2: A480     	STORE	[DBANK],B
FA/C3: F7F5     	BRNZ	2B
FA/C4: 8C00     	LOAD	D,[M0]
FA/C6:          	
FA/C5:          	; COMPLETE OPERATION
FA/C5: 3000     	LOADI	A,0
FA/C6: FF2E     	JUMP	FS1DONE
FA/C8:          	
FA/C7:          	; INCREMENT TO THE NEXT RECORD
FA/C7:          	; CHECK TO SEE IF THERE IS ACTUALLY A NEXT RECORD
FA/C7: 30FF     FSNEXT:	LOADI	A,0XFF
FA/C8: 8415     	LOAD	B,[SRCH_LS]
FA/C9: 5400     	ADDI	B,0
FA/CA: F42A     	BRN	FS1DONE
FA/CB: F70A     	BRNZ	0F
FA/CD:          	
FA/CC:          	; INCREMENT TO NEXT RECORD ON BANK
FA/CC: 8014     	LOAD	A,[SRCH_RP]
FA/CD: 5010     	ADDI	A,16
FA/CE: A014     	STORE	[SRCH_RP],A
FA/CF: F5C1     	BRNN	FSCHECK
FA/D1:          	
FA/D0:          	; INCREMENT TO NEXT BANK
FA/D0: 3000     	LOADI	A,0
FA/D1: A014     	STORE	[SRCH_RP],A
FA/D2: 8013     	LOAD	A,[SRCH_BK]
FA/D3: 5001     	ADDI	A,1
FA/D4: A013     	STORE	[SRCH_BK],A
FA/D5: FFBB     	JUMP	FSCHECK
FA/D7:          	
FA/D6:          	; MOVE ON TO NEXT BLOCK
FA/D6: 8012     0:	LOAD	A,[SRCH_LO]
FA/D7: 5001     	ADDI	A,1
FA/D8: A012     	STORE	[SRCH_LO],A
FA/D9: FFA6     	JUMP	FSSTART
FA/DB:          	
FA/DA:          	; SHADOW OF FOPEN
FA/DA: 8414     FOPENA:	LOAD	B,[SRCH_RP]
FA/DC:          
FA/DB:          	; SAVE THE STACK SO WE CAN USE THE REGISTER FOR TRANSFERS
FA/DB: AC00     	STORE	[M0],D
FA/DD:          	
FA/DC:          	; LOAD OPEN FILE SIZE
FA/DC: 8013     	LOAD	A,[SRCH_BK]
FA/DD: A080     	STORE	[DBANK],A
FA/DE: 990A     	LOADF	C,[B+10]
FA/DF: 9D0B     	LOADF	D,[B+11]
FA/E0: 30FF     	LOADI	A,WORK_B
FA/E1: A080     	STORE	[DBANK],A
FA/E2: A819     	STORE	[OF_SIZE],C
FA/E3: AC1A     	STORE	[OF_SIZE+1],D
FA/E5:          	
FA/E4:          	; LOAD OPEN FILE BLOCK TABLE
FA/E4: 8013     	LOAD	A,[SRCH_BK]
FA/E5: A080     	STORE	[DBANK],A
FA/E6: 990D     	LOADF	C,[B+13]
FA/E7: 9D0E     	LOADF	D,[B+14]
FA/E8: 30FF     	LOADI	A,WORK_B
FA/E9: A080     	STORE	[DBANK],A
FA/EA: A817     	STORE	[OF_BTAB],C
FA/EB: AC18     	STORE	[OF_BTAB+1],D
FA/EC: A806     	STORE	[BLK],C
FA/ED: AC07     	STORE	[BLK+1],D
FA/EF:          	
FA/EE:          	; RESTORE STACK AND SET OPEN FLAG
FA/EE: 8C00     	LOAD	D,[M0]
FA/EF: 30FF     	LOADI	A,0XFF
FA/F0: A016     	STORE	[OF_OPEN],A
FA/F2:          	
FA/F1:          	; EXECUTE BLOCK READ
FA/F1: 30F6     	LOADI	A,FBT_B
FA/F2: 34FC     	LOADI	B,BLK0_B
FA/F3: 388F     	LOADI	C,BLKREAD
FA/F4: FF0D     	JUMP	INDIR
FA/F6:          
FA/F5:          
FA/F5:          	; INTERNAL FS1 FUNCTION TO RESET TO WORK BANK AND RETURN
FA/F5: 38FF     FS1DONE:LOADI	C,WORK_B
FA/F6: A880     	STORE	[DBANK],C
FA/F7: FF0B     	JUMP	IRET
FA/F9:          
FA/F8:          	; BANK IS DONE, MOVE ON TO THE NEXT
FA/F8:          BI	= BI-1
FA/F8:          .BANK BI
F9/80:          FS2_B	= BI
F9/80:          .TEXT
F9/80:          
F9/80:          	; SHADOW OF FREAD
F9/80:          	; ERROR IF NO FILE IS OPEN
F9/80: 8416     FREADA:	LOAD	B,[OF_OPEN]
F9/81: 5400     	ADDI	B,0
F9/82: F65C     	BRZ	FS2ERR
F9/84:          	
F9/83:          	; CHECK SIZE
F9/83: 8419     	LOAD	B,[OF_SIZE]
F9/84: 5400     	ADDI	B,0
F9/85: F703     	BRNZ	0F
F9/86: 841A     	LOAD	B,[OF_SIZE+1]
F9/87: D100     	CMP	A,B
F9/88: F056     	BRAE	FS2ERR
F9/8A:          	
F9/89:          	; CALL FACONV
F9/89: 388B     0:	LOADI	C,@+2
F9/8A: FF46     	JUMP	FACONV
F9/8C:          	
F9/8B:          	; GET THE BLOCK
F9/8B: AC00     	STORE	[M0],D
F9/8C: A480     	STORE	[DBANK],B
F9/8D: 9800     	LOADF	C,[A+0]
F9/8E: 9C01     	LOADF	D,[A+1]
F9/8F: 34FF     	LOADI	B,WORK_B
F9/90: A480     	STORE	[DBANK],B
F9/91: A806     	STORE	[BLK],C
F9/92: AC07     	STORE	[BLK+1],D	
F9/93: 8C00     	LOAD	D,[M0]
F9/95:          	
F9/94:          	; EXECUTE BLOCK READ
F9/94: 8005     	LOAD	A,[SRC_BNK]
F9/95: 34FC     	LOADI	B,BLK0_B
F9/96: 388F     	LOADI	C,BLKREAD
F9/97: FF6A     	JUMP	INDIR
F9/99:          	
F9/98:          	; SHADOW OF FWRITE
F9/98:          	; ERROR IF NO FILE IS OPEN
F9/98: 8416     FWRITEA:LOAD	B,[OF_OPEN]
F9/99: 5400     	ADDI	B,0
F9/9A: F644     	BRZ	FS2ERR
F9/9C:          	
F9/9B:          	; CHECK SIZE
F9/9B: 8419     	LOAD	B,[OF_SIZE]
F9/9C: 5400     	ADDI	B,0
F9/9D: F70F     	BRNZ	0F
F9/9E: 841A     	LOAD	B,[OF_SIZE+1]
F9/9F: D100     	CMP	A,B
F9/A0: F83E     	BRA	FS2ERR
F9/A1: F60F     	BRZ	1F
F9/A3:          	
F9/A2:          	; READ AN EXISTING BLOCK
F9/A2:          	; CALL FACONV
F9/A2: 38A4     	LOADI	C,@+2
F9/A3: FF2D     	JUMP	FACONV
F9/A5:          	
F9/A4:          	; GET THE BLOCK
F9/A4: AC00     	STORE	[M0],D
F9/A5: A480     	STORE	[DBANK],B
F9/A6: 9800     	LOADF	C,[A+0]
F9/A7: 9C01     	LOADF	D,[A+1]
F9/A8: 34FF     	LOADI	B,WORK_B
F9/A9: A480     	STORE	[DBANK],B
F9/AA: A806     	STORE	[BLK],C
F9/AB: AC07     	STORE	[BLK+1],D	
F9/AC: 8C00     	LOAD	D,[M0]
F9/AE:          	
F9/AD:          	; EXECUTE BLOCK WRITE
F9/AD: 8005     0:	LOAD	A,[SRC_BNK]
F9/AE: 34FC     	LOADI	B,BLK0_B
F9/AF: 38A5     	LOADI	C,BLKWRIT
F9/B0: FF51     	JUMP	INDIR
F9/B2:          	
F9/B1:          	; ALLOCATE A NEW BLOCK
F9/B1: 7C02     1:	SUBI	D,2
F9/B2: 38F9     	LOADI	C,BI
F9/B3: BB01     	STOREF	[D+1],C
F9/B4: 38B9     	LOADI	C,@+5
F9/B5: BB00     	STOREF	[D],C
F9/B6: 34F5     	LOADI	B,AL0_B
F9/B7: 38B8     	LOADI	C,ALLOC
F9/B8: FF49     	JUMP	INDIR
F9/B9: 5C02     	ADDI	D,2
F9/BA: 5000     	ADDI	A,0
F9/BB: F723     	BRNZ	FS2ERR
F9/BD:          	
F9/BC:          	; SET THE FILE AS DIRTY
F9/BC: 30FF     	LOADI	A,0XFF
F9/BD: A01B     	STORE	[OF_DRTY],A
F9/BF:          	
F9/BE:          	; STORE THE NEW BLOCK
F9/BE: 801A     	LOAD	A,[OF_SIZE+1]
F9/BF: 38C1     	LOADI	C,@+2
F9/C0: FF10     	JUMP	FACONV
F9/C1: AC00     	STORE	[M0],D
F9/C2: 8806     	LOAD	C,[BLK]
F9/C3: 8C07     	LOAD	D,[BLK+1]
F9/C4: A480     	STORE	[DBANK],B
F9/C5: B800     	STOREF	[A+0],C
F9/C6: BC01     	STOREF	[A+1],D
F9/C7: 34FF     	LOADI	B,WORK_B
F9/C8: A480     	STORE	[DBANK],B	
F9/C9: 8C00     	LOAD	D,[M0]
F9/CB:          	
F9/CA:          	; INCREMENT SIZE
F9/CA: 801A     	LOAD	A,[OF_SIZE+1]
F9/CB: 5001     	ADDI	A,1
F9/CC: A01A     	STORE	[OF_SIZE+1],A
F9/CD: F1DF     	BRNC	0B
F9/CE: 3001     	LOADI	A,1
F9/CF: A019     	STORE	[OF_SIZE],A
F9/D1:          	
F9/D0:          	; EXECUTE THE READ
F9/D0: FFDC     	JUMP	0B
F9/D2:          
F9/D1:          	; CONVERT TO BANK / ADDRESS FOR BLOCK TABLE LOOP
F9/D1: 34F6     FACONV:	LOADI	B,FBT_B
F9/D2: 4000     	SHIFTL	A
F9/D3: F101     	BRNC	0F
F9/D4: 5402     	ADDI	B,2
F9/D5: 4000     0:	SHIFTL	A
F9/D6: F101     	BRNC	1F
F9/D7: 5401     	ADDI	B,1
F9/D8: C100     1:	SHIFTR	A
F9/D9: FE26     	JUMPR	C
F9/DB:          	
F9/DA:          	; SHADOW OF FCLOSE
F9/DA: 3000     FCLOSEA:LOADI	A,0
F9/DB: A016     	STORE	[OF_OPEN],A
F9/DC: 34F5     	LOADI	B,AL0_B
F9/DD: 3880     	LOADI	C,FLUSH
F9/DE: FF23     	JUMP	INDIR
F9/E0:          	
F9/DF:          	; READ / WRITE ERROR
F9/DF: 30FF     FS2ERR:	LOADI	A,0XFF
F9/E1:          	
F9/E0:          	; INTERNAL FS2 FUNCTION TO RESET TO WORK BANK AND RETURN
F9/E0: 38FF     FS2DONE:LOADI	C,WORK_B
F9/E1: A880     	STORE	[DBANK],C
F9/E2: FF20     	JUMP	IRET
F9/E4:          
F9/E3:          
F9/E3:          	; BANK IS DONE, MOVE ON TO THE NEXT
F9/E3:          BI	= BI-1
F9/E3:          ; SYS.S
F9/E3:          ; USER SYSTEM CALL HANDLER
F9/E3:          
F9/E3:          .BANK BI
F8/80:          SYS0_B	= BI
F8/80:          .TEXT
F8/80:          
F8/80:          	; SYSTEM CALL HANDLER
F8/80:          	; A = SYSTEM CALL ARGUMENT
F8/80:          	; [M0] = SYSTEM CALL #
F8/80: 8400     SYSHNDL:LOAD	B,[M0]
F8/82:          	
F8/81:          	; 0: S_EXIT
F8/81: 5400     	ADDI	B,0
F8/82: F707     	BRNZ	9F
F8/84:          	
F8/83:          	; CLOSE FILE AND JUMP TO PROMPT
F8/83: 38FF     	LOADI	C,CORE0_B
F8/84: BB01     	STOREF	[D+1],C
F8/85: 389D     	LOADI	C,PROMPT
F8/86: BB00     	STOREF	[D],C
F8/88:          	
F8/87: 34FB     	LOADI	B,FS0_B
F8/88: 38E6     	LOADI	C,FCLOSE
F8/89: FF78     	JUMP	INDIR
F8/8B:          	
F8/8A:          	; 1: S_PUTC
F8/8A: 7401     9:	SUBI	B,1
F8/8B: F703     	BRNZ	9F
F8/8D:          
F8/8C: 34FD     	LOADI	B,TTY0_B
F8/8D: 3889     	LOADI	C,TTYPUTC
F8/8E: FF73     	JUMP	INDIR
F8/90:          	
F8/8F:          	; 2: S_GETC
F8/8F: 7401     9:	SUBI	B,1
F8/90: F703     	BRNZ	9F
F8/92:          
F8/91: 34FD     	LOADI	B,TTY0_B
F8/92: 389D     	LOADI	C,TTYGETC
F8/93: FF6E     	JUMP	INDIR
F8/95:          	
F8/94:          	; 3: S_STAT
F8/94: 7401     9:	SUBI	B,1
F8/95: F703     	BRNZ	9F
F8/97:          
F8/96: 34FD     	LOADI	B,TTY0_B
F8/97: 38D5     	LOADI	C,TTYSTAT
F8/98: FF69     	JUMP	INDIR
F8/9A:          
F8/99:          	; 4: S_PUTS
F8/99: 7401     9:	SUBI	B,1
F8/9A: F703     	BRNZ	9F
F8/9C:          
F8/9B: 34FD     	LOADI	B,TTY0_B
F8/9C: 3890     	LOADI	C,TTYPUTS
F8/9D: FF64     	JUMP	INDIR
F8/9F:          	
F8/9E:          	; 5: S_INPUT
F8/9E: 7401     9:	SUBI	B,1
F8/9F: F703     	BRNZ	9F
F8/A1:          
F8/A0: 34FD     	LOADI	B,TTY0_B
F8/A1: 38A2     	LOADI	C,TTYINPT
F8/A2: FF5F     	JUMP	INDIR
F8/A4:          	
F8/A3:          	; 6: S_OPEN
F8/A3: 7401     9:	SUBI	B,1
F8/A4: F723     	BRNZ	9F
F8/A6:          
F8/A5:          	; ALLOCATE SPACE ON THE STACK
F8/A5:          	; AND STORE SEARCH ARGUMENT
F8/A5: 7C03     	SUBI	D,3
F8/A6: B302     	STOREF	[D+2],A
F8/A8:          
F8/A7:          	; START BY CLOSING THE FILE
F8/A7: 38F8     	LOADI	C,BI
F8/A8: BB01     	STOREF	[D+1],C
F8/A9: 38AE     	LOADI	C,@+5
F8/AA: BB00     	STOREF	[D],C
F8/AC:          	
F8/AB: 34FB     	LOADI	B,FS0_B
F8/AC: 38E6     	LOADI	C,FCLOSE
F8/AD: FF54     	JUMP	INDIR
F8/AF:          	
F8/AE:          	; GET THE DEFAULT USER AREA
F8/AE: 3800     	LOADI	C,0
F8/AF: A880     	STORE	[DBANK],C
F8/B0: 846B     	LOAD	B,[DFT_USR]
F8/B2:          	
F8/B1:          	; SET THE WORKING USER AREA
F8/B1: 38FF     	LOADI	C,WORK_B
F8/B2: A880     	STORE	[DBANK],C
F8/B3: A409     	STORE	[WRK_USR],B
F8/B5:          
F8/B4:          	; ATTEMPT TO SET PARAMETERS FOR SEARCH
F8/B4: 9302     	LOADF	A,[D+2]
F8/B5: 38BA     	LOADI	C,@+5
F8/B6: BB00     	STOREF	[D],C
F8/B8:          	
F8/B7: 34FB     	LOADI	B,FS0_B
F8/B8: 3880     	LOADI	C,SSPARAM
F8/B9: FF48     	JUMP	INDIR
F8/BB:          	
F8/BA:          	; CHECK TO MAKE SURE IT RETURNS 0X00
F8/BA: 5000     	ADDI	A,0
F8/BB: F724     	BRNZ	SYSERR0
F8/BD:          	
F8/BC:          	; AND SEARCH FOR IT
F8/BC: 3000     	LOADI	A,0
F8/BD: 38C2     	LOADI	C,@+5
F8/BE: BB00     	STOREF	[D],C
F8/C0:          	
F8/BF: 34FB     	LOADI	B,FS0_B
F8/C0: 38D9     	LOADI	C,FSEARCH
F8/C1: FF40     	JUMP	INDIR
F8/C3:          	
F8/C2:          	; DID IT WORK?
F8/C2: 5000     	ADDI	A,0
F8/C3: F71C     	BRNZ	SYSERR0
F8/C5:          	
F8/C4:          	; NOW OPEN IT
F8/C4: 5C03     	ADDI	D,3
F8/C6:          	
F8/C5: 34FB     	LOADI	B,FS0_B
F8/C6: 38E3     	LOADI	C,FOPEN
F8/C7: FF3A     	JUMP	INDIR
F8/C9:          	
F8/C8:          	; 7: S_CLOSE
F8/C8: 7401     9:	SUBI	B,1
F8/C9: F703     	BRNZ	9F
F8/CB:          
F8/CA: 34FB     	LOADI	B,FS0_B
F8/CB: 38E6     	LOADI	C,FCLOSE
F8/CC: FF35     	JUMP	INDIR
F8/CE:          	
F8/CD:          	; 8: S_READ
F8/CD: 7401     9:	SUBI	B,1
F8/CE: F706     	BRNZ	9F
F8/D0:          	
F8/CF:          	; CHECK TO MAKE SURE A FILE IS OPEN
F8/CF: 8416     	LOAD	B,[OF_OPEN]
F8/D0: 5400     	ADDI	B,0
F8/D1: F60E     	BRZ	SYSERR0
F8/D3:          
F8/D2: 34FB     	LOADI	B,FS0_B
F8/D3: 38E9     	LOADI	C,FREAD
F8/D4: FF2D     	JUMP	INDIR
F8/D6:          	
F8/D5:          	; 9: S_WRITE
F8/D5: 7401     9:	SUBI	B,1
F8/D6: A400     	STORE	[M0],B
F8/D7: 34F7     	LOADI	B,SYS1_B
F8/D8: 3880     	LOADI	C,9F
F8/D9: F728     	BRNZ	INDIR
F8/DB:          	
F8/DA:          	; CHECK TO MAKE SURE A FILE IS OPEN
F8/DA: 8416     	LOAD	B,[OF_OPEN]
F8/DB: 5400     	ADDI	B,0
F8/DC: F603     	BRZ	SYSERR0
F8/DE:          
F8/DD: 34FB     	LOADI	B,FS0_B
F8/DE: 38EC     	LOADI	C,FWRITE
F8/DF: FF22     	JUMP	INDIR
F8/E1:          	
F8/E0:          	; SYSCALL ERROR
F8/E0: 5C03     SYSERR0:ADDI	D,3
F8/E1: 30FF     	LOADI	A,0XFF
F8/E2: FF20     	JUMP	IRET
F8/E4:          	
F8/E3:          	; BANK IS DONE, MOVE ON TO THE NEXT
F8/E3:          BI	= BI-1
F8/E3:          .BANK BI
F7/80:          SYS1_B	= BI
F7/80:          .TEXT
F7/80:          
F7/80:          	; 10: S_FSRCH
F7/80: 8400     9:	LOAD	B,[M0]
F7/81: 7401     	SUBI	B,1
F7/82: F71A     	BRNZ	9F
F7/84:          	
F7/83:          	; ALLOCATE SPACE ON THE STACK
F7/83:          	; AND STORE SEARCH ARGUMENT
F7/83: 7C03     	SUBI	D,3
F7/84: B302     	STOREF	[D+2],A
F7/86:          	
F7/85:          	; CHECK TO MAKE SURE THE FILE IS CLOSED
F7/85: 8416     	LOAD	B,[OF_OPEN]
F7/86: 5400     	ADDI	B,0
F7/87: F73E     	BRNZ	SYSERR1
F7/89:          	
F7/88:          	; GET THE DEFAULT USER AREA
F7/88: 3800     	LOADI	C,0
F7/89: A880     	STORE	[DBANK],C
F7/8A: 846B     	LOAD	B,[DFT_USR]
F7/8C:          	
F7/8B:          	; SET THE WORKING USER AREA
F7/8B: 38FF     	LOADI	C,WORK_B
F7/8C: A880     	STORE	[DBANK],C
F7/8D: A409     	STORE	[WRK_USR],B
F7/8F:          
F7/8E:          	; ATTEMPT TO SET PARAMETERS FOR SEARCH
F7/8E: 38F7     	LOADI	C,BI
F7/8F: BB01     	STOREF	[D+1],C
F7/90: 9302     	LOADF	A,[D+2]
F7/91: 3896     	LOADI	C,@+5
F7/92: BB00     	STOREF	[D],C
F7/94:          	
F7/93: 34FB     	LOADI	B,FS0_B
F7/94: 3880     	LOADI	C,SSPARAM
F7/95: FF6C     	JUMP	INDIR
F7/97:          	
F7/96:          	; CHECK TO MAKE SURE IT RETURNS 0X00
F7/96: 5000     	ADDI	A,0
F7/97: F72E     	BRNZ	SYSERR1
F7/99:          	
F7/98:          	; AND SEARCH FOR IT
F7/98: 3000     	LOADI	A,0
F7/99: 5C03     	ADDI	D,3
F7/9B:          	
F7/9A: 34FB     	LOADI	B,FS0_B
F7/9B: 38D9     	LOADI	C,FSEARCH
F7/9C: FF65     	JUMP	INDIR
F7/9E:          	
F7/9D:          	; 11: S_NEXT
F7/9D: 7401     9:	SUBI	B,1
F7/9E: F708     	BRNZ	9F
F7/A0:          	
F7/9F:          	; CHECK TO MAKE SURE THE FILE IS CLOSED
F7/9F: 8416     	LOAD	B,[OF_OPEN]
F7/A0: 5400     	ADDI	B,0
F7/A1: 30FF     	LOADI	A,0XFF
F7/A2: F760     	BRNZ	IRET
F7/A4:          
F7/A3: 3001     	LOADI	A,1
F7/A4: 34FB     	LOADI	B,FS0_B
F7/A5: 38D9     	LOADI	C,FSEARCH
F7/A6: FF5B     	JUMP	INDIR
F7/A8:          	
F7/A7:          	; 12: S_DELET
F7/A7: 7401     9:	SUBI	B,1
F7/A8: F707     	BRNZ	9F
F7/AA:          	
F7/A9:          	; CHECK TO MAKE SURE THE FILE IS OPEN
F7/A9: 8416     	LOAD	B,[OF_OPEN]
F7/AA: 5400     	ADDI	B,0
F7/AB: 30FF     	LOADI	A,0XFF
F7/AC: F656     	BRZ	IRET
F7/AE:          
F7/AD:          	; FREE THE FILE
F7/AD: 34F5     	LOADI	B,AL0_B
F7/AE: 38BE     	LOADI	C,FFREE
F7/AF: FF52     	JUMP	INDIR
F7/B1:          	
F7/B0:          	; 13: S_CREAT
F7/B0: 7401     9:	SUBI	B,1
F7/B1: F703     	BRNZ	9F
F7/B3:          
F7/B2: 34F6     	LOADI	B,SYS2_B
F7/B3: 3880     	LOADI	C,SCREAT
F7/B4: FF4D     	JUMP	INDIR
F7/B6:          	
F7/B5:          	; 14: S_FREE
F7/B5: 7401     9:	SUBI	B,1
F7/B6: F708     	BRNZ	9F
F7/B8:          	
F7/B7:          	; CHECK TO MAKE SURE THE FILE IS CLOSED
F7/B7: 8416     	LOAD	B,[OF_OPEN]
F7/B8: 5400     	ADDI	B,0
F7/B9: 30FF     	LOADI	A,0XFF
F7/BA: F748     	BRNZ	IRET
F7/BC:          	
F7/BB: 30FF     	LOADI	A,0XFF
F7/BC: 34F5     	LOADI	B,AL0_B
F7/BD: 38B5     	LOADI	C,INDEX
F7/BE: FF43     	JUMP	INDIR
F7/C0:          	
F7/BF:          	; 15: S_EXEC
F7/BF: 7401     9:	SUBI	B,1
F7/C0: F703     	BRNZ	9F
F7/C2:          	
F7/C1: 34FF     	LOADI	B,CORE0_B
F7/C2: 3880     	LOADI	C,EXEC
F7/C3: FF3E     	JUMP	INDIR
F7/C5:          	
F7/C4:          	; UNKNOWN SYSCALL
F7/C4: 30FF     9:	LOADI	A,0XFF
F7/C5: FF3D     	JUMP	IRET
F7/C7:          
F7/C6:          	; SYSCALL ERROR
F7/C6: 5C03     SYSERR1:ADDI	D,3
F7/C7: 30FF     	LOADI	A,0XFF
F7/C8: FF3A     	JUMP	IRET
F7/CA:          	
F7/C9:          	; BANK IS DONE, MOVE ON TO THE NEXT
F7/C9:          BI	= BI-1
F7/C9:          .BANK BI
F6/80:          SYS2_B	= BI
F6/80:          .TEXT
F6/80:          
F6/80:          	; SYSTEM CREATE ROUTINE
F6/80:          	; ALLOCATE SPACE ON THE STACK
F6/80:          	; AND STORE SEARCH ARGUMENT
F6/80: 7C03     SCREAT:	SUBI	D,3
F6/81: B302     	STOREF	[D+2],A
F6/83:          
F6/82:          	; START BY CLOSING THE FILE
F6/82: 38F6     	LOADI	C,BI
F6/83: BB01     	STOREF	[D+1],C
F6/84: 3889     	LOADI	C,@+5
F6/85: BB00     	STOREF	[D],C
F6/86: 34FB     	LOADI	B,FS0_B
F6/87: 38E6     	LOADI	C,FCLOSE
F6/88: FF79     	JUMP	INDIR
F6/8A:          	
F6/89:          	; GET THE DEFAULT USER AREA
F6/89: 3800     	LOADI	C,0
F6/8A: A880     	STORE	[DBANK],C
F6/8B: 846B     	LOAD	B,[DFT_USR]
F6/8D:          	
F6/8C:          	; SET THE WORKING USER AREA
F6/8C: 38FF     	LOADI	C,WORK_B
F6/8D: A880     	STORE	[DBANK],C
F6/8E: A409     	STORE	[WRK_USR],B
F6/90:          
F6/8F:          	; ATTEMPT TO SET PARAMETERS FOR SEARCH
F6/8F: 9302     	LOADF	A,[D+2]
F6/90: 3895     	LOADI	C,@+5
F6/91: BB00     	STOREF	[D],C
F6/92: 34FB     	LOADI	B,FS0_B
F6/93: 3880     	LOADI	C,SSPARAM
F6/94: FF6D     	JUMP	INDIR
F6/95: 5000     	ADDI	A,0
F6/96: F722     	BRNZ	SYSERR2
F6/98:          	
F6/97:          	; CHECK PATTERN FOR WILDCARDS
F6/97: 3408     	LOADI	B,MATCH
F6/98: 380A     	LOADI	C,10
F6/99: 9100     0:	LOADF	A,[B]
F6/9A: 703F     	SUBI	A,'?'
F6/9B: 30FF     	LOADI	A,0XFF
F6/9C: F61C     	BRZ	SYSERR2
F6/9D: 7801     	SUBI	C,1
F6/9E: F7FA     	BRNZ	0B
F6/A0:          	
F6/9F:          	; AND SEARCH FOR IT
F6/9F: 3000     	LOADI	A,0
F6/A0: 38A5     	LOADI	C,@+5
F6/A1: BB00     	STOREF	[D],C
F6/A2: 34FB     	LOADI	B,FS0_B
F6/A3: 38D9     	LOADI	C,FSEARCH
F6/A4: FF5D     	JUMP	INDIR
F6/A5: 5000     	ADDI	A,0
F6/A6: F70E     	BRNZ	1F
F6/A8:          	
F6/A7:          	; NOW OPEN IT
F6/A7: 38AC     	LOADI	C,@+5
F6/A8: BB00     	STOREF	[D],C
F6/A9: 34FB     	LOADI	B,FS0_B
F6/AA: 38E3     	LOADI	C,FOPEN
F6/AB: FF56     	JUMP	INDIR
F6/AC: 5000     	ADDI	A,0
F6/AD: F70B     	BRNZ	SYSERR2
F6/AF:          	
F6/AE:          	; AND FREE IT
F6/AE: 38B3     	LOADI	C,@+5
F6/AF: BB00     	STOREF	[D],C
F6/B0: 34F5     	LOADI	B,AL0_B
F6/B1: 38BE     	LOADI	C,FFREE
F6/B2: FF4F     	JUMP	INDIR
F6/B3: 5000     	ADDI	A,0
F6/B4: F704     	BRNZ	SYSERR2
F6/B6:          
F6/B5:          	; NOW WE CAN ALLOCATE A NEW FILE
F6/B5: 5C03     1:	ADDI	D,3
F6/B6: 34F5     	LOADI	B,AL0_B
F6/B7: 38C1     	LOADI	C,FALLOC
F6/B8: FF49     	JUMP	INDIR
F6/BA:          	
F6/B9:          	; SYSCALL ERROR
F6/B9: 5C03     SYSERR2:ADDI	D,3
F6/BA: 30FF     	LOADI	A,0XFF
F6/BB: FF47     	JUMP	IRET
F6/BD:          
F6/BC:          	; BANK IS DONE, MOVE ON TO THE NEXT
F6/BC:          BI	= BI-1
F6/BC:          ; ALLOC.S
F6/BC:          ; BLOCK ALLOCATION MANAGEMENT
F6/BC:          
F6/BC:          .BANK BI
F5/80:          AL0_B	= BI
F5/80:          .TEXT
F5/80:          
F5/80:          	; FLUSH ANY BUFFERS THAT MAY HAVE BECOME DIRTY
F5/80:          	; ASSUMES WORK BANK IS SELECTED
F5/80:          	; USES: A, B, C, M0
F5/80: 7C02     FLUSH:	SUBI	D,2
F5/81: 38F5     	LOADI	C,BI
F5/82: BB01     	STOREF	[D+1],C
F5/84:          
F5/83:          	; CHECK IF OPEN FILE IS DIRTY
F5/83: 801B     	LOAD	A,[OF_DRTY]
F5/84: 5000     	ADDI	A,0
F5/85: F61E     	BRZ	1F
F5/87:          	
F5/86:          	; RESET OPEN FILE DIRTY FLAG
F5/86: 3000     	LOADI	A,0
F5/87: A01B     	STORE	[OF_DRTY],A
F5/89:          	
F5/88:          	; MOVE FILE SIZE BACK INTO FILE RECORD
F5/88: AC00     	STORE	[M0],D
F5/89: 8819     	LOAD	C,[OF_SIZE]
F5/8A: 8C1A     	LOAD	D,[OF_SIZE+1]
F5/8B: 8014     	LOAD	A,[SRCH_RP]
F5/8C: 8413     	LOAD	B,[SRCH_BK]
F5/8D: A480     	STORE	[DBANK],B
F5/8E: B80A     	STOREF	[A+10],C
F5/8F: BC0B     	STOREF	[A+11],D
F5/90: 34FF     	LOADI	B,WORK_B
F5/91: A480     	STORE	[DBANK],B
F5/92: 8C00     	LOAD	D,[M0]
F5/94:          
F5/93:          	; EXECUTE WRITES FOR FILE RECORD AND BTAB
F5/93: 3000     	LOADI	A,0
F5/94: 8412     	LOAD	B,[SRCH_LO]
F5/95: A006     	STORE	[BLK],A
F5/96: A407     	STORE	[BLK+1],B
F5/98:          	
F5/97:          	; WRITE FILE RECORD
F5/97: 30F2     	LOADI	A,KBUF_B
F5/98: 389D     	LOADI	C,@+5
F5/99: BB00     0:	STOREF	[D],C
F5/9A: 34FC     	LOADI	B,BLK0_B
F5/9B: 38A5     	LOADI	C,BLKWRIT
F5/9C: FF65     	JUMP	INDIR
F5/9E:          	
F5/9D:          	; GET ADDRESS OF THE FILE BLOCK TABLE
F5/9D: 8017     	LOAD	A,[OF_BTAB]
F5/9E: 8418     	LOAD	B,[OF_BTAB+1]
F5/9F: A006     	STORE	[BLK],A
F5/A0: A407     	STORE	[BLK+1],B
F5/A2:          	
F5/A1:          	; WRITE FILE BLOCK TABLE
F5/A1: 30F6     	LOADI	A,FBT_B
F5/A2: 38A4     	LOADI	C,@+2
F5/A3: FFF5     	JUMP	0B
F5/A5:          	
F5/A4:          	; CHECK IF ALLOCATION BITMAP IS DIRTY
F5/A4: 8022     1:	LOAD	A,[AB_DRTY]
F5/A5: 5000     	ADDI	A,0
F5/A6: F609     	BRZ	2F
F5/A8:          	
F5/A7:          	; RESET ALLOCATION BITMAP DIRTY FLAG
F5/A7: 3000     	LOADI	A,0
F5/A8: A022     	STORE	[AB_DRTY],A
F5/AA:          	
F5/A9:          	; GET ADDRESS OF CURRENT ALLOCATION BITMAP BLOCK
F5/A9: 3000     	LOADI	A,0
F5/AA: 8421     	LOAD	B,[AB_CBLK]
F5/AB: A006     	STORE	[BLK],A
F5/AC: A407     	STORE	[BLK+1],B
F5/AE:          
F5/AD:          	; WRITE ALLOCATION BITMAP
F5/AD: 30FA     	LOADI	A,ABM_B
F5/AE: 38B0     	LOADI	C,@+2
F5/AF: FFE9     	JUMP	0B
F5/B1:          
F5/B0:          	; RESET STACK AND RETURN
F5/B0: 5C02     2:	ADDI	D,2
F5/B1: 30FF     	LOADI	A,WORK_B
F5/B2: A080     	STORE	[DBANK],A
F5/B3: 3000     	LOADI	A,0
F5/B4: FF4E     	JUMP	IRET
F5/B6:          	
F5/B5:          	; INDEX ALLOCATION BITMAP
F5/B5:          	; SEARCHES FOR A BLOCK IN THE ALLOCATION TABLE
F5/B5:          	; THAT CONTAINS AN EMPTY BLOCK OR ALLOCATED BLOCK
F5/B5:          	; ASSUMES WORK BANK IS SELECTED
F5/B5:          	; A = 0 IF LOOKING FOR EMPTY BLOCK, A = 1 IF LOOKING FOR FULL BLOCK
F5/B5:          	; A = 0XFF IF COUNTING FREE BLOCKS
F5/B5:          	; RETURNS A = 0 IF OPERATION IS SUCCESSFUL, A = 0XFF OTHERWISE
F5/B5:          	; USES: A, B, C, M0, M1, M2
F5/B5: 34F4     INDEX:	LOADI	B,AL1_B
F5/B6: 3880     	LOADI	C,INDEXA
F5/B7: FF4A     	JUMP	INDIR
F5/B9:          	
F5/B8:          	; ALLOCATE BLOCK ON DISK
F5/B8:          	; LOOKS FOR AN UNUSED BLOCK IN THE ALLOCATION BITMAP,
F5/B8:          	; RESERVES IT, AND THEN RETURNS IT.
F5/B8:          	; ADDRESS WILL BE RETURNED IN [BLK]
F5/B8:          	; RETURNS A = 0 IF OPERATION IS SUCCESSFUL, A = 0XFF OTHERWISE
F5/B8:          	; USES: A, B, C, M0, M1, M2
F5/B8: 34F3     ALLOC:	LOADI	B,AL2_B
F5/B9: 3880     	LOADI	C,ALLOCA
F5/BA: FF47     	JUMP	INDIR
F5/BC:          	
F5/BB:          	; FREE BLOCK ON DISK
F5/BB:          	; GIVEN A BLOCK IN [AB_FREE], THE ABM WILL BE
F5/BB:          	; SEARCHED AND THAT BIT WILL BE MARKED AS UNALLOCATED
F5/BB:          	; [AB_FREE] = BLOCK TO FREE
F5/BB:          	; USES: A, B, C, M0, M1, M2
F5/BB: 34F2     FREE:	LOADI	B,AL3_B
F5/BC: 3880     	LOADI	C,FREEA
F5/BD: FF44     	JUMP	INDIR
F5/BF:          	
F5/BE:          	; FREE A FILE
F5/BE:          	; GIVEN AN OPEN FILE, ALL OWNED BLOCKS WILL BE FREED
F5/BE:          	; AND ITS FILE RECORD WILL BE MARKED EMPTY
F5/BE:          	; USES: A, B, C, M0, M1, M2
F5/BE: 34F1     FFREE:	LOADI	B,AL4_B
F5/BF: 3880     	LOADI	C,FFREEA
F5/C0: FF41     	JUMP	INDIR
F5/C2:          	
F5/C1:          	; ALLOCATE A FILE
F5/C1:          	; A FILE RECORD WILL BE RESERVED AND A NEW FILE BLOCK TABLE
F5/C1:          	; WILL BE ALLOCATED
F5/C1:          	; THE FILE WILL BE GIVEN THE NAME OF THE CURRENT FILE MATCH PARAMETER
F5/C1:          	; NO WILDCARDS SHOULD APPEAR IN THE MATCH STRING
F5/C1:          	; USES: A, B, C, M0, M1, M2
F5/C1: 34F0     FALLOC:	LOADI	B,AL5_B
F5/C2: 3880     	LOADI	C,FALLOCA
F5/C3: FF3E     	JUMP	INDIR
F5/C5:          
F5/C4:          	; BANK IS DONE, MOVE ON TO THE NEXT
F5/C4:          BI	= BI-1
F5/C4:          .BANK BI
F4/80:          AL1_B	= BI
F4/80:          .TEXT
F4/80:          	
F4/80:          BD_FREE	= 0X6E
F4/80:          	
F4/80:          	; SHADOW OF INDEX
F4/80: A001     INDEXA: STORE	[M1],A
F4/81: 7C02     	SUBI	D,2
F4/83:          
F4/82:          	; DO WE RESET THE BLOCK COUNT?
F4/82: 5000     	ADDI	A,0
F4/83: F506     	BRNN	0F
F4/85:          	
F4/84:          	; YES, WE DO
F4/84: 3000     	LOADI	A,0
F4/85: A080     	STORE	[DBANK],A
F4/86: A06E     	STORE	[BD_FREE],A
F4/87: A06F     	STORE	[BD_FREE+1],A
F4/89:          	
F4/88:          	; SWITCH BACK THE WORK BANK AND CONTINUE
F4/88: 30FF     	LOADI	A,WORK_B
F4/89: A080     	STORE	[DBANK],A
F4/8B:          	
F4/8A:          	; BEFORE WE DO ANY WORK, LETS FLUSH THE EXISTING BUFFERS
F4/8A: 38F4     0:	LOADI	C,BI
F4/8B: BB01     	STOREF	[D+1],C
F4/8C: 3891     	LOADI	C,@+5
F4/8D: BB00     	STOREF	[D],C
F4/8E: 34F5     	LOADI	B,AL0_B
F4/8F: 3880     	LOADI	C,FLUSH
F4/90: FF71     	JUMP	INDIR
F4/92:          	
F4/91:          	; SET CURRENT AB BLOCK TO 1
F4/91: 3000     	LOADI	A,0
F4/92: A006     	STORE	[BLK],A
F4/93: 3001     	LOADI	A,1
F4/95:          	
F4/94:          	
F4/94:          	; GRAB THE BLOCK AND START PROCESSING
F4/94: A021     0:	STORE	[AB_CBLK],A
F4/95: A007     	STORE	[BLK+1],A
F4/96: 30FA     	LOADI	A,ABM_B
F4/97: 389C     	LOADI	C,@+5
F4/98: BB00     	STOREF	[D],C
F4/99: 34FC     	LOADI	B,BLK0_B
F4/9A: 388F     	LOADI	C,BLKREAD
F4/9B: FF66     	JUMP	INDIR
F4/9D:          	
F4/9C:          	; INIT SEARCH
F4/9C: 3000     	LOADI	A,0
F4/9D: 34FA     	LOADI	B,ABM_B
F4/9F:          	
F4/9E:          	; SEARCH THE BITMAP
F4/9E: A024     1:	STORE	[AB_CPNT],A
F4/9F: A423     	STORE	[AB_BANK],B
F4/A0: A480     	STORE	[DBANK],B
F4/A1: 9800     	LOADF	C,[A]
F4/A2: 34FF     	LOADI	B,WORK_B
F4/A3: A480     	STORE	[DBANK],B
F4/A5:          	
F4/A4:          	; GET BEHAVIOR
F4/A4: 8001     	LOAD	A,[M1]
F4/A5: 5000     	ADDI	A,0
F4/A6: F627     	BRZ	7F
F4/A7: F52A     	BRNN	8F
F4/A9:          	
F4/A8:          	; COUNT BITS IN C
F4/A8: 3000     	LOADI	A,0
F4/A9: A080     	STORE	[DBANK],A
F4/AA: 3408     	LOADI	B,8
F4/AC:          	
F4/AB:          	; KEEP POPPING BITS OFF OF C TILL NONE REMAIN
F4/AB: 4A00     2:	SHIFTL	C
F4/AC: F001     	BRC	3F
F4/AE:          	
F4/AD:          	; ADD 1 TO COUNT
F4/AD: 5001     	ADDI	A,1
F4/AF:          	
F4/AE:          	; ARE WE DONE?
F4/AE: 7401     3:	SUBI	B,1
F4/AF: F7FB     	BRNZ	2B
F4/B1:          	
F4/B0:          	; ADD A TO BIT COUNTER
F4/B0: 846F     	LOAD	B,[BD_FREE+1]
F4/B1: 4400     	ADD	B,A
F4/B2: A46F     	STORE	[BD_FREE+1],B
F4/B3: F103     	BRNC	4F
F4/B4: 846E     	LOAD	B,[BD_FREE]
F4/B5: 5401     	ADDI	B,1
F4/B6: A46E     	STORE	[BD_FREE],B
F4/B8:          	
F4/B7:          	; DONE, BACK TO THE WORK BANK
F4/B7: 30FF     4:	LOADI	A,WORK_B
F4/B8: A080     	STORE	[DBANK],A
F4/BA:          	
F4/B9:          	; GET NEXT CHUNK
F4/B9: 8024     6:	LOAD	A,[AB_CPNT]
F4/BA: 8423     	LOAD	B,[AB_BANK]
F4/BB: 5001     	ADDI	A,1
F4/BC: F5E1     	BRNN	1B
F4/BD: 3000     	LOADI	A,0
F4/BE: 5401     	ADDI	B,1
F4/BF: 38FE     	LOADI	C,ABM_B+4
F4/C0: D600     	CMP	B,C
F4/C1: F7DC     	BRNZ	1B
F4/C3:          	
F4/C2:          	; READ THE NEXT BLOCK
F4/C2: 8021     	LOAD	A,[AB_CBLK]
F4/C3: 5001     	ADDI	A,1
F4/C4: 3411     	LOADI	B,17
F4/C5: D100     	CMP	A,B
F4/C6: F7CD     	BRNZ	0B
F4/C8:          	
F4/C7:          	; WE DIDN'T FIND IT
F4/C7:          	; OR WE ARE JUST DONE COUNTING
F4/C7:          	; COULD BE EITHER
F4/C7: 8401     	LOAD	B,[M1]
F4/C8: 30FF     	LOADI	A,0xFF
F4/C9: 5400     	ADDI	B,0
F4/CA: F50A     	BRNN	9F	; NOPE, RIP :(
F4/CC:          	
F4/CB:          	; YAY, LETS DO IT AGAIN
F4/CB: 3000     	LOADI	A,0
F4/CC: 5C02     	ADDI	D,2
F4/CD: FFB2     	JUMP	INDEXA
F4/CF:          	
F4/CE:          	; CHECK TO SEE IF CHUNK HAS AN EMPTY BLOCK
F4/CE: 5801     7:	ADDI	C,1
F4/CF: F6E9     	BRZ	6B
F4/D0: 3000     	LOADI	A,0
F4/D1: FF03     	JUMP	9F
F4/D3:          
F4/D2:          	; CHECK TO SEE IF CHUNK HAS A FILLED BLOCK
F4/D2: 5800     8:	ADDI	C,0
F4/D3: F6E5     	BRZ	6B
F4/D4: 3000     	LOADI	A,0
F4/D6:          
F4/D5:          	; RESTORE STACK
F4/D5: 5C02     9:	ADDI	D,2
F4/D7:          
F4/D6: 34FF     AL1DONE:LOADI	B,WORK_B
F4/D7: A480     	STORE	[DBANK],B
F4/D8: FF2A     	JUMP	IRET
F4/DA:          
F4/D9:          	; BANK IS DONE, MOVE ON TO THE NEXT
F4/D9:          BI	= BI-1
F4/D9:          .BANK BI
F3/80:          AL2_B	= BI
F3/80:          .TEXT
F3/80:          
F3/80:          	; SHADOW OF ALLOC
F3/80: 7C02     ALLOCA:	SUBI	D,2
F3/82:          
F3/81:          	; START SEARCH FOR AN EMPTY BIT
F3/81: 8423     0:	LOAD	B,[AB_BANK]
F3/82: 8824     	LOAD	C,[AB_CPNT]
F3/83: AC01     	STORE	[M1],D
F3/85:          
F3/84:          	; SEARCH MEMORY BANK
F3/84: A480     1:	STORE	[DBANK],B
F3/86:          
F3/85:          	; CHECK BYTE
F3/85: 9200     2:	LOADF	A,[C]
F3/86: 5001     	ADDI	A,1
F3/87: F715     	BRNZ	3F
F3/88: 5801     	ADDI	C,1
F3/89: F5FB     	BRNN	2B
F3/8B:          	
F3/8A:          	; MOVE ON TO NEXT BANK
F3/8A: 5401     	ADDI	B,1
F3/8B: 38FE     	LOADI	C,ABM_B+4
F3/8C: D600     	CMP	B,C
F3/8D: 3800     	LOADI	C,0
F3/8E: F7F5     	BRNZ	1B
F3/90:          	
F3/8F:          	; AT THIS POINT, JUST RE-INDEX
F3/8F: 30FF     	LOADI	A,WORK_B
F3/90: A080     	STORE	[DBANK],A
F3/91: 3000     	LOADI	A,0
F3/92: 38F3     	LOADI	C,BI
F3/93: BB01     	STOREF	[D+1],C
F3/94: 3899     	LOADI	C,@+5
F3/95: BB00     	STOREF	[D],C
F3/96: 34F5     	LOADI	B,AL0_B
F3/97: 38B5     	LOADI	C,INDEX
F3/98: FF69     	JUMP	INDIR
F3/99: AC01     	STORE	[M1],D
F3/9B:          	
F3/9A:          	; DID IT WORK?
F3/9A: 5000     	ADDI	A,0
F3/9B: F730     	BRNZ	9F
F3/9C: FFE4     	JUMP	0B
F3/9E:          
F3/9D:          	; WE FOUND ONE
F3/9D: 7001     3:	SUBI	A,1
F3/9E: 3CFF     	LOADI	D,WORK_B
F3/9F: AC80     	STORE	[DBANK],D
F3/A1:          	
F3/A0:          	; SAVE BANK AND CPNT
F3/A0: A423     	STORE	[AB_BANK],B
F3/A1: A824     	STORE	[AB_CPNT],C
F3/A3:          	
F3/A2:          	; GET THE BIT #
F3/A2: 3C00     	LOADI	D,0
F3/A3: C100     4:	SHIFTR	A
F3/A4: F102     	BRNC	4F
F3/A5: 5C01     	ADDI	D,1
F3/A6: FFFC     	JUMP	4B
F3/A8:          
F3/A7:          	; STORE IT AND THEN MASK THE ENTRY IN THE ABM
F3/A7: AC00     4:	STORE	[M0],D
F3/A8: 3001     	LOADI	A,1
F3/A9: 7C01     5:	SUBI	D,1
F3/AA: F102     	BRNC	6F
F3/AB: 4000     	SHIFTL	A
F3/AC: FFFC     	JUMP	5B
F3/AD: A480     6:	STORE	[DBANK],B
F3/AE: 9E00     	LOADF	D,[C]
F3/AF: 4C00     	ADD	D,A
F3/B0: BE00     	STOREF	[C],D
F3/B1: 30FF     	LOADI	A,WORK_B
F3/B2: A080     	STORE	[DBANK],A
F3/B4:          	
F3/B3:          	; SET ABM DIRTY FLAG
F3/B3: 30FF     	LOADI	A,0XFF
F3/B4: A022     	STORE	[AB_DRTY],A
F3/B6:          	
F3/B5:          	; CALCULATE WHAT BLOCK # THAT WE JUST ALLOCATED
F3/B5: 8021     	LOAD	A,[AB_CBLK]
F3/B6: 7001     	SUBI	A,1
F3/B7: 4000     	SHIFTL	A
F3/B8: 4000     	SHIFTL	A
F3/B9: 4000     	SHIFTL	A
F3/BA: 4000     	SHIFTL	A
F3/BB: 74FA     	SUBI	B,ABM_B
F3/BC: 4A00     	SHIFTL	C
F3/BD: 4500     	SHIFTL	B
F3/BE: 4A00     	SHIFTL	C
F3/BF: F101     	BRNC	0F
F3/C0: 5401     	ADDI	B,1
F3/C1: 4500     0:	SHIFTL	B
F3/C2: 4A00     	SHIFTL	C
F3/C3: F101     	BRNC	1F
F3/C4: 5401     	ADDI	B,1
F3/C5: 4400     1:	ADD	B,A
F3/C6: 8000     	LOAD	A,[M0]
F3/C7: 4800     	ADD	C,A
F3/C9:          	
F3/C8:          	; SAVE IN [BLK]
F3/C8: 3000     	LOADI	A,0
F3/C9: A406     	STORE	[BLK],B
F3/CA: A807     	STORE	[BLK+1],C
F3/CC:          	
F3/CB:          	; RESTORE THE STACK
F3/CB: 8C01     	LOAD	D,[M1]
F3/CC: 5C02     9:	ADDI	D,2
F3/CE:          
F3/CD: 34FF     AL2DONE:LOADI	B,WORK_B
F3/CE: A480     	STORE	[DBANK],B
F3/CF: FF33     	JUMP	IRET
F3/D1:          
F3/D0:          	; BANK IS DONE, MOVE ON TO THE NEXT
F3/D0:          BI	= BI-1
F3/D0:          .BANK BI
F2/80:          AL3_B	= BI
F2/80:          .TEXT
F2/80:          
F2/80:          	; SHADOW OF FREE
F2/80: 7C02     FREEA:	SUBI	D,2
F2/82:          
F2/81:          	; START BY MAKING SURE AB_CBLK IS CORRECT
F2/81: 8026     0:	LOAD	A,[AB_FREE]
F2/82: 8421     	LOAD	B,[AB_CBLK]
F2/83: C100     	SHIFTR	A
F2/84: C100     	SHIFTR	A
F2/85: C100     	SHIFTR	A
F2/86: C100     	SHIFTR	A
F2/87: 5001     	ADDI	A,1
F2/88: D100     	CMP	A,B
F2/89: F613     	BRZ	1F
F2/8B:          	
F2/8A:          	; NOPE, LET'S FIX THAT
F2/8A:          	; START BY FLUSHING
F2/8A: A001     	STORE	[M1],A
F2/8B: 38F2     	LOADI	C,BI
F2/8C: BB01     	STOREF	[D+1],C
F2/8D: 3892     	LOADI	C,@+5
F2/8E: BB00     	STOREF	[D],C
F2/8F: 34F5     	LOADI	B,AL0_B
F2/90: 3880     	LOADI	C,FLUSH
F2/91: FF70     	JUMP	INDIR
F2/93:          	
F2/92:          	; READ THE CORRECT AB_CBLK
F2/92: 8001     	LOAD	A,[M1]
F2/93: A007     	STORE	[BLK+1],A
F2/94: A021     	STORE	[AB_CBLK],A
F2/95: 3000     	LOADI	A,0
F2/96: A006     	STORE	[BLK],A
F2/97: 30FA     	LOADI	A,ABM_B
F2/98: 3881     	LOADI	C,0B
F2/99: BB00     	STOREF	[D],C
F2/9A: 34FC     	LOADI	B,BLK0_B
F2/9B: 388F     	LOADI	C,BLKREAD
F2/9C: FF65     	JUMP	INDIR
F2/9E:          	
F2/9D:          	; ALL GOOD, NOW LETS GET THE BANK / POINTER / BIT
F2/9D: AC01     1:	STORE	[M1],D
F2/9E: 8026     	LOAD	A,[AB_FREE]
F2/9F: 8427     	LOAD	B,[AB_FREE+1]
F2/A1:          	
F2/A0:          	; FIRST GET THE BIT
F2/A0: 3800     	LOADI	C,0
F2/A1: 3C03     	LOADI	D,3
F2/A2: C900     0:	SHIFTR	C
F2/A3: C500     	SHIFTR	B
F2/A4: F101     	BRNC	1F
F2/A5: 5804     	ADDI	C,0X04
F2/A6: C100     1:	SHIFTR	A
F2/A7: F101     	BRNC	2F
F2/A8: 5480     	ADDI	B,0X80
F2/A9: 7C01     2:	SUBI	D,1
F2/AA: F7F7     	BRNZ	0B
F2/AB: A825     	STORE	[AB_BIT],C
F2/AD:          	
F2/AC:          	; THEN GET THE POINTER
F2/AC: 3800     	LOADI	C,0
F2/AD: 3C07     	LOADI	D,7
F2/AE: C900     0:	SHIFTR	C
F2/AF: C500     	SHIFTR	B
F2/B0: F101     	BRNC	1F
F2/B1: 5840     	ADDI	C,0X40
F2/B2: C100     1:	SHIFTR	A
F2/B3: F101     	BRNC	2F
F2/B4: 5480     	ADDI	B,0X80
F2/B5: 7C01     2:	SUBI	D,1
F2/B6: F7F7     	BRNZ	0B
F2/B7: A824     	STORE	[AB_CPNT],C
F2/B9:          	
F2/B8:          	; WE SHOULD BE LEFT WITH THE CORRECT BANK TOO
F2/B8: 54FA     	ADDI	B,ABM_B
F2/B9: A423     	STORE	[AB_BANK],B
F2/BB:          	
F2/BA:          	; LETS GO MAKE SURE THAT WE CAN ACTUALLY FREE THIS BLOCK
F2/BA: 8025     	LOAD	A,[AB_BIT]
F2/BB: A480     	STORE	[DBANK],B
F2/BC: 9E00     	LOADF	D,[C]
F2/BD: 7001     0:	SUBI	A,1
F2/BE: F102     	BRNC	1F
F2/BF: CD00     	SHIFTR	D
F2/C0: FFFC     	JUMP	0B
F2/C1: CD00     1:	SHIFTR	D
F2/C2: 3CFF     	LOADI	D,WORK_B
F2/C3: AC80     	STORE	[DBANK],D
F2/C5:          
F2/C4:          	; IF IT'S ZERO, WE CAN EXIT RIGHT NOW
F2/C4: F10E     	BRNC	9F
F2/C6:          	
F2/C5:          	; SET ABM DIRTY FLAG
F2/C5: 30FF     	LOADI	A,0XFF
F2/C6: A022     	STORE	[AB_DRTY],A
F2/C8:          	
F2/C7:          	; ALRIGHT, LETS GO DEALLOCATE IT
F2/C7: 8025     	LOAD	A,[AB_BIT]
F2/C8: 3C01     	LOADI	D,1
F2/C9: 7001     0:	SUBI	A,1
F2/CA: F102     	BRNC	1F
F2/CB: 4F00     	SHIFTL	D
F2/CC: FFFC     	JUMP	0B
F2/CD: A480     1:	STORE	[DBANK],B
F2/CE: 9200     	LOADF	A,[C]
F2/CF: 6300     	SUB	A,D
F2/D0: B200     	STOREF	[C],A
F2/D1: 30FF     	LOADI	A,WORK_B
F2/D2: A080     	STORE	[DBANK],A
F2/D4:          
F2/D3:          	; RESTORE THE STACK
F2/D3: 8C01     9:	LOAD	D,[M1]
F2/D4: 5C02     	ADDI	D,2
F2/D6:          
F2/D5: 34FF     AL3DONE:LOADI	B,WORK_B
F2/D6: A480     	STORE	[DBANK],B
F2/D7: FF2B     	JUMP	IRET
F2/D9:          	
F2/D8:          	; BANK IS DONE, MOVE ON TO THE NEXT
F2/D8:          BI	= BI-1
F2/D8:          .BANK BI
F1/80:          AL4_B	= BI
F1/80:          .TEXT
F1/80:          
F1/80:          	; SHADOW OF FFREE
F1/80: 7C02     FFREEA:	SUBI	D,2
F1/82:          
F1/81:          	; SET RETURN BANK
F1/81: 38F1     	LOADI	C,BI
F1/82: BB01     	STOREF	[D+1],C
F1/84:          
F1/83:          	; START BY FREEING ALL FILE CONTENT BLOCKS IN BTAB
F1/83: 801A     0:	LOAD	A,[OF_SIZE+1]
F1/84: 7001     	SUBI	A,1
F1/85: A01A     	STORE	[OF_SIZE+1],A
F1/86: F004     	BRC	1F
F1/87: 8019     	LOAD	A,[OF_SIZE]
F1/88: 7001     	SUBI	A,1
F1/89: A019     	STORE	[OF_SIZE],A
F1/8A: F117     	BRNC	4F
F1/8C:          
F1/8B:          	; FREE BLOCK POINTED TO BY [OF_SIZE]
F1/8B: 801A     1:	LOAD	A,[OF_SIZE+1]
F1/8C: 34F6     	LOADI	B,FBT_B
F1/8D: 4000     	SHIFTL	A
F1/8E: F101     	BRNC	2F
F1/8F: 5402     	ADDI	B,2
F1/90: 4000     2:	SHIFTL	A
F1/91: F101     	BRNC	3F
F1/92: 5401     	ADDI	B,1
F1/93: C100     3:	SHIFTR	A
F1/95:          	
F1/94:          	; GET THE BLOCK
F1/94: AC00     	STORE	[M0],D
F1/95: A480     	STORE	[DBANK],B
F1/96: 9800     	LOADF	C,[A+0]
F1/97: 9C01     	LOADF	D,[A+1]
F1/98: 34FF     	LOADI	B,WORK_B
F1/99: A480     	STORE	[DBANK],B
F1/9A: A826     	STORE	[AB_FREE],C
F1/9B: AC27     	STORE	[AB_FREE+1],D	
F1/9C: 8C00     	LOAD	D,[M0]
F1/9E:          	
F1/9D:          	; CALL FREE
F1/9D: 3883     	LOADI	C,0B
F1/9E: BB00     	STOREF	[D],C
F1/9F: 34F5     	LOADI	B,AL0_B
F1/A0: 38BB     	LOADI	C,FREE
F1/A1: FF60     	JUMP	INDIR
F1/A3:          
F1/A2:          	; NEXT, WE FREE THE BLOCK TABLE ITSELF
F1/A2: 8017     4:	LOAD	A,[OF_BTAB]
F1/A3: 8418     	LOAD	B,[OF_BTAB+1]
F1/A4: A026     	STORE	[AB_FREE],A
F1/A5: A427     	STORE	[AB_FREE+1],B	
F1/A7:          	
F1/A6:          	; CALL FREE
F1/A6: 38AB     	LOADI	C,@+5
F1/A7: BB00     	STOREF	[D],C
F1/A8: 34F5     	LOADI	B,AL0_B
F1/A9: 38BB     	LOADI	C,FREE
F1/AA: FF57     	JUMP	INDIR
F1/AC:          	
F1/AB:          	; FINALLY, WE STRIKE OUT THE FILE RECORD
F1/AB: 8014     	LOAD	A,[SRCH_RP]
F1/AC: 8413     	LOAD	B,[SRCH_BK]
F1/AD: 3800     	LOADI	C,0
F1/AE: A480     	STORE	[DBANK],B
F1/AF: B800     	STOREF	[A],C
F1/B0: 34FF     	LOADI	B,WORK_B
F1/B1: A480     	STORE	[DBANK],B
F1/B3:          	
F1/B2:          	; RESET OPEN FILE FLAG
F1/B2: 3000     	LOADI	A,0
F1/B3: A016     	STORE	[OF_OPEN],A
F1/B5:          
F1/B4:          	; SET THE FILE DIRTY FLAG
F1/B4: 30FF     	LOADI	A,0XFF
F1/B5: A01B     	STORE	[OF_DRTY],A
F1/B7:          
F1/B6:          	; RESTORE THE STACK
F1/B6: 5C02     	ADDI	D,2
F1/B8:          	
F1/B7:          	; DO ONE FINAL FLUSH
F1/B7: 34F5     	LOADI	B,AL0_B
F1/B8: 3880     	LOADI	C,FLUSH
F1/B9: FF48     	JUMP	INDIR
F1/BB:          	
F1/BA:          	; BANK IS DONE, MOVE ON TO THE NEXT
F1/BA:          BI	= BI-1
F1/BA:          .BANK BI
F0/80:          AL5_B	= BI
F0/80:          .TEXT
F0/80:          
F0/80:          	; SHADOW OF FALLOC
F0/80: 7C02     FALLOCA:SUBI	D,2
F0/82:          	
F0/81:          	; LOOK FOR AN EMPTY FILE RECORD
F0/81: 3000     	LOADI	A,0
F0/82: 38F0     	LOADI	C,BI
F0/83: BB01     	STOREF	[D+1],C
F0/84: 3889     	LOADI	C,@+5
F0/85: BB00     	STOREF	[D],C
F0/86: 34FB     	LOADI	B,FS0_B
F0/87: 38D7     	LOADI	C,FEMPTY
F0/88: FF79     	JUMP	INDIR
F0/89: 5000     	ADDI	A,0
F0/8A: F72B     	BRNZ	9F
F0/8C:          	
F0/8B:          	; LETS ALLOCATE A BLOCK FOR THE FBT NOW
F0/8B: 3890     	LOADI	C,@+5
F0/8C: BB00     	STOREF	[D],C
F0/8D: 34F5     	LOADI	B,AL0_B
F0/8E: 38B8     	LOADI	C,ALLOC
F0/8F: FF72     	JUMP	INDIR
F0/90: 5000     	ADDI	A,0
F0/91: F724     	BRNZ	9F
F0/93:          	
F0/92:          	; COPY FBT ADDRESS INTO RECORD
F0/92: AC00     	STORE	[M0],D
F0/93: 8006     	LOAD	A,[BLK]
F0/94: 8407     	LOAD	B,[BLK+1]
F0/95: 8814     	LOAD	C,[SRCH_RP]
F0/96: 8C13     	LOAD	D,[SRCH_BK]
F0/97: AC80     	STORE	[DBANK],D
F0/98: B20D     	STOREF	[C+13],A
F0/99: B60E     	STOREF	[C+14],B
F0/9A: 3000     	LOADI	A,0
F0/9B: B20A     	STOREF	[C+10],A	; RESET FILE SIZE WHILE WE ARE HERE
F0/9C: B20B     	STOREF	[C+11],A
F0/9D: 30FF     	LOADI	A,WORK_B
F0/9E: A080     	STORE	[DBANK],A
F0/A0:          	
F0/9F:          	; COPY PATTERN INTO FILE RECORD
F0/9F: 3C09     	LOADI	D,9
F0/A0: 3808     0:	LOADI	C,MATCH
F0/A1: 8414     	LOAD	B,[SRCH_RP]
F0/A2: 8013     	LOAD	A,[SRCH_BK]
F0/A3: 4B00     	ADD	C,D
F0/A4: 9A00     	LOADF	C,[C]
F0/A5: A080     	STORE	[DBANK],A
F0/A6: 4700     	ADD	B,D
F0/A7: B900     	STOREF	[B],C
F0/A8: 30FF     	LOADI	A,WORK_B
F0/A9: A080     	STORE	[DBANK],A
F0/AA: 7C01     	SUBI	D,1
F0/AB: F101     	BRNC	1F
F0/AC: FFF3     	JUMP	0B
F0/AE:          	
F0/AD:          	; ATTEMPT TO OPEN FILE
F0/AD: 8C00     1:	LOAD	D,[M0]
F0/AE: 38B3     	LOADI	C,@+5
F0/AF: BB00     	STOREF	[D],C
F0/B0: 34FB     	LOADI	B,FS0_B
F0/B1: 38E3     	LOADI	C,FOPEN
F0/B2: FF4F     	JUMP	INDIR
F0/B4:          	
F0/B3:          	; SET FILE AS DIRTY
F0/B3: 30FF     	LOADI	A,0XFF
F0/B4: A01B     	STORE	[OF_DRTY],A
F0/B5: 3000     	LOADI	A,0
F0/B7:          
F0/B6:          	; RESTORE STACK AND EXIT
F0/B6: 5C02     9:	ADDI	D,2
F0/B7: 34FF     	LOADI	B,WORK_B
F0/B8: A480     	STORE	[DBANK],B
F0/B9: FF49     	JUMP	IRET
F0/BB:          
F0/BA:          	; BANK IS DONE, MOVE ON TO THE NEXT
F0/BA:          BI	= BI-1
F0/BA:          ; END.S
F0/BA:          ; DEFINES SYMBOLS BASED ON ASSEMBLY STATE
F0/BA:          
F0/BA:          MAX_IB	= BI
