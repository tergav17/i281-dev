00/00:          ; COMMON.S
01/80:          ; SYSTEM COMMON DEFINITIONS
01/80:          ; GAVIN TERSTEEG, 2024
01/80:          ; SDMAY24-14
01/80:          
01/80:          ; BIOS CALLS
01/80:          BOOT	= 0
01/80:          ALTBOOT = 1
01/80:          INDIR	= 2
01/80:          IRET	= 3
01/80:          SYSCALL	= 4
01/80:          SYSJUMP	= 5
01/80:          PRGM	= 6
01/80:          IWRITE	= 7
01/80:          ZSTART	= 8
01/80:          
01/80:          ; DEFINES
01/80:          HALT	= 0X7F
01/80:          
01/80:          DBANK	= 0X80		; DATA BANK ADDRESS
01/80:          
01/80:          UART	= 0X90		; UART BASE ADDRESS
01/80:          UART_RH	= UART+0X00	; UART READ HOLDING
01/80:          UART_TH	= UART+0X00	; UART TRANSMIT HOLDING
01/80:          UART_DL = UART+0X00	; UART DIVISOR LOW
01/80:          UART_DH = UART+0X01	; UART DIVISOR HIGH
01/80:          UART_FC	= UART+0X02	; UART FIFO CONTROL
01/80:          UART_LC = UART+0X03	; UART LINE CONTROL
01/80:          UART_LS	= UART+0X05	; UART LINE STATUS
01/80:          SCRATCH	= UART+0X07	; SCRATCH BYTE ADDRESS
01/80:          
01/80:          CF	= 0XA0		; COMPACT FLASH BASE ADDRESS
01/80:          CF_DATA	= CF+0X00	; CF DATA
01/80:          CF_ERR	= CF+0X01	; CF ERROR
01/80:          CF_FEAT	= CF+0x01	; CF FEATURES
01/80:          CF_CNT	= CF+0X02	; CF SECTOR COUNT
01/80:          CF_LBA0	= CF+0X03	; CF LBA BITS 0-7
01/80:          CF_LBA1	= CF+0X04	; CF LBA BITS 8-15
01/80:          CF_LBA2	= CF+0X05	; CF LBA BITS 16-23
01/80:          CF_LBA3	= CF+0X06	; CF LBA BITS 24-27
01/80:          CF_STAT	= CF+0X07	; CF STATUS
01/80:          CF_CMD	= CF+0X07	; CF COMMAND
01/80:          
01/80:          CF_8BIT	= 0X01		; 8 BIT MODE
01/80:          CF_DCAC	= 0X82		; DISABLE CACHE
01/80:          
01/80:          CF_READ	= 0X20		; READ COMMAND
01/80:          CF_WRIT = 0X30		; WRITE COMMAND
01/80:          CF_SETF	= 0XEF		; SET FEATURE COMMAND
01/80:          
01/80:          
01/80:          ; LOW.S
01/80:          ; LOW MEMORY OF THE DOS/281 SYSTEM
01/80:          ; HANDLES SYSCALLS
01/80:          ; GAVIN TERSTEEG, 2024
01/80:          ; SDMAY24-14
01/80:          
01/80:          ; EQUATES
01/80:          KMEM_ST	= 0X78	; KERNEL MEMORY STACK SAVE SLOT
01/80:          ARG_BNK = 0x6C	; ARGUMENT BANK
01/80:          DFT_USR	= 0X6B	; DEFAULT USER AREA
01/80:          
01/80:          .BANK 0
00/80:          .TEXT
00/80:          
00/80:          	; JUMP STUB FOR RECEIVING SYSCALLS
00/80: FF03     	JUMP	SYSPREP
00/82:          
00/81:          
00/81:          	; ENTRY POINT FOR THE KERENL AFTER THE 2ND STAGE BOOT
00/81:          	; JUST JUMP DIRECTLY TO THE 'INIT' ROUTINE IN CORE 
00/81: 34FF     ENTRY:	LOADI	B,CORE0_B
00/82: 3880     	LOADI	C,INIT
00/83: FF7E     	JUMP	INDIR
00/85:          	
00/84:          	; SYSTEM CALL HANDLER PREPARATION
00/84:          	; SAVE THE PREVIOUS STACK, AND SWITCH TO THE KERNEL STACK
00/84:          	; THEN MOVE TO THE SYSTEM CALL HANDLER
00/84: AC78     SYSPREP:STORE	[KMEM_ST],D
00/86:          	
00/85:          	; GET THE ARGUMENT BANK
00/85: 8C6C     	LOAD	D,[ARG_BNK]
00/87:          	
00/86:          	; MOVE TO KERNEL WORK AREA
00/86: 38FF     	LOADI	C,WORK_B
00/87: A880     	STORE	[DBANK],C
00/89:          	
00/88:          	; SET THE SOURCE BANK
00/88: AC04     	STORE	[SRC_BNK],D
00/8A:          	
00/89:          	; SET UP KERNEL STACK
00/89: 3C7E     0:	LOADI	D,0X80-2
00/8B:          	
00/8A:          	; SAVE PLACE RETURN ADDRESS INTO THE STACK
00/8A: 3892     	LOADI	C,SYSDONE
00/8B: BB00     	STOREF	[D],C
00/8C: 3800     	LOADI	C,0
00/8D: BB01     	STOREF	[D+1],C
00/8F:          	
00/8E:          	; STICK THE CURRENT SYSTEM CALL IN M0
00/8E: A400     	STORE	[M0],B
00/90:          	
00/8F:          	; HANDLE THE SYSTEM CALL
00/8F: 34F6     	LOADI	B,SYS0_B
00/90: 3880     	LOADI	C,SYSHNDL
00/91: FF70     	JUMP	INDIR
00/93:          	
00/92:          	
00/92:          	; SYSTEM CALL DONE
00/92: 3800     SYSDONE:LOADI	C,0
00/93: A880     	STORE	[DBANK],C
00/95:          	
00/94:          	; RESTORE USER STACK
00/94: 8C78     	LOAD	D,[KMEM_ST]
00/96:          	
00/95:          	; RETURN
00/95: FF6D     	JUMP	IRET
00/97:          	
00/96:          .DATA
00/96:          
00/00:          	; SET UP ZERO PAGE
00/00:          .ORG	0X6B
00/6B: 30       .DEF BYTE	'0'
00/6C:          
00/6C:          
00/6C:          
00/6C:          	; SET UP UPPER BANK STUFF
00/6C:          	; THE 'B_' SYMBOLS WILL BE USED TO KEEP TRACK OF WHAT BANKS ARE
00/6C:          	; IN USE
00/6C:          	; 'BI" WILL BE USED FOR INSTRUCTION BANKS
00/6C:          	; 'BD' WILL BE USED FOR DATA BANKS
00/6C:          	; AT THE END OF ASSEMBLY, THESE VALUES WILL BE USED TO DETERMINE
00/6C:          	; HOW MUCH FREE MEMORY USER PROGRAMS HAVE
00/6C:          BI	= 255
00/6C:          BD	= 255
00/6C:          
00/6C:          
00/6C:          ; CORE.S
00/6C:          ; MAIN 'GUTS' OF DOS/281
00/6C:          ; GAVIN TERSTEEG, 2024
00/6C:          ; SDMAY24-14
00/6C:          
00/6C:          .BANK BI
FF/00:          CORE0_B	= BI
FF/00:          .TEXT
FF/00:          
FF/80:          	; SET UP SYSTEM FOR OPERATION
FF/80:          	; BRING UP THE WORK BANK
FF/80: 30FF     INIT:	LOADI	A,WORK_B
FF/81: A080     	STORE	[DBANK],A
FF/83:          	
FF/82:          	; SET THE STACK POINTER TO THE TOP OF THE STACK
FF/82: 3C7E     	LOADI	D,0X80-2
FF/84:          
FF/83:          	; INITALIZE THE TTY DRIVER
FF/83: 38FF     	LOADI	C,BI
FF/84: BB01     	STOREF	[D+1],C
FF/85: 388A     	LOADI	C,@+5
FF/86: BB00     	STOREF	[D],C
FF/88:          	
FF/87: 34FC     	LOADI	B,TTY0_B
FF/88: 3880     	LOADI	C,TTYINIT
FF/89: FF78     	JUMP	INDIR
FF/8B:          	
FF/8A:          	; INITALIZE THE PRINTER DRIVER
FF/8A: 388F     	LOADI	C,@+5
FF/8B: BB00     	STOREF	[D],C
FF/8D:          	
FF/8C: 34FA     	LOADI	B,PRT0_B
FF/8D: 3880     	LOADI	C,PRTINIT
FF/8E: FF73     	JUMP	INDIR
FF/90:          	
FF/8F:          	; SEND OUT THE 'HELLO' SPLASH
FF/8F: 38FF     	LOADI	C,WORK_B
FF/90: A804     	STORE	[SRC_BNK],C
FF/91: 3060     	LOADI	A,S_HELLO
FF/93:          	
FF/92: 3897     	LOADI	C,@+5
FF/93: BB00     	STOREF	[D],C
FF/95:          	
FF/94: 34FC     	LOADI	B,TTY0_B
FF/95: 3892     	LOADI	C,TTYPUTS
FF/96: FF6B     	JUMP	INDIR
FF/98:          	
FF/97:          	; INITALIZE THE BLOCK DRIVER
FF/97: 389C     	LOADI	C,@+5
FF/98: BB00     	STOREF	[D],C
FF/9A:          	
FF/99: 34FB     	LOADI	B,BLK0_B
FF/9A: 3880     	LOADI	C,BLKINIT
FF/9B: FF66     	JUMP	INDIR
FF/9D:          	
FF/9C:          	; INDEX ALLOCATION BITMAP
FF/9C: 3000     	LOADI	A,0X00
FF/9D: 38A2     	LOADI	C,@+5
FF/9E: BB00     	STOREF	[D],C
FF/A0:          	
FF/9F: 34F3     	LOADI	B,AL0_B
FF/A0: 38B5     	LOADI	C,INDEX
FF/A1: FF60     	JUMP	INDIR
FF/A3:          	
FF/A2:          	; CHECK AUTO MODE
FF/A2: 34FD     DOCMD:	LOADI	B,AUTO_B
FF/A3: A480     	STORE	[DBANK],B
FF/A4: 8000     	LOAD	A,[AU_RUN]
FF/A5: 34FF     	LOADI	B,WORK_B
FF/A6: A480     	STORE	[DBANK],B
FF/A7: 5000     	ADDI	A,0
FF/A8: F613     	BRZ	PROMPT
FF/AA:          	
FF/A9:          	; LOOK FOR A CTRL+C
FF/A9: 38FF     	LOADI	C,BI
FF/AA: BB01     	STOREF	[D+1],C
FF/AB: 38B0     	LOADI	C,@+5
FF/AC: BB00     	STOREF	[D],C
FF/AE:          	
FF/AD: 34FC     	LOADI	B,TTY0_B
FF/AE: 38E8     	LOADI	C,TTYSTAT
FF/AF: FF52     	JUMP	INDIR
FF/B0: 5000     	ADDI	A,0
FF/B1: F607     	BRZ	1F
FF/B3:          	
FF/B2: 38B7     	LOADI	C,@+5
FF/B3: BB00     	STOREF	[D],C
FF/B5:          	
FF/B4: 34FC     	LOADI	B,TTY0_B
FF/B5: 389F     	LOADI	C,TTYGETC
FF/B6: FF4B     	JUMP	INDIR
FF/B7: 7003     	SUBI	A,0X03	; CTRL+C
FF/B8: F603     	BRZ	PROMPT
FF/BA:          	
FF/B9:          	; GO READ FROM THE AUTO FILE
FF/B9: 34FD     1:	LOADI	B,CORE2_B
FF/BA: 3880     	LOADI	C,GETAUTO
FF/BB: FF46     	JUMP	INDIR
FF/BD:          	
FF/BC:          	; DOT PROMPT
FF/BC: 301C     PROMPT: LOADI	A,ST_PRMT
FF/BD: 38FF     CPRMPT:	LOADI	C,WORK_B	; USED FOR CUSTOM PROMPTS
FF/BE: A880     	STORE	[DBANK],C
FF/BF: A804     	STORE	[SRC_BNK],C
FF/C1:          
FF/C0: 38FF     	LOADI	C,BI
FF/C1: BB01     	STOREF	[D+1],C
FF/C2: 38C7     	LOADI	C,@+5
FF/C3: BB00     	STOREF	[D],C
FF/C5:          	
FF/C4: 34FC     	LOADI	B,TTY0_B
FF/C5: 3892     	LOADI	C,TTYPUTS
FF/C6: FF3B     	JUMP	INDIR
FF/C8:          	
FF/C7:          	; QUICKLY TURN OFF AUTO MODE
FF/C7: 3000     	LOADI	A,0
FF/C8: 34FD     	LOADI	B,AUTO_B
FF/C9: A480     	STORE	[DBANK],B
FF/CA: A000     	STORE	[AU_RUN],A
FF/CB: 34FF     	LOADI	B,WORK_B
FF/CC: A480     	STORE	[DBANK],B
FF/CE:          	
FF/CD:          	; GET AN INPUT FROM THE TERMINAL
FF/CD: 38FE     	LOADI	C,CMDL_B
FF/CE: A804     	STORE	[SRC_BNK],C
FF/D0:          	
FF/CF: 38D4     	LOADI	C,@+5
FF/D0: BB00     	STOREF	[D],C
FF/D2:          	
FF/D1: 34FC     	LOADI	B,TTY0_B
FF/D2: 38A4     	LOADI	C,TTYINPT
FF/D3: FF2E     	JUMP	INDIR
FF/D5:          	
FF/D4:          	; DO CR / LF
FF/D4: 300D     	LOADI	A,0X0D
FF/D5: 38DA     	LOADI	C,@+5
FF/D6: BB00     	STOREF	[D],C
FF/D8:          	
FF/D7: 34FC     	LOADI	B,TTY0_B
FF/D8: 388B     	LOADI	C,TTYPUTC
FF/D9: FF28     	JUMP	INDIR
FF/DB:          	
FF/DA: 300A     	LOADI	A,0X0A
FF/DB: 38E0     	LOADI	C,@+5
FF/DC: BB00     	STOREF	[D],C
FF/DE:          	
FF/DD: 34FC     	LOADI	B,TTY0_B
FF/DE: 388B     	LOADI	C,TTYPUTC
FF/DF: FF22     	JUMP	INDIR
FF/E1:          	
FF/E0:          	; NOW, EXECUTE THE COMMAND
FF/E0: 34FE     	LOADI	B,CORE1_B
FF/E1: 3880     	LOADI	C,EXEC
FF/E2: FF1F     	JUMP	INDIR
FF/E4:          
FF/E3:          	; BANK IS DONE, MOVE ON TO THE NEXT
FF/E3:          BI	= BI-1
FF/E3:          .BANK BI
FE/80:          CORE1_B	= BI
FE/80:          .TEXT
FE/80:          
FE/80:          	; ATTEMPT TO EXECUTE WHATEVER HAS BEEN PLACE IN THE CMD
FE/80:          	; BUFFER
FE/80:          	; START BY CLOSING THE FILE
FE/80: 38FE     EXEC:	LOADI	C,BI
FE/81: BB01     	STOREF	[D+1],C
FE/82: 3887     	LOADI	C,@+5
FE/83: BB00     	STOREF	[D],C
FE/85:          	
FE/84: 34F9     	LOADI	B,FS0_B
FE/85: 38E6     	LOADI	C,FCLOSE
FE/86: FF7B     	JUMP	INDIR	
FE/88:          	
FE/87:          	; SET WORKING USER AREA TO '0'
FE/87: 3030     	LOADI	A,'0'
FE/88: A008     	STORE	[WRK_USR],A
FE/8A:          
FE/89:          	; CHECK FOR "&"
FE/89: 3000     	LOADI	A,0
FE/8A: 34FE     	LOADI	B,CMDL_B
FE/8B: A480     	STORE	[DBANK],B
FE/8C: 8800     	LOAD	C,[0]
FE/8D: 34FF     	LOADI	B,WORK_B
FE/8E: A480     	STORE	[DBANK],B
FE/8F: 5800     	ADDI	C,0
FE/90: F606     	BRZ	1F
FE/91: 7826     	SUBI	C,'&'
FE/92: F701     	BRNZ	0F
FE/93: 5001     	ADDI	A,1
FE/94: A027     0:	STORE	[EX_HALT],A
FE/95: 7814     	SUBI	C,':'-'&'
FE/96: F703     	BRNZ	0F
FE/98:          	
FE/97:          	; COMMENT
FE/97: 34FF     1:	LOADI	B,CORE0_B
FE/98: 38A2     	LOADI	C,DOCMD
FE/99: FF68     	JUMP	INDIR
FE/9B:          
FE/9A:          	; ATTEMPT TO SET PARAMETERS FOR SEARCH
FE/9A: 389F     0:	LOADI	C,@+5
FE/9B: BB00     	STOREF	[D],C
FE/9D:          	
FE/9C: 34F9     	LOADI	B,FS0_B
FE/9D: 3880     	LOADI	C,SSPARAM
FE/9E: FF63     	JUMP	INDIR
FE/A0:          	
FE/9F:          	; CHECK TO MAKE SURE IT RETURNS 0XFE
FE/9F: 70FE     	SUBI	A,0XFE
FE/A0: F75B     	BRNZ	EXECERR
FE/A2:          	
FE/A1:          	; MANUALLY SET THE EXTENSION AS 'SV'
FE/A1: 3053     	LOADI	A,'S'
FE/A2: A00F     	STORE	[PATTERN+6],A
FE/A3: 3056     	LOADI	A,'V'
FE/A4: A010     	STORE	[PATTERN+7],A
FE/A6:          	
FE/A5:          	; AND SEARCH FOR IT
FE/A5: 3000     	LOADI	A,0
FE/A6: 38AB     	LOADI	C,@+5
FE/A7: BB00     	STOREF	[D],C
FE/A9:          	
FE/A8: 34F9     	LOADI	B,FS0_B
FE/A9: 38D9     	LOADI	C,FSEARCH
FE/AA: FF57     	JUMP	INDIR
FE/AC:          	
FE/AB:          	; DID IT WORK?
FE/AB: 5000     	ADDI	A,0
FE/AC: F74F     	BRNZ	EXECERR
FE/AE:          	
FE/AD:          	; NOW OPEN IT
FE/AD: 38B2     	LOADI	C,@+5
FE/AE: BB00     	STOREF	[D],C
FE/B0:          	
FE/AF: 34F9     	LOADI	B,FS0_B
FE/B0: 38E3     	LOADI	C,FOPEN
FE/B1: FF50     	JUMP	INDIR
FE/B3:          	
FE/B2:          	; RESET LOAD STATE
FE/B2: 30F1     	LOADI	A,KBUF_B
FE/B3: A004     	STORE	[SRC_BNK],A
FE/B4: 3000     	LOADI	A,0
FE/B6:          	
FE/B5:          	; READ IN THE SAV RECORD
FE/B5: A028     0:	STORE	[EX_BLK],A
FE/B6: 38BB     	LOADI	C,@+5
FE/B7: BB00     	STOREF	[D],C
FE/B9:          	
FE/B8: 34F9     	LOADI	B,FS0_B
FE/B9: 38E9     	LOADI	C,FREAD
FE/BA: FF47     	JUMP	INDIR
FE/BC:          	
FE/BB:          	; SAVE THE STACK
FE/BB: AC00     	STORE	[M0],D
FE/BD:          	
FE/BC:          	; MAKE SURE THE READ WORKED
FE/BC: 5000     	ADDI	A,0
FE/BD: F73E     	BRNZ	EXECERR
FE/BF:          	
FE/BE:          	; CHECK THAT THE RECORD IS VALID
FE/BE: 30F1     	LOADI	A,KBUF_B
FE/BF: A080     	STORE	[DBANK],A
FE/C1:          	
FE/C0:          	; LOOK FOR THE 0X0281 AT THE BEGINNING OF THE RECORD
FE/C0: 8000     	LOAD	A,[0X00]
FE/C1: 7002     	SUBI	A,0X02
FE/C2: F739     	BRNZ	EXECERR
FE/C3: 8001     	LOAD	A,[0X01]
FE/C4: 7081     	SUBI	A,0X81
FE/C5: F736     	BRNZ	EXECERR
FE/C7:          	
FE/C6:          	; GRAB THE DESTINATION SECTOR
FE/C6: 8002     	LOAD	A,[0X02]
FE/C8:          	
FE/C7:          	; NO BANK 0!
FE/C7: 5000     	ADDI	A,0
FE/C8: F633     	BRZ	EXECERR
FE/CA:          	
FE/C9:          	; MAKE SURE IT ISN'T TOO BIG TOO
FE/C9: 34ED     	LOADI	B,MAX_IB
FE/CA: D100     	CMP	A,B
FE/CB: F030     	BRAE	EXECERR
FE/CC: 34F0     	LOADI	B,MAX_DB
FE/CD: D100     	CMP	A,B
FE/CE: F02D     	BRAE	EXECERR
FE/D0:          	
FE/CF:          	; AND LOAD UP THE DATA BLOCK
FE/CF: 3800     	LOADI	C,0
FE/D0: 34F2     1:	LOADI	B,KBUF_B+1
FE/D1: A480     	STORE	[DBANK],B
FE/D2: 9600     	LOADF	B,[C]
FE/D3: A080     	STORE	[DBANK],A
FE/D4: B600     	STOREF	[C],B
FE/D5: 5801     	ADDI	C,1
FE/D6: F5F9     	BRNN	1B
FE/D8:          	
FE/D7:          	; FINALLY, LOAD UP THE ISR BLOCK
FE/D7: 34F3     	LOADI	B,KBUF_B+2
FE/D8: 3CFE     	LOADI	D,BI
FE/D9: 38DB     	LOADI	C,@+2
FE/DA: FF2B     	JUMP	PRGM
FE/DC:          	
FE/DB:          	; RESTORE THE STACK AND WORK AREA
FE/DB: 30FF     	LOADI	A,WORK_B
FE/DC: A080     	STORE	[DBANK],A
FE/DD: 8C00     	LOAD	D,[M0]
FE/DF:          	
FE/DE:          	; EITHER MOVE ON TO THE NEXT BLOCK OR EXIT
FE/DE: 8028     	LOAD	A,[EX_BLK]
FE/DF: 8419     	LOAD	B,[OF_SIZE+1]
FE/E0: 5001     	ADDI	A,1
FE/E1: D100     	CMP	A,B
FE/E2: F7D2     	BRNZ	0B
FE/E4:          	
FE/E3:          	; COMMIT TO EXECUTION
FE/E3: 8C27     	LOAD	D,[EX_HALT]
FE/E5:          	
FE/E4:          	; SET SYSTEM VARIABLES
FE/E4: 3400     	LOADI	B,0
FE/E5: A480     	STORE	[DBANK],B
FE/E6: 34ED     	LOADI	B,MAX_IB
FE/E7: A470     	STORE	[0X70],B
FE/E8: 34F0     	LOADI	B,MAX_DB
FE/E9: A471     	STORE	[0X71],B
FE/EA: 34FE     	LOADI	B,CMDL_B
FE/EB: A472     	STORE	[0X72],B
FE/EC: 34FD     	LOADI	B,AUTO_B
FE/ED: A473     	STORE	[0X73],B
FE/EF:          	
FE/EE:          	; "REFRESH" BANK 1 DISPLAY
FE/EE: 3401     	LOADI	B,1
FE/EF: A480     	STORE	[DBANK],B
FE/F0: 3407     	LOADI	B,7
FE/F1: 9100     2:	LOADF	A,[B]
FE/F2: B100     	STOREF	[B],A
FE/F3: 7401     	SUBI	B,1
FE/F4: F0FC     	BRC	2B
FE/F6:          	
FE/F5:          	; RUN THE PROGRAM
FE/F5: 7C01     	SUBI	D,1
FE/F6: 3401     	LOADI	B,1
FE/F7: 3880     	LOADI	C,0X80
FE/F8: F709     	BRNZ	INDIR
FE/FA:          	
FE/F9:          	; DO A ZSTART IF WE ARE HALTING
FE/F9: 3400     	LOADI	B,0
FE/FA: 3800     	LOADI	C,0
FE/FB: FF0C     	JUMP	ZSTART
FE/FD:          
FE/FC:          	; HANDLE ERROR IN EXEC
FE/FC: 301B     EXECERR:LOADI	A,ST_ERR
FE/FD: 34FF     	LOADI	B,CORE0_B
FE/FE: 38BD     	LOADI	C,CPRMPT
FE/FF: FF02     	JUMP	INDIR
FE/101:          	
FE/00:          	; BANK IS DONE, MOVE ON TO THE NEXT
FE/00:          BI	= BI-1
FE/00:          .BANK BI
FD/80:          CORE2_B	= BI
FD/80:          .TEXT
FD/80:          
FD/80:          
FD/80:          	; GET A LINE FROM THE AUTO FILE
FD/80: 38FD     GETAUTO:LOADI	C,BI
FD/81: BB01     	STOREF	[D+1],C
FD/82: 3887     	LOADI	C,@+5
FD/83: BB00     	STOREF	[D],C
FD/85:          	
FD/84: 34F9     	LOADI	B,FS0_B
FD/85: 38E6     	LOADI	C,FCLOSE
FD/86: FF7B     	JUMP	INDIR	
FD/88:          	
FD/87:          	; SET WORKING USER AREA TO AU_UA
FD/87: 34FD     	LOADI	B,AUTO_B
FD/88: A480     	STORE	[DBANK],B
FD/89: 8004     	LOAD	A,[AU_UA]
FD/8A: 34FF     	LOADI	B,WORK_B
FD/8B: A480     	STORE	[DBANK],B
FD/8C: A008     	STORE	[WRK_USR],A
FD/8E:          
FD/8D:          	; ATTEMPT TO SET PARAMETERS FOR SEARCH
FD/8D: 30FD     	LOADI	A,AUTO_B
FD/8E: A004     	STORE	[SRC_BNK],A
FD/8F: 3006     	LOADI	A,AU_FILE
FD/90: 3895     	LOADI	C,@+5
FD/91: BB00     	STOREF	[D],C
FD/93:          	
FD/92: 34F9     	LOADI	B,FS0_B
FD/93: 3880     	LOADI	C,SSPARAM
FD/94: FF6D     	JUMP	INDIR
FD/96:          	
FD/95:          	; CHECK TO MAKE SURE IT RETURNS 0X00
FD/95: 5000     	ADDI	A,0
FD/96: F762     	BRNZ	AUTOERR
FD/98:          	
FD/97:          	; AND SEARCH FOR IT
FD/97: 3000     	LOADI	A,0
FD/98: 389D     	LOADI	C,@+5
FD/99: BB00     	STOREF	[D],C
FD/9B:          	
FD/9A: 34F9     	LOADI	B,FS0_B
FD/9B: 38D9     	LOADI	C,FSEARCH
FD/9C: FF65     	JUMP	INDIR
FD/9E:          	
FD/9D:          	; DID IT WORK?
FD/9D: 5000     	ADDI	A,0
FD/9E: F75A     	BRNZ	AUTOERR
FD/A0:          	
FD/9F:          	; NOW OPEN IT
FD/9F: 38A4     	LOADI	C,@+5
FD/A0: BB00     	STOREF	[D],C
FD/A2:          	
FD/A1: 34F9     	LOADI	B,FS0_B
FD/A2: 38E3     	LOADI	C,FOPEN
FD/A3: FF5E     	JUMP	INDIR
FD/A5:          	
FD/A4:          	; RESET POINTER AND SOURCE BUFFER
FD/A4: 3000     	LOADI	A,0
FD/A5: A029     	STORE	[EX_PNTR],A
FD/A6: A02A     	STORE	[EX_LAST],A
FD/A7: 30F1     	LOADI	A,KBUF_B
FD/A8: A004     	STORE	[SRC_BNK],A
FD/AA:          
FD/A9:          	; GRAB THE CURRENT BLOCK
FD/A9: 34FD     0:	LOADI	B,AUTO_B
FD/AA: A480     	STORE	[DBANK],B
FD/AB: 8003     	LOAD	A,[AU_BLK]
FD/AC: 34FF     	LOADI	B,WORK_B
FD/AD: A480     	STORE	[DBANK],B
FD/AF:          	
FD/AE:          	; READ BLOCK
FD/AE: 38B3     	LOADI	C,@+5
FD/AF: BB00     	STOREF	[D],C
FD/B1:          	
FD/B0: 34F9     	LOADI	B,FS0_B
FD/B1: 38E9     	LOADI	C,FREAD
FD/B2: FF4F     	JUMP	INDIR
FD/B3: 5000     	ADDI	A,0
FD/B4: F732     	BRNZ	8F
FD/B6:          
FD/B5:          	; GET A CHARACTER
FD/B5: 38FD     	LOADI	C,AUTO_B
FD/B6: A880     	STORE	[DBANK],C
FD/B7: 8001     	LOAD	A,[AU_PNTR]
FD/B8: 8402     	LOAD	B,[AU_BANK]
FD/BA:          
FD/B9: A001     1:	STORE	[AU_PNTR],A
FD/BA: A402     	STORE	[AU_BANK],B
FD/BC:          	
FD/BB:          	; CHECK LAST
FD/BB: 38FF     	LOADI	C,WORK_B
FD/BC: A880     	STORE	[DBANK],C
FD/BD: 882A     	LOAD	C,[EX_LAST]
FD/BE: 780A     	SUBI	C,0X0A
FD/BF: F62D     	BRZ	9F
FD/C1:          
FD/C0:          	; READ IT FROM THE BLOCK
FD/C0: 38F1     	LOADI	C,KBUF_B
FD/C1: 4900     	ADD	C,B
FD/C2: A880     	STORE	[DBANK],C
FD/C3: 9000     	LOADF	A,[A]
FD/C4: 38FF     	LOADI	C,WORK_B
FD/C5: A880     	STORE	[DBANK],C
FD/C7:          	
FD/C6:          	; CHECK ZERO
FD/C6: 5000     	ADDI	A,0
FD/C7: F61F     	BRZ	8F
FD/C9:          	
FD/C8:          	; INCREMENT CMDL POINTER
FD/C8: 8429     	LOAD	B,[EX_PNTR]
FD/C9: 3801     	LOADI	C,1
FD/CA: 4900     	ADD	C,B
FD/CB: F40A     	BRN	3F
FD/CD:          	
FD/CC:          	; SKIP 0X0D
FD/CC: A02A     	STORE	[EX_LAST],A
FD/CD: 700D     	SUBI	A,0X0D
FD/CE: F607     	BRZ	3F
FD/CF: 70FD     	SUBI	A,0X0A-0X0D
FD/D0: F605     	BRZ	3F
FD/D1: 500A     	ADDI	A,0X0A
FD/D2: A829     	STORE	[EX_PNTR],C
FD/D4:          	
FD/D3:          	; STORE IN CMDL
FD/D3: 38FE     	LOADI	C,CMDL_B
FD/D4: A880     	STORE	[DBANK],C
FD/D5: B100     	STOREF	[B],A
FD/D7:          	
FD/D6:          	; NEXT CHARACTER
FD/D6: 38FD     3:	LOADI	C,AUTO_B
FD/D7: A880     	STORE	[DBANK],C
FD/D8: 8001     	LOAD	A,[AU_PNTR]
FD/D9: 8402     	LOAD	B,[AU_BANK]
FD/DA: 5001     	ADDI	A,1
FD/DB: F5DD     	BRNN	1B
FD/DC: 3000     	LOADI	A,0
FD/DD: 5401     	ADDI	B,1
FD/DE: 3804     	LOADI	C,4
FD/DF: D600     	CMP	B,C
FD/E0: F1D8     	BRB	1B
FD/E2:          	
FD/E1:          	; INCREMENT BLOCK
FD/E1: A001     	STORE	[AU_PNTR],A
FD/E2: A002     	STORE	[AU_BANK],A
FD/E3: 8003     	LOAD	A,[AU_BLK]
FD/E4: 5001     	ADDI	A,1
FD/E5: A003     	STORE	[AU_BLK],A
FD/E6: F1C2     	BRNC	0B
FD/E8:          
FD/E7:          	; TURN OFF FLAG
FD/E7: 38FD     8:	LOADI	C,AUTO_B
FD/E8: A880     	STORE	[DBANK],C
FD/E9: 3000     	LOADI	A,0
FD/EA: A000     	STORE	[AU_RUN],A
FD/EB: 30FF     	LOADI	A,WORK_B
FD/EC: A080     	STORE	[DBANK],A
FD/EE:          
FD/ED:          	; TERMINATE AND EXECUTE
FD/ED: 3000     9: 	LOADI	A,0
FD/EE: 8829     	LOAD	C,[EX_PNTR]
FD/EF: 34FE     	LOADI	B,CMDL_B
FD/F0: A480     	STORE	[DBANK],B
FD/F1: B200     	STOREF	[C],A
FD/F2: 34FF     	LOADI	B,WORK_B
FD/F3: A480     	STORE	[DBANK],B
FD/F4: 30FE     	LOADI	A,CMDL_B
FD/F5: A004     	STORE	[SRC_BNK],A
FD/F6: 34FE     	LOADI	B,CORE1_B
FD/F7: 3880     	LOADI	C,EXEC
FD/F8: FF09     	JUMP	INDIR
FD/FA:          	
FD/F9:          	; HANDLE ERROR IN AUTO
FD/F9: 30FF     AUTOERR:LOADI	A,WORK_B
FD/FA: A080     	STORE	[DBANK],A
FD/FB: 34FF     	LOADI	B,CORE0_B
FD/FC: 38BC     	LOADI	C,PROMPT
FD/FD: FF04     	JUMP	INDIR
FD/FF:          
FD/FE:          	; BANK IS DONE, MOVE ON TO THE NEXT
FD/FE:          BI	= BI-1
FD/FE:          
FD/FE:          	; ALLOCATE A BANK FOR THE KERNEL WORK AREA
FD/FE:          	; 0X60-7F = KERNEL STACK SPACE
FD/FE:          .BANK	BD
FF/E3:          WORK_B	= BD
FF/E3:          .DATA
FF/E3:          
FF/00:          	; MISC VALUES
FF/00:          	; USED AS TEMP REGISTERS FOR ALL SORTS OF STUFF
FF/00: 00       .DEFL BYTE M0		0
FF/01: 00       .DEFL BYTE M1		0
FF/02: 00       .DEFL BYTE M2		0
FF/03:          
FF/03:          	; DEVICE SPECIFIC MISC VALUES
FF/03:          	; SAFE TO USE IN DEVICE DRIVERS
FF/03: 00       .DEFL BYTE D0		0
FF/04:          
FF/04:          	; SOURCE BANK OF WHATEVER OPERATION IS BEING DONE
FF/04:          	; MAINLY USED TO KEEP TRACK OF THE BANK ADDRESS
FF/04:          	; OF STUFF BEING WORKED ON IN USER SPACE
FF/04: 00       .DEFL BYTE SRC_BNK	0
FF/05:          
FF/05:          	; ADDRESSES FOR THE BLOCK DEVICE DRIVER
FF/05:          	; USED DURING A 'READ' OR 'WRITE' CALL
FF/05: 0000     .DEFL BYTE BLK		0,0
FF/07:          
FF/07:          	; PATTERN FOR SEARCHING FOR FILES
FF/07:          	; AND WORKING USER AREA
FF/07: FF       .DEFL BYTE MATCH	0XFF	; THIS IS ALWAYS 0XFF
FF/08: 30       .DEFL BYTE WRK_USR	'0'
FF/09: 2D2D2D2D
       2D2D2D2D .DEFL BYTE PATTERN	"--------"
FF/11:          
FF/11:          	; STATE INFORMATION FOR SEARCHING 
FF/11: 00       .DEFL BYTE SRCH_LO	0	; LOW BLOCK
FF/12: 00       .DEFL BYTE SRCH_BK	0	; CURRENT BANK
FF/13: 00       .DEFL BYTE SRCH_RP	0	; RECORD POINTER
FF/14: 00       .DEFL BYTE SRCH_LS	0	; LAST ENDING
FF/15:          
FF/15:          	; STATE INFORMATION FOR OPEN FILES
FF/15: 00       .DEFL BYTE OF_OPEN	0	; OF_OPEN = 1 IF THERE IS A FILE OPEN
FF/16: 0000     .DEFL BYTE OF_BTAB	0,0	; BLOCK TABLE ADDRESS
FF/18: 0000     .DEFL BYTE OF_SIZE	0,0	; OPEN FILE SIZE
FF/1A: 00       .DEFL BYTE OF_DRTY	0	; OPEN FILE IS DIRTY
FF/1B:          
FF/1B:          	; ERROR
FF/1B: 3F       .DEFL BYTE ST_ERR	"?"
FF/1C:          
FF/1C:          	; COMMAND LINE PROMPT
FF/1C: 0A0D2E00 .DEFL BYTE ST_PRMT	0X0A,0X0D,'.',0
FF/20:          
FF/20:          	; STATE INFORMATION FOR ALLOCATION BITMAP
FF/20: 00       .DEFL BYTE AB_CBLK	0	; CURRENT BLOCK IN THE ALLOCATION TABLE
FF/21: 00       .DEFL BYTE AB_DRTY	0	; IS ALLOCATION BLOCK DIRTY?
FF/22: 00       .DEFL BYTE AB_BANK	0	; CURRENT BANK
FF/23: 00       .DEFL BYTE AB_CPNT	0	; CHUNK POINTER
FF/24: 00       .DEFL BYTE AB_BIT	0	; CHUNK BIT
FF/25: 0000     .DEFL BYTE AB_FREE	0,0	; BLOCK TO FREE
FF/27:          
FF/27:          	; PROGRAM EXECUTION INFORMATION
FF/27: 00       .DEFL BYTE EX_HALT	0	; HALT PROGRAM ON EXECUTION
FF/28: 00       .DEFL BYTE EX_BLK	0	; BLOCK POINTER FOR EXEC
FF/29: 00       .DEFL BYTE EX_PNTR	0	; POINTER INTO CMDL BUFFER
FF/2A: 00       .DEFL BYTE EX_LAST	0	; LAST CHARACTER PUT IN CMDL
FF/2B:          
FF/2B:          	; EMPTY PATTERN USED TO FIND UNUSED FILE RECORDS
FF/2B: 003F3F3F
       3F3F3F3F
       3F3F     .DEFL BYTE EMPTYP	0X00,'?',"????????"
FF/35:          
FF/35:          	; PLACE 'HELLO' AT BOTTOM  OF STACK
FF/35:          	; WE DON'T CARE IF IT GETS OVERWRITTEN LATER
FF/35:          .ORG 0X60
FF/60: 444F532F
       32383120
       56312E34
       0A0D00   .DEFL BYTE S_HELLO	"DOS/281 V1.4",0X0A,0X0D,0
FF/6F:          
FF/6F:          
FF/6F:          	; BANK IS DONE, MOVE ON TO THE NEXT
FF/6F:          BD	= BD-1
FF/6F:          
FF/6F:          	; COMMAND LINE BANK
FF/6F:          CMDL_B	= BD
FF/6F:          
FF/6F:          	; BANK IS DONE, MOVE ON TO THE NEXT
FF/6F:          BD	= BD-1
FF/6F:          
FF/6F:          	; AUTO EXECUTE STATE
FF/6F:          .BANK BD
FD/00:          AUTO_B	= BD
FD/00:          .DATA
FD/00:          
FD/00: FF       .DEFL BYTE AU_RUN	0XFF
FD/01: 00       .DEFL BYTE AU_PNTR	0
FD/02: 00       .DEFL BYTE AU_BANK	0
FD/03: 00       .DEFL BYTE AU_BLK	0
FD/04: 00       .DEFL BYTE AU_UA	0
FD/05: 00       .DEFL BYTE AU_DRV	0
FD/06: 313A4155
       544F2E53
       4800     .DEFL BYTE AU_FILE	"1:AUTO.SH",0
FD/10:          
FD/10:          AU_MISC	= 0X18
FD/10:          
FD/10:          	; BANK IS DONE, MOVE ON TO THE NEXT
FD/10:          BD	= BD-4
FD/10:          	
FD/10:          	; ALLOCATION BITMAP BUFFER
FD/10:          ABM_B	= BD
FD/10:          
FD/10:          	; BANK IS DONE, MOVE ON TO THE NEXT
FD/10:          BD	= BD-4
FD/10:          
FD/10:          	; FILE BLOCK TABLE
FD/10:          FBT_B	= BD
FD/10:          
FD/10:          	; BANK IS DONE, MOVE ON TO THE NEXT
FD/10:          BD	= BD-4
FD/10:          
FD/10:          	; KERNEL BUFFER
FD/10:          KBUF_B	= BD
FD/10:          
FD/10:          	; BANK IS DONE, MOVE ON TO THE NEXT
FD/10:          BD	= BD-1
FD/10:          
FD/10:          ; TTY.S
FD/10:          ; SERIAL CONSOLE DRIVER
FD/10:          ; GAVIN TERSTEEG, 2024
FD/10:          ; SDMAY24-14
FD/10:          
FD/10:          .BANK BI
FC/00:          TTY0_B	= BI
FC/00:          .TEXT
FC/00:          
FC/80:          	; SERIAL INIT
FC/80:          	; SET UP THE 16C550 UART
FC/80:          	; ASSUMES WORK BANK IS SELECTED
FC/80:          	; USES: A, B, C
FC/80: 3080     TTYINIT:LOADI	A,0X80
FC/81: A093     	STORE	[UART_LC],A
FC/83:          	
FC/82:          	; DIVISOR = 12
FC/82:          	; FOR 9600B @ 1.843, 19200B @ 3.604
FC/82: 300C     	LOADI	A,12
FC/83: A090     	STORE	[UART_DL],A
FC/84: 3000     	LOADI	A,0
FC/85: A091     	STORE	[UART_DH],A
FC/87:          	
FC/86:          	; TURN ON THE FIFO
FC/86: 3001     	LOADI	A,0X01
FC/87: A092     	STORE	[UART_FC],A
FC/89:          	
FC/88:          	; SET 8-BIT, 1 STOP, RESET DLAB
FC/88: 3003     	LOADI	A,0X03
FC/89: A093     	STORE	[UART_LC],A
FC/8B:          
FC/8A: FF62     	JUMP	TTYDONE
FC/8C:          
FC/8B:          	; PUTS A CHARACTER ONTO THE TERMINAL
FC/8B:          	; ASSUMES WORK BANK IS SELECTED
FC/8B:          	; A = CHARACTER TO PRINT
FC/8B:          	; USES: B
FC/8B: 8495     TTYPUTC:LOAD	B,[UART_LS]
FC/8D:          
FC/8C:          	; READ 5TH BIT TO SEE IF WE CAN TRANSMIT YET
FC/8C: 4500     	SHIFTL	B
FC/8D: 4500     	SHIFTL	B
FC/8E: 4500     	SHIFTL	B
FC/8F: F1FB     	BRNC	TTYPUTC
FC/91:          	
FC/90:          	; TRANSMITE BYTE
FC/90: A090     	STORE	[UART_TH],A
FC/91: FF5B     	JUMP	TTYDONE
FC/93:          
FC/92:          	; PUTS A STRING FROM USER SPACE ONTO THE TERMINAL
FC/92:          	; ASSUMES WORK BANK IS SELECTED
FC/92:          	; A = ADDRESS OF STRING
FC/92:          	; [SRC_BNK] = DATA BANK OF STRING
FC/92:          	; USES: A, B, C
FC/92: 8404     TTYPUTS:LOAD	B,[SRC_BNK]
FC/93: A480     	STORE	[DBANK],B
FC/95:          
FC/94:          	; READ BYTE FROM STRING
FC/94: 9800     0:	LOADF	C,[A]
FC/95: 5800     	ADDI	C,0
FC/96: F656     	BRZ	TTYDONE
FC/98:          	
FC/97:          	; GET THE LINE STATUS REGISTER
FC/97: 8495     1:	LOAD	B,[UART_LS]
FC/99:          
FC/98:          	; READ 5TH BIT TO SEE IF WE CAN TRANSMIT YET
FC/98: 4500     	SHIFTL	B
FC/99: 4500     	SHIFTL	B
FC/9A: 4500     	SHIFTL	B
FC/9B: F1FB     	BRNC	1B
FC/9D:          	
FC/9C:          	; TRANSMIT BYTE
FC/9C: A890     	STORE	[UART_TH],C
FC/9E:          	
FC/9D:          	; INCREMENT POINTER
FC/9D: 5001     	ADDI	A,1
FC/9F:          	
FC/9E:          	; RETURN TO PRINT LOOP
FC/9E: FFF5     	JUMP	0B
FC/A0:          	
FC/9F:          	; WAIT FOR A CHARACTER TO BE TYPED AND THEN RETURNS IT
FC/9F:          	; CHARACTER WILL NOT BE ECHOED
FC/9F:          	; IF TTYSTAT RETURN 0XFF, THE RETURN WILL BE INSTANT
FC/9F:          	; ASSUMES WORK BANK IS SELECTED
FC/9F:          	; CHARACTER RETURNED IN A
FC/9F:          	; USES: A, B
FC/9F: 8495     TTYGETC:LOAD	B,[UART_LS]
FC/A1:          
FC/A0:          	; READ 1ST BIT
FC/A0: C500     	SHIFTR	B
FC/A1: F1FD     	BRNC	TTYGETC
FC/A3:          	
FC/A2:          	; READ BYTE
FC/A2: 8090     	LOAD	A,[UART_RH]
FC/A3: FF49     	JUMP	TTYDONE
FC/A5:          	
FC/A4:          	; INPUTS A LINE OF CHARACTER INTO A DATA BANK
FC/A4:          	; RESULTING STRING WILL START AT ADDRESS ZERO, AND BE ZERO
FC/A4:          	; TERMINATED
FC/A4:          	; ASSUMES WORK BANK IS SELECTED
FC/A4:          	; [SRC_BNK] = DATA BANK OF RESULT
FC/A4:          	; USES: A, B, C
FC/A4: 8404     TTYINPT:LOAD	B,[SRC_BNK]
FC/A5: A480     	STORE	[DBANK],B
FC/A7:          	
FC/A6:          	; SET POINTER FOR STORAGE
FC/A6: 3800     	LOADI	C,0
FC/A8:          
FC/A7:          	; READ CHARACTER FROM CONSOLE
FC/A7:          	; GET THE LINE STATUS REGISTER
FC/A7: 8495     0:	LOAD	B,[UART_LS]
FC/A9:          
FC/A8:          	; CHECK BIT 0 TO SEE IF WE HAVE A CHARACTER 
FC/A8: C500     	SHIFTR	B
FC/A9: F1FD     	BRNC	0B
FC/AB:          	
FC/AA:          	; READ THE CHARACTER INTO A
FC/AA: 8090     	LOAD	A,[UART_RH]
FC/AC:          
FC/AB:          	; SEE IF IT IS A 'CR' CHARACTER
FC/AB: 340D     1:	LOADI	B,0X0D
FC/AC: D100     	CMP	A,B
FC/AD: F637     	BRZ	9F
FC/AF:          	
FC/AE:          	; SEE IF IT IS A 'BS' CHARACTER
FC/AE: 3408     	LOADI	B,0X08
FC/AF: D100     	CMP	A,B
FC/B0: F61D     	BRZ	4F
FC/B2:          	
FC/B1:          	; SEE IF IT IS A 'TAB' CHARACTER
FC/B1: 3409     	LOADI	B,0X09
FC/B2: D100     	CMP	A,B
FC/B3: F608     	BRZ	2F
FC/B5:          	
FC/B4:          	; IGNORE ALL OTHER WHITESPACE CHARACTERS
FC/B4: 3420     	LOADI	B,0X20
FC/B5: D100     	CMP	A,B
FC/B6: F1F0     	BRB	0B
FC/B8:          	
FC/B7:          	; CHECK IF IT IS A DELETE CHARACTER
FC/B7: 347F     	LOADI	B,0X7F
FC/B8: D100     	CMP	A,B
FC/B9: F702     	BRNZ	2F
FC/BB:          	
FC/BA:          	; YEP, CONVERT IT IN TO A 'BS' CHARACTER
FC/BA: 3008     	LOADI	A,0X08
FC/BB: FFEF     	JUMP	1B
FC/BD:          	
FC/BC:          	; CHECK TO SEE IF THERE IS SPACE TO PLACE THE CHARACTERS
FC/BC:          	; INTO THE BUFFER
FC/BC: D600     2:	CMP	B,C
FC/BD: F6E9     	BRZ	0B
FC/BF:          
FC/BE:          	; CONVERT TO UPPER CASE
FC/BE: 3461     	LOADI	B,0X61
FC/BF: D100     	CMP	A,B
FC/C0: F104     	BRB	3F
FC/C1: 347A     	LOADI	B,0X7A
FC/C2: D100     	CMP	A,B
FC/C3: F801     	BRA	3F
FC/C4: 7020     	SUBI	A,0X20
FC/C6:          	
FC/C5:          	; WAIT FOR LS TO BE READY
FC/C5: 8495     3:	LOAD	B,[UART_LS]
FC/C6: 4500     	SHIFTL	B
FC/C7: 4500     	SHIFTL	B
FC/C8: 4500     	SHIFTL	B
FC/C9: F1FB     	BRNC	3B
FC/CB:          
FC/CA:          	; PRINT THE CHARACTER
FC/CA: A090     	STORE	[UART_TH],A
FC/CC:          	
FC/CB:          	; PLACE IT INTO THE BUFFER
FC/CB: B200     	STOREF	[C],A
FC/CC: 5801     	ADDI	C,1
FC/CD: FFD9     	JUMP	0B
FC/CF:          
FC/CE:          	; HANDLE BACKSPACE
FC/CE:          	; SUBTRACT ONE FROM THE BUFFER
FC/CE: 5800     4:	ADDI	C,0
FC/CF: F6D7     	BRZ	0B
FC/D0: 7801     	SUBI	C,1
FC/D2:          
FC/D1:          	; WAIT FOR LS TO BE READY
FC/D1: 8495     4:	LOAD	B,[UART_LS]
FC/D2: 4500     	SHIFTL	B
FC/D3: 4500     	SHIFTL	B
FC/D4: 4500     	SHIFTL	B
FC/D5: F1FB     	BRNC	4B
FC/D7:          
FC/D6:          	; ECHO THE CHARACTER
FC/D6: A090     	STORE	[UART_TH],A
FC/D8:          
FC/D7:          	; PRINT AN ADDITIONAL SPACE AND THEN BACKSPACE
FC/D7: 8495     5:	LOAD	B,[UART_LS]
FC/D8: 4500     	SHIFTL	B
FC/D9: 4500     	SHIFTL	B
FC/DA: 4500     	SHIFTL	B
FC/DB: F1FB     	BRNC	5B
FC/DD:          	
FC/DC: 3420     	LOADI	B,0X20
FC/DD: A490     	STORE	[UART_TH],B
FC/DF:          	
FC/DE: 8495     6:	LOAD	B,[UART_LS]
FC/DF: 4500     	SHIFTL	B
FC/E0: 4500     	SHIFTL	B
FC/E1: 4500     	SHIFTL	B
FC/E2: F1FB     	BRNC	6B
FC/E4:          	
FC/E3: A090     	STORE	[UART_TH],A
FC/E5:          	
FC/E4: FFC2     	JUMP	0B
FC/E6:          	
FC/E5:          	; TERMINATE THE STRING AND EXIT
FC/E5: 3000     9:	LOADI	A,0
FC/E6: B200     	STOREF	[C],A
FC/E7: FF05     	JUMP	TTYDONE
FC/E9:          	
FC/E8:          
FC/E8:          	; POLL THE UART TO SEE IF THERE IS A CHARACTER WAITING
FC/E8:          	; ASSUMES WORK BANK IS SELECTED
FC/E8:          	; RETURNS A=0XFF IF THERE IS A CHARACTER, OTHERWISE A=0X00
FC/E8: 3000     TTYSTAT:LOADI	A,0
FC/EA:          
FC/E9:          	; GET THE LINE STATUS REGISTER
FC/E9: 8495     	LOAD	B,[UART_LS]
FC/EB:          
FC/EA:          	; READ 1ST BIT
FC/EA: C500     	SHIFTR	B
FC/EB: F101     	BRNC	TTYDONE
FC/ED:          	
FC/EC:          	; SET A AND FALL TO TTYDONE
FC/EC: 30FF     	LOADI	A,0XFF
FC/EE:          
FC/ED:          	; INTERNAL TTY FUNCTION TO RESET TO WORK BANK AND RETURN
FC/ED: 38FF     TTYDONE:LOADI	C,WORK_B
FC/EE: A880     	STORE	[DBANK],C
FC/EF: FF13     	JUMP	IRET
FC/F1:          
FC/F0:          	; BANK IS DONE, MOVE ON TO THE NEXT
FC/F0:          BI	= BI-1
FC/F0:          
FC/F0:          ; BLK.S
FC/F0:          ; BLOCK DEVICE DRIVER
FC/F0:          ; (COMPACT FLASH VERSION)
FC/F0:          ; GAVIN TERSTEEG, 2024
FC/F0:          ; SDMAY24-14
FC/F0:          
FC/F0:          .BANK BI
FB/80:          BLK0_B	= BI
FB/80:          .TEXT
FB/80:          
FB/80:          	; BLOCK DEVICE INIT
FB/80:          	; SET UP THE COMPACT FLASH CARD
FB/80:          	; ASSUMES WORK BANK IS SELECTED
FB/80:          	; USES: A, B, C
FB/80: 3882     BLKINIT:LOADI	C,@+2
FB/81: FF45     	JUMP	CFWAIT
FB/83:          	
FB/82:          	; SET LBA3 TO 0XE0
FB/82: 30E0     	LOADI	A,0XE0
FB/83: A0A6     	STORE	[CF_LBA3],A
FB/85:          	
FB/84:          	; SET 8 BIT MODE
FB/84: 3001     	LOADI	A,CF_8BIT
FB/85: A0A1     	STORE	[CF_FEAT],A
FB/86: 30EF     	LOADI	A,CF_SETF
FB/87: A0A7     	STORE	[CF_CMD],A
FB/89:          	
FB/88:          	; NOW DISABLE THE CACHE
FB/88: 388A     	LOADI	C,@+2
FB/89: FF3D     	JUMP	CFWAIT
FB/8B:          ;	LOADI	A,CF_DCAC
FB/8A:          ;	STORE	[CF_FEAT],A
FB/8A:          ;	LOADI	A,CF_SETF
FB/8A:          ;	STORE	[CF_CMD],A
FB/8A:          
FB/8A: FF42     	JUMP	BLKDONE
FB/8C:          
FB/8B:          	; READS A BLOCK (512 BYTES) FROM THE BLOCK DEVICE
FB/8B:          	; CONTENTS WILL BE PLACED IN 4 SEQUENTIAL DATA BANKS
FB/8B:          	; ASSUMES WORK BANK IS SELECTED
FB/8B:          	; A = LOWEST DESTINATION DATA BANK
FB/8B:          	; RETURNS A = 0X00
FB/8B:          	; USES: A, B, C, D0
FB/8B: 388D     BLKREAD:LOADI	C,@+2
FB/8C: FF30     	JUMP	CFADDR
FB/8E:          	
FB/8D:          	; EXECUTE THE READ COMMAND AND WAIT
FB/8D: 3420     	LOADI	B,CF_READ
FB/8E: A4A7     	STORE	[CF_CMD],B
FB/8F: 3891     	LOADI	C,@+2
FB/90: FF36     	JUMP	CFWAIT
FB/92:          	
FB/91:          	; COPY INTO 4 DATA BANKS
FB/91: 3804     	LOADI	C,4
FB/92: A003     0:	STORE	[D0],A
FB/93: A080     	STORE	[DBANK],A
FB/94: 3000     	LOADI	A,0
FB/96:          	
FB/95:          	; COPY 128 BYTES
FB/95: 84A0     1:	LOAD	B,[CF_DATA]
FB/96: B400     	STOREF	[A],B
FB/97: 5001     	ADDI	A,1
FB/98: F5FC     	BRNN	1B
FB/9A:          	
FB/99:          	; NEXT BANK?
FB/99: 30FF     	LOADI	A,WORK_B
FB/9A: A080     	STORE	[DBANK],A
FB/9B: 8003     	LOAD	A,[D0]
FB/9C: 5001     	ADDI	A,1
FB/9D: 7801     	SUBI	C,1
FB/9E: F7F3     	BRNZ	0B
FB/A0:          	
FB/9F:          	; CHECK IF THERE IS AN ERROR
FB/9F: 80A7     	LOAD	A,[CF_STAT]
FB/A0: C100     	SHIFTR	A
FB/A1: F0E9     	BRC	BLKREAD
FB/A3:          	
FB/A2:          	; OPERATION COMPLETE
FB/A2: 3000     2:	LOADI	A,0
FB/A3: FF29     	JUMP	BLKDONE
FB/A5:          	
FB/A4:          	; WRITES A BLOCK (512 BYTES) TO THE BLOCK DEVICE
FB/A4:          	; CONTENTS WILL BE TAKEN FROM 4 SEQUENTIAL DATA BANKS
FB/A4:          	; ASSUMES WORK BANK IS SELECTED
FB/A4:          	; A = LOWEST SOURCE DATA BANK
FB/A4:          	; RETURNS A = 0X00
FB/A4:          	; USES: A, B, C, D0
FB/A4: 38A6     BLKWRIT:LOADI	C,@+2
FB/A5: FF17     	JUMP	CFADDR
FB/A7:          	
FB/A6:          	; EXECUTE THE WRITE COMMAND AND WAIT FOR 0X58
FB/A6: 3430     	LOADI	B,CF_WRIT
FB/A7: A4A7     	STORE	[CF_CMD],B
FB/A8: 38AA     	LOADI	C,@+2
FB/A9: FF1D     	JUMP	CFWAIT
FB/AB:          ;0:	LOAD	B,[CF_STAT]
FB/AA:          ;	SUBI	B,0X58
FB/AA:          ;	BRNZ	0B
FB/AA:          	
FB/AA:          	; COPY OUT OF 4 DATA BANKS
FB/AA: 3804     	LOADI	C,4
FB/AB: A003     0:	STORE	[D0],A
FB/AC: A080     	STORE	[DBANK],A
FB/AD: 3000     	LOADI	A,0
FB/AF:          	
FB/AE:          	; COPY 128 BYTES
FB/AE: 9400     1:	LOADF	B,[A]
FB/AF: A4A0     	STORE	[CF_DATA],B
FB/B0: 5001     	ADDI	A,1
FB/B1: F5FC     	BRNN	1B
FB/B3:          	
FB/B2:          	; NEXT BANK?
FB/B2: 30FF     	LOADI	A,WORK_B
FB/B3: A080     	STORE	[DBANK],A
FB/B4: 8003     	LOAD	A,[D0]
FB/B5: 5001     	ADDI	A,1
FB/B6: 7801     	SUBI	C,1
FB/B7: F7F3     	BRNZ	0B
FB/B9:          	
FB/B8:          	; CHECK IF THERE IS AN ERROR
FB/B8: 80A7     	LOAD	A,[CF_STAT]
FB/B9: C100     	SHIFTR	A
FB/BA: F0E9     	BRC	BLKWRIT
FB/BC:          	
FB/BB:          	; OPERATION COMPLETE
FB/BB: 3000     	LOADI	A,0
FB/BC: FF10     	JUMP	BLKDONE
FB/BE:          
FB/BD:          	; SET THE LBA ADDRESS OF THE CF CARD
FB/BD:          	; USING THE BLOCK ADDRESS ON THE WORK BANK
FB/BD:          	; BLOCK COUNT IS ALSO SET
FB/BD:          	; AFTER THAT, A WAIT IS PERFORMED SO A
FB/BD:          	; COMMAND CAN BE EXECUTED AFTER
FB/BD:          	; USES: B
FB/BD: 8406     CFADDR:	LOAD	B,[BLK+1]
FB/BE: A4A3     	STORE	[CF_LBA0],B
FB/BF: 8405     	LOAD	B,[BLK]
FB/C0: A4A4     	STORE	[CF_LBA1],B
FB/C1: 3400     	LOADI	B,0
FB/C2: A4A5     	STORE	[CF_LBA2],B
FB/C3: 34E0     	LOADI	B,0XE0
FB/C4: A4A6     	STORE	[CF_LBA3],B
FB/C5: 3401     	LOADI	B,1
FB/C6: A4A2     	STORE	[CF_CNT],B
FB/C8:          
FB/C7:          	; WAIT FOR THE CF CARD TO BECOME READY
FB/C7:          	; FOR THIS TO HAPPEN, THE BUSY FLAG MUST BE 0
FB/C7:          	; AND THE READY FLAG MUST BE 1
FB/C7:          	; IF A CF CARD ISN'T PRESENT, THIS ROUTINE HANGS
FB/C7:          	; BUT WE DON'T CARE
FB/C7:          	; USES: B
FB/C7: 84A7     CFWAIT:	LOAD	B,[CF_STAT]
FB/C9:          
FB/C8:          	; CHECK BIT 7 (BUSY FLAG)
FB/C8: 4500     	SHIFTL	B
FB/CA:          	
FB/C9:          	; GO BACK TO START BUSY
FB/C9: F0FD     	BRC	CFWAIT
FB/CB:          	
FB/CA:          	; CHECK BIT 6 (READY FLAG)
FB/CA: 4500     	SHIFTL	B
FB/CC:          	
FB/CB:          	; GO BACK TO START IF NOT READY
FB/CB: F1FB     	BRNC	CFWAIT
FB/CD:          	
FB/CC:          	; RETURN FROM FUNCTION CALL
FB/CC: FE33     	JUMPR	C
FB/CE:          
FB/CD:          
FB/CD:          	; INTERNAL BLK FUNCTION TO RESET TO WORK BANK AND RETURN
FB/CD: 38FF     BLKDONE:LOADI	C,WORK_B
FB/CE: A880     	STORE	[DBANK],C
FB/CF: FF33     	JUMP	IRET
FB/D1:          
FB/D0:          	; BANK IS DONE, MOVE ON TO THE NEXT
FB/D0:          BI	= BI-1
FB/D0:          
FB/D0:          ; PRT.S
FB/D0:          ; PRINTER DRIVER
FB/D0:          ; GAVIN TERSTEEG, 2024
FB/D0:          ; SDMAY24-14
FB/D0:          
FB/D0:          ; AY-3-8910 ADDRESSES
FB/D0:          MEGAIO	= 0XB0
FB/D0:          AY0_ADR	= MEGAIO+0
FB/D0:          AY1_ADR	= MEGAIO+2
FB/D0:          AY0_WR	= MEGAIO+1
FB/D0:          AY1_WR	= MEGAIO+3
FB/D0:          AY0_RD	= MEGAIO+0
FB/D0:          AY1_RD	= MEGAIO+2
FB/D0:          
FB/D0:          .BANK BI
FA/80:          PRT0_B	= BI
FA/80:          .TEXT
FA/80:          
FA/80:          	; PRINTER INIT
FA/80:          	; NOT USED ATM
FA/80:          	; ASSUMES WORK BANK IS SELECTED
FA/80:          	; USES: A, B, C
FA/80: FF44     PRTINIT:JUMP	PRTDONE
FA/82:          
FA/81:          	; PRINTER PUT CHARACTER
FA/81:          	; WAITS FOR PRINTER TO NOT BE BUSY BEFORE SENDING CHARACTER
FA/81:          	; A = CHARACTER TO PRINT
FA/81:          	; ASSUMES WORK BANK IS SELECTED
FA/81:          	; USES: A, B, C
FA/81:          	; SET UP AY CHIPS
FA/81: 3407     PRTPUTC:LOADI	B,7
FA/82: A4B2     	STORE	[AY1_ADR],B
FA/83: A4B0     	STORE	[AY0_ADR],B
FA/84: 84B2     	LOAD	B,[AY1_RD]
FA/85: 4500     	SHIFTL	B
FA/86: 4500     	SHIFTL	B
FA/87: C500     	SHIFTR	B
FA/88: C500     	SHIFTR	B
FA/89: 5480     	ADDI	B,0X80
FA/8A: A4B3     	STORE	[AY1_WR],B
FA/8B: 84B0     	LOAD	B,[AY0_RD]
FA/8C: 4500     	SHIFTL	B
FA/8D: 4500     	SHIFTL	B
FA/8E: C500     	SHIFTR	B
FA/8F: C500     	SHIFTR	B
FA/90: 54C0     	ADDI	B,0XC0
FA/91: A4B1     	STORE	[AY0_WR],B
FA/93:          	
FA/92:          	; SET DEVICE CONTROL STATE
FA/92: 340F     	LOADI	B,15
FA/93: A4B2     	STORE	[AY1_ADR],B
FA/94: 34FF     	LOADI	B,0XFF
FA/95: A4B3     	STORE	[AY1_WR],B
FA/97:          	
FA/96:          	; WAIT FOR BUSY TO CLEAR
FA/96: 340E     	LOADI	B,14
FA/97: A4B2     	STORE	[AY1_ADR],B
FA/98: 84B2     0:	LOAD	B,[AY1_RD]
FA/99: C500     	SHIFTR	B
FA/9A: C500     	SHIFTR	B
FA/9B: C500     	SHIFTR	B
FA/9C: F0FB     	BRC	0B
FA/9E:          	
FA/9D:          	; SEND OUT CHARACTER
FA/9D: 340E     	LOADI	B,14
FA/9E: A4B0     	STORE	[AY0_ADR],B
FA/9F: A0B1     	STORE	[AY0_WR],A
FA/A1:          
FA/A0:          	; STROBE PRINTER
FA/A0: 300F     	LOADI	A,15
FA/A1: A0B2     	STORE	[AY1_ADR],A
FA/A2: 30F7     	LOADI	A,0XF7
FA/A3: A0B3     	STORE	[AY1_WR],A
FA/A4: 30FF     	LOADI	A,0XFF
FA/A5: A0B3     	STORE	[AY1_WR],A
FA/A7:          	
FA/A6:          	; DONE
FA/A6: FF1E     	JUMP	PRTDONE
FA/A8:          
FA/A7:          	; PRINTER STATUS
FA/A7:          	; RETURNS A=0XFF IF THE PRINTER IS READY
FA/A7:          	; ASSUMES WORK BANK IS SELECTED
FA/A7:          	; USES: A, B, C
FA/A7: 3007     PRTSTAT:LOADI	A,7
FA/A8: A0B2     	STORE	[AY1_ADR],A
FA/A9: A0B0     	STORE	[AY0_ADR],A
FA/AA: 80B2     	LOAD	A,[AY1_RD]
FA/AB: 4000     	SHIFTL	A
FA/AC: 4000     	SHIFTL	A
FA/AD: C100     	SHIFTR	A
FA/AE: C100     	SHIFTR	A
FA/AF: 5080     	ADDI	A,0X80
FA/B0: A0B3     	STORE	[AY1_WR],A
FA/B1: 80B0     	LOAD	A,[AY0_RD]
FA/B2: 4000     	SHIFTL	A
FA/B3: 4000     	SHIFTL	A
FA/B4: C100     	SHIFTR	A
FA/B5: C100     	SHIFTR	A
FA/B6: 50C0     	ADDI	A,0XC0
FA/B7: A0B1     	STORE	[AY0_WR],A
FA/B9:          	
FA/B8:          	; SET DEVICE CONTROL STATE
FA/B8: 300F     	LOADI	A,15
FA/B9: A0B2     	STORE	[AY1_ADR],A
FA/BA: 30FF     	LOADI	A,0XFF
FA/BB: A0B3     	STORE	[AY1_WR],A
FA/BD:          	
FA/BC:          	; GET BUSY FLAG
FA/BC: 30FF     	LOADI	A,0XFF
FA/BD: 340E     	LOADI	B,14
FA/BE: A4B2     	STORE	[AY1_ADR],B
FA/BF: 84B2     	LOAD	B,[AY1_RD]
FA/C0: C500     	SHIFTR	B
FA/C1: C500     	SHIFTR	B
FA/C2: C500     	SHIFTR	B
FA/C3: F101     	BRNC	PRTDONE
FA/C4: 3000     	LOADI	A,0X00
FA/C6:          	
FA/C5:          	; FALL TO PRTDONE
FA/C5:          
FA/C5:          	; INTERNAL PRT FUNCTION TO RESET TO WORK BANK AND RETURN
FA/C5: 38FF     PRTDONE:LOADI	C,WORK_B
FA/C6: A880     	STORE	[DBANK],C
FA/C7: FF3B     	JUMP	IRET
FA/C9:          
FA/C8:          	; BANK IS DONE, MOVE ON TO THE NEXT
FA/C8:          BI	= BI-1
FA/C8:          ; FS.S
FA/C8:          ; FILE SYSTEM HANDLING ROUTINES
FA/C8:          ; GAVIN TERSTEEG, 2024
FA/C8:          ; SDMAY24-14
FA/C8:          
FA/C8:          .BANK BI
F9/80:          FS0_B	= BI
F9/80:          .TEXT
F9/80:          	; SET SEARCH PARAMETERS
F9/80:          	; USING A STRING IN USER SPACE, THE FILE SEARCH PATTERN WILL
F9/80:          	; BE UPDATED
F9/80:          	; THE FILE SEARCH POINTER WILL ALSO BE RESET
F9/80:          	; ASSUMES WORK BANK IS SELECTED
F9/80:          	; A = ADDRESS OF STRING
F9/80:          	; [SRC_BNK] = DATA BANK OF STRING
F9/80:          	; RETURNS A=0X00 IF PATTERN IS VALID, OTHERWISE 0XFF
F9/80:          	; 0XFE CAN BE RETURNED IF THERE NEVER IS A '.' IN THE FILE
F9/80:          	; USES: A, B, C, M0, M1, M2
F9/80: A000     SSPARAM:STORE	[M0],A
F9/82:          
F9/81:          	; STORE PATTERN COUNTER
F9/81: 3006     	LOADI	A,6
F9/82: A001     	STORE	[M1],A
F9/84:          	
F9/83:          	; STORE PATTERN POINTER
F9/83: 3009     	LOADI	A,PATTERN
F9/84: A002     	STORE	[M2],A
F9/86:          	
F9/85:          	; RESET THE PATTERN
F9/85: 3009     	LOADI	A,PATTERN
F9/86: 3408     	LOADI	B,8
F9/87: 3820     	LOADI	C,0X20
F9/88: B800     0:	STOREF	[A],C
F9/89: 5001     	ADDI	A,1
F9/8A: 7401     	SUBI	B,1
F9/8B: F7FC     	BRNZ	0B
F9/8D:          	
F9/8C:          	; DO AN INITAL CHECKOUT OF THE PATTERN
F9/8C: 8004     	LOAD	A,[SRC_BNK]
F9/8D: 8400     	LOAD	B,[M0]
F9/8E: A080     	STORE	[DBANK],A
F9/90:          	
F9/8F:          	; MAKE SURE THERE IS ACTUALLY A PATTERN
F9/8F: 9900     	LOADF	C,[B]
F9/90: 3020     	LOADI	A,0X20
F9/91: D200     	CMP	A,C
F9/92: F042     	BRAE	9F
F9/94:          	
F9/93:          	; SEE IF THERE IS A USER AREA PREFIX
F9/93:          	; AND CHANGE BANK TO KERNEL WORK AREA
F9/93: 9101     	LOADF	A,[B+1]
F9/94: 703A     	SUBI	A,':'
F9/95: 30FF     	LOADI	A,WORK_B
F9/96: A080     	STORE	[DBANK],A
F9/97: F70C     	BRNZ	1F
F9/99:          	
F9/98:          	; MAKE SURE THAT THE USER AREA PREFIX IS VALID
F9/98: 303F     	LOADI	A,'?'
F9/99: D800     	CMP	C,A
F9/9A: F606     	BRZ	0F
F9/9B: 3030     	LOADI	A,'0'
F9/9C: D800     	CMP	C,A
F9/9D: F137     	BRB	9F
F9/9E: 3039     	LOADI	A,'9'
F9/9F: D800     	CMP	C,A
F9/A0: F834     	BRA	9F
F9/A2:          
F9/A1:          	; SET THE WORKING USER AREA
F9/A1: A808     0:	STORE	[WRK_USR],C
F9/A3:          	
F9/A2:          	; AND SKIP THE PREFIX
F9/A2: 5402     	ADDI	B,2
F9/A3: A400     	STORE	[M0],B
F9/A5:          
F9/A4:          	; GRAB THE NEXT CHARACTER
F9/A4:          	; C = NEXT CHARACTER
F9/A4: 8400     1:	LOAD	B,[M0]
F9/A5: 8004     	LOAD	A,[SRC_BNK]
F9/A6: A080     	STORE	[DBANK],A
F9/A7: 9900     	LOADF	C,[B]
F9/A8: 30FF     	LOADI	A,WORK_B
F9/A9: A080     	STORE	[DBANK],A
F9/AB:          	
F9/AA:          	; INCREMENT AND SAVE POINTER INTO M0
F9/AA: 5401     	ADDI	B,1
F9/AB: A400     	STORE	[M0],B
F9/AD:          	
F9/AC:          	; GRAB PATTERN POINTER
F9/AC: 8002     	LOAD	A,[M2]
F9/AE:          	
F9/AD:          	; SEE IF THE PATTERN IS COMPLETE
F9/AD:          	; AND GRAB PATTERN COUNTER
F9/AD: 3420     	LOADI	B,0X20
F9/AE: D600     	CMP	B,C
F9/AF: 8401     	LOAD	B,[M1]
F9/B0: F01A     	BRAE	6F
F9/B2:          	
F9/B1:          	; SEE IF IT IS A '.'
F9/B1: 782E     	SUBI	C,'.'
F9/B2: F611     	BRZ	5F
F9/B4:          	
F9/B3:          	; THERE MUST BE SPACE IN THE PATTERN BUFFER FOR ANY
F9/B3:          	; OF THE NEXT VALUES TO BE VALID
F9/B3:          	; LETS CHECK IT
F9/B3: 7401     	SUBI	B,1
F9/B4: F420     	BRN	9F
F9/B6:          	
F9/B5:          	; SEE IF IT IS A '*'
F9/B5: 78FC     	SUBI	C,'*'-'.'
F9/B6: F606     	BRZ	3F
F9/B8:          	
F9/B7:          	; OTHERWISE, IT'S A NORMAL CHARACTER
F9/B7:          	; PLACE IT IN THE BUFFER AND MOVE ON
F9/B7: 582A     	ADDI	C,'*'
F9/B8: B800     	STOREF	[A],C
F9/B9: 5001     	ADDI	A,1
F9/BA: A002     2:	STORE	[M2],A
F9/BB: A401     	STORE	[M1],B
F9/BC: FFE7     	JUMP	1B
F9/BE:          
F9/BD:          	; HANDLE '*'
F9/BD:          	; FILL REST OF PATTERN SECTION WITH '?'
F9/BD: 5401     3:	ADDI	B,1
F9/BE: 383F     	LOADI	C,'?'
F9/BF: B800     4:	STOREF	[A],C
F9/C0: 5001     	ADDI	A,1
F9/C1: 7401     	SUBI	B,1
F9/C2: F7FC     	BRNZ	4B
F9/C3: FFF6     	JUMP	2B
F9/C5:          	
F9/C4:          	; HANDLE '.'
F9/C4:          	; MAKE SURE THE LAST 2 BYTES OF THE PATTERN BUFFER ARE EMPTY
F9/C4:          	; AND THERE HASN'T BEEN A '.' ALREADY
F9/C4: 380F     5:	LOADI	C,PATTERN+6
F9/C5: 4100     	ADD	A,B
F9/C6: D200     	CMP	A,C
F9/C7: F80D     	BRA	9F
F9/C9:          	
F9/C8:          	; SET THE NEW PATTERN POINTER
F9/C8: 300F     	LOADI	A,PATTERN+6
F9/C9: 3402     	LOADI	B,2
F9/CA: FFEF     	JUMP	2B
F9/CC:          
F9/CB:          	; PATTERN IS COMPLETE
F9/CB:          	; MAKE SURE ALL FIELDS HAVE BEEN FILLED IN
F9/CB: 380F     6:	LOADI	C,PATTERN+6
F9/CC: D200     	CMP	A,C
F9/CD: F902     	BRBE	7F
F9/CE: 3000     	LOADI	A,0
F9/CF: FF1F     	JUMP	FS0DONE
F9/D1:          	
F9/D0:          	; CHECK TO SEE IF A '.' HAS BEEN PLACED
F9/D0: 4100     7:	ADD	A,B
F9/D1: D200     	CMP	A,C
F9/D2: F702     	BRNZ	9F
F9/D3: 30FE     	LOADI	A,0XFE
F9/D4: FF1A     	JUMP	FS0DONE
F9/D6:          	
F9/D5:          	; PATTERN IS INVALID
F9/D5: 30FF     9:	LOADI	A,0XFF
F9/D6: FF18     	JUMP	FS0DONE
F9/D8:          	
F9/D7:          	; SIMILAR TO FSEARCH, BUT LOOKS FOR AN EMPTY FILE
F9/D7: 342B     FEMPTY:	LOADI	B,EMPTYP
F9/D8: FF01     	JUMP	0F
F9/DA:          		
F9/D9:          	; FILE RECORD FORMAT (16 BYTES)
F9/D9:          	; 0:     FILE ALLOCATED TAG
F9/D9:          	;   0X00 = UNALLOCATED
F9/D9:          	;   0XFF = ALLOCATED
F9/D9:          	; 1:     USER AREA
F9/D9:          	;   '0'-'9' FOR USER AREA
F9/D9:          	; 2-7:   FILE NAME
F9/D9:          	;   'A'-'Z','0'-'9','-','_'
F9/D9:          	; 8-9:   FILE EXTENSION
F9/D9:          	;   'A'-'Z','0'-'9','-','_'
F9/D9:          	; 10-11  FILE SIZE IN BLOCKS
F9/D9:          	; 12:    UNUSED
F9/D9:          	; 13-14: FILE BLOCK TABLE ADDRESS
F9/D9:          	;   16 BIT PHYSICAL ADDRESS OF BLOCK TABLE
F9/D9:          	; 15:    NEXT RECORD / END RECORD
F9/D9:          	;   0X00 = HAS NEXT RECORD
F9/D9:          	;   0X01 = NEXT RECORD ON NEXT BLOCK
F9/D9:          	;   0XFF = END OF RECORD 
F9/D9:          	
F9/D9:          	; SEARCHES THE FILE RECORDS UNTIL ONE MATCHING THE CURRENT PATTERN
F9/D9:          	; IS FOUND OR ALL RECORDS ARE EXHAUSTED
F9/D9:          	; ASSUMES WORK BANK IS SELECTED
F9/D9:          	; A = 0 TO RESET THE SEARCH, 1 TO CONTINUE TO NEXT ENTRY
F9/D9:          	; A RETURNS 0X00 IF FOUND, OTHERWISE 0XFF IS RETURNED
F9/D9:          	; USES: A, B, C, M0, M1, M2
F9/D9: 3407     FSEARCH:LOADI	B,MATCH
F9/DA: A402     0:	STORE	[M2],B
F9/DB: 5000     	ADDI	A,0
F9/DC: 34F8     	LOADI	B,FS1_B
F9/DD: 38C7     	LOADI	C,FSNEXT
F9/DE: F723     	BRNZ	INDIR
F9/E0:          	
F9/DF:          	; RESET SEARCH STATE
F9/DF: 3011     	LOADI	A,17
F9/E0: A011     	STORE	[SRCH_LO],A
F9/E2:          	
F9/E1:          	; CHECK THE RECORD
F9/E1: 3880     	LOADI	C,FSSTART
F9/E2: FF1F     	JUMP	INDIR
F9/E4:          	
F9/E3:          	; OPENS THE FILE THAT IS CURRENTLY BEING POINTED
F9/E3:          	; TO BE THE FILE SEARCH STATE
F9/E3:          	; DUE TO THIS, FOPEN MUST BE RUN IMMEDIATELY
F9/E3:          	; AFTER A FILE SEARCH
F9/E3:          	; ASSUMES WORK BANK IS SELECTED
F9/E3:          	; A RETURNS 0X00 IF SUCCESSFUL, OTHERWISE 0XFF IS RETURNED
F9/E3:          	; USES: A, B, C, M0
F9/E3: 34F8     FOPEN:	LOADI	B,FS1_B
F9/E4: 38DA     	LOADI	C,FOPENA
F9/E5: FF1C     	JUMP	INDIR
F9/E7:          	
F9/E6:          	; CLOSES ANY FILES THAT ARE OPEN
F9/E6:          	; ALL BUFFERS WILL BE FLUSHED AFTER THE OPERATION COMPLETES
F9/E6:          	; USES: A, B, C, M0, M1, M2
F9/E6: 34F7     FCLOSE:	LOADI	B,FS2_B
F9/E7: 38DA     	LOADI	C,FCLOSEA
F9/E8: FF19     	JUMP	INDIR
F9/EA:          
F9/E9:          	; READS A BLOCK OUT OF THE CURRENTLY OPEN FILE
F9/E9:          	; AN ERROR IS RETURNED IF THE BLOCK IS OUTSIDE OF THE CURRENT
F9/E9:          	; FILE SIZE
F9/E9:          	; A FILE MUST CURRENTLY BE OPEN
F9/E9:          	; A = BLOCK TO READ
F9/E9:          	; [SRC_BNK] = DESTINATION OF READ DATA
F9/E9:          	; ASSUMES WORK BANK IS SELECTED
F9/E9:          	; A RETURNS 0X00 IF SUCCESSFUL, OTHERWISE 0XFF IS RETURNED
F9/E9:          	; USES: A, B, C, M0
F9/E9: 34F7     FREAD:	LOADI	B,FS2_B
F9/EA: 3880     	LOADI	C,FREADA
F9/EB: FF16     	JUMP	INDIR
F9/ED:          	
F9/EC:          	; WRITE A BLOCK INTO THE CURRENTLY OPEN FILE
F9/EC:          	; IF THE ADDRESS IS AN EXISTING BLOCK, IT WILL BE OVERWRITTEN
F9/EC:          	; IF THE ADDRESS IS EQUAL TO THE FILE SIZE, THEN A NEW BLOCK
F9/EC:          	; WILL BE ALLOCATED
F9/EC:          	; OTHERWISE THERE WILL BE AN ERROR
F9/EC:          	; A FILE MUST CURRENTLY BE OPEN
F9/EC:          	; A = BLOCK TO WRITE
F9/EC:          	; [SRC_BNK] = SOURCE OF WRITE DATA
F9/EC:          	; ASSUMES WORK BANK IS SELECTED
F9/EC:          	; A RETURNS 0X00 IF SUCCESSFUL, OTHERWISE 0XFF IS RETURNED
F9/EC:          	; USES: A, B, C, M0, M1, M2
F9/EC: 34F7     FWRITE:	LOADI	B,FS2_B
F9/ED: 3898     	LOADI	C,FWRITEA
F9/EE: FF13     	JUMP	INDIR
F9/F0:          
F9/EF:          
F9/EF:          
F9/EF:          	; INTERNAL FS0 FUNCTION TO RESET TO WORK BANK AND RETURN
F9/EF: 38FF     FS0DONE:LOADI	C,WORK_B
F9/F0: A880     	STORE	[DBANK],C
F9/F1: FF11     	JUMP	IRET
F9/F3:          
F9/F2:          	; BANK IS DONE, MOVE ON TO THE NEXT
F9/F2:          BI	= BI-1
F9/F2:          .BANK BI
F8/80:          FS1_B	= BI
F8/80:          .TEXT
F8/80:          
F8/80:          	; START THE FILE SEARCH ON A BLOCK
F8/80:          	; RESET INTER-BLOCK SEARCH STATE
F8/80:          	; AND READ THE BLOCK
F8/80:          	; THEN EXECUTE FSCHECK
F8/80:          	; ASSUMES WORK BANK IS SELECTED
F8/80:          	; USES: A, B, C
F8/80: 3000     FSSTART:LOADI	A,0
F8/81: A013     	STORE	[SRCH_RP],A
F8/82: 30F1     	LOADI	A,KBUF_B
F8/83: A012     	STORE	[SRCH_BK],A
F8/85:          	
F8/84:          	; SET ADDRESS FOR READ
F8/84: 3400     	LOADI	B,0
F8/85: A405     	STORE	[BLK],B
F8/86: 8411     	LOAD	B,[SRCH_LO]
F8/87: A406     	STORE	[BLK+1],B
F8/89:          	
F8/88:          	; AND EXECUTE A READ INTO THE KBUF
F8/88: 7C02     	SUBI	D,2
F8/89: 38F8     	LOADI	C,FS1_B
F8/8A: BB01     	STOREF	[D+1],C
F8/8B: 3890     	LOADI	C,@+5
F8/8C: BB00     	STOREF	[D],C
F8/8D: 34FB     	LOADI	B,BLK0_B
F8/8E: 388B     	LOADI	C,BLKREAD
F8/8F: FF72     	JUMP	INDIR
F8/90: 5C02     	ADDI	D,2
F8/92:          
F8/91:          	; FILE SEARCH CHECK
F8/91:          	; USING THE CURRENT SEARCH STATE, THE RECORD WILL BE CHECKED
F8/91:          	; AGAINST THE CURRENT PATTERN
F8/91:          	; ASSUMES WORK BANK IS SELECTED
F8/91:          	; A RETURNS 0X00 IF FOUND, OTHERWISE FSNEXT IS CALLED
F8/91:          	; USES: A, B, C, M0, M1
F8/91: 380A     FSCHECK:LOADI	C,10
F8/92: A801     	STORE	[M1],C
F8/94:          
F8/93:          	; RECORD THE CURRENT RECORD ENDING
F8/93: 8013     	LOAD	A,[SRCH_RP]
F8/94: 8412     	LOAD	B,[SRCH_BK]
F8/95: A480     	STORE	[DBANK],B 
F8/96: 980F     	LOADF	C,[A+15]
F8/97: 34FF     	LOADI	B,WORK_B
F8/98: A480     	STORE	[DBANK],B
F8/99: A814     	STORE	[SRCH_LS],C
F8/9B:          	
F8/9A:          	; GET THE PATTERN TO MATCH AGAINST
F8/9A: 8802     	LOAD	C,[M2]
F8/9C:          	
F8/9B:          	; GET BYTE OF MATCH PATTERN
F8/9B: A800     0:	STORE	[M0],C
F8/9C: 9A00     	LOADF	C,[C]
F8/9D: 783F     	SUBI	C,'?'
F8/9E: F608     	BRZ	1F
F8/9F: 583F     	ADDI	C,'?'
F8/A1:          	
F8/A0:          	; SWITCH TO RECORD BANK
F8/A0: 8412     	LOAD	B,[SRCH_BK]
F8/A1: A480     	STORE	[DBANK],B
F8/A3:          	
F8/A2:          	; CHECK AGAINST THE RECORD POINTER
F8/A2: 9400     	LOADF	B,[A]
F8/A3: D600     	CMP	B,C
F8/A4: 34FF     	LOADI	B,WORK_B
F8/A5: A480     	STORE	[DBANK],B
F8/A6: F720     	BRNZ	FSNEXT
F8/A8:          	
F8/A7:          	; THAT ONE MATCHED, KEEP GOING
F8/A7: 5001     1:	ADDI	A,1
F8/A8: 8800     	LOAD	C,[M0]
F8/A9: 5801     	ADDI	C,1
F8/AA: 8401     	LOAD	B,[M1]
F8/AB: 7401     	SUBI	B,1
F8/AC: A401     	STORE	[M1],B
F8/AD: F7ED     	BRNZ	0B
F8/AF:          	
F8/AE:          	; WE HAVE A MATCH!
F8/AE:          	; COPY USER AREA INTO USER SPACE
F8/AE: AC00     	STORE	[M0],D
F8/AF: 8013     	LOAD	A,[SRCH_RP]
F8/B0: 8412     	LOAD	B,[SRCH_BK]
F8/B1: A480     	STORE	[DBANK],B 
F8/B2: 9801     	LOADF	C,[A+1]
F8/B3: 3400     	LOADI	B,0
F8/B4: A480     	STORE	[DBANK],B
F8/B5: A86A     	STORE	[0X6A],C
F8/B7:          	
F8/B6:          	; COPY FILE NAME AND SIZE
F8/B6: 3C0A     	LOADI	D,10
F8/B7: 34FF     	LOADI	B,WORK_B
F8/B8: A480     	STORE	[DBANK],B
F8/B9: 8412     2:	LOAD	B,[SRCH_BK]
F8/BA: A480     	STORE	[DBANK],B 
F8/BB: 980B     	LOADF	C,[A+11]
F8/BC: 3400     	LOADI	B,0
F8/BD: A480     	STORE	[DBANK],B
F8/BE: BB5F     	STOREF	[D+0X60-1],C
F8/BF: 7001     	SUBI	A,1
F8/C0: 7C01     	SUBI	D,1
F8/C1: 34FF     	LOADI	B,WORK_B
F8/C2: A480     	STORE	[DBANK],B
F8/C3: F7F5     	BRNZ	2B
F8/C4: 8C00     	LOAD	D,[M0]
F8/C6:          	
F8/C5:          	; COMPLETE OPERATION
F8/C5: 3000     	LOADI	A,0
F8/C6: FF2E     	JUMP	FS1DONE
F8/C8:          	
F8/C7:          	; INCREMENT TO THE NEXT RECORD
F8/C7:          	; CHECK TO SEE IF THERE IS ACTUALLY A NEXT RECORD
F8/C7: 30FF     FSNEXT:	LOADI	A,0XFF
F8/C8: 8414     	LOAD	B,[SRCH_LS]
F8/C9: 5400     	ADDI	B,0
F8/CA: F42A     	BRN	FS1DONE
F8/CB: F70A     	BRNZ	0F
F8/CD:          	
F8/CC:          	; INCREMENT TO NEXT RECORD ON BANK
F8/CC: 8013     	LOAD	A,[SRCH_RP]
F8/CD: 5010     	ADDI	A,16
F8/CE: A013     	STORE	[SRCH_RP],A
F8/CF: F5C1     	BRNN	FSCHECK
F8/D1:          	
F8/D0:          	; INCREMENT TO NEXT BANK
F8/D0: 3000     	LOADI	A,0
F8/D1: A013     	STORE	[SRCH_RP],A
F8/D2: 8012     	LOAD	A,[SRCH_BK]
F8/D3: 5001     	ADDI	A,1
F8/D4: A012     	STORE	[SRCH_BK],A
F8/D5: FFBB     	JUMP	FSCHECK
F8/D7:          	
F8/D6:          	; MOVE ON TO NEXT BLOCK
F8/D6: 8011     0:	LOAD	A,[SRCH_LO]
F8/D7: 5001     	ADDI	A,1
F8/D8: A011     	STORE	[SRCH_LO],A
F8/D9: FFA6     	JUMP	FSSTART
F8/DB:          	
F8/DA:          	; SHADOW OF FOPEN
F8/DA: 8413     FOPENA:	LOAD	B,[SRCH_RP]
F8/DC:          
F8/DB:          	; SAVE THE STACK SO WE CAN USE THE REGISTER FOR TRANSFERS
F8/DB: AC00     	STORE	[M0],D
F8/DD:          	
F8/DC:          	; LOAD OPEN FILE SIZE
F8/DC: 8012     	LOAD	A,[SRCH_BK]
F8/DD: A080     	STORE	[DBANK],A
F8/DE: 990A     	LOADF	C,[B+10]
F8/DF: 9D0B     	LOADF	D,[B+11]
F8/E0: 30FF     	LOADI	A,WORK_B
F8/E1: A080     	STORE	[DBANK],A
F8/E2: A818     	STORE	[OF_SIZE],C
F8/E3: AC19     	STORE	[OF_SIZE+1],D
F8/E5:          	
F8/E4:          	; LOAD OPEN FILE BLOCK TABLE
F8/E4: 8012     	LOAD	A,[SRCH_BK]
F8/E5: A080     	STORE	[DBANK],A
F8/E6: 990D     	LOADF	C,[B+13]
F8/E7: 9D0E     	LOADF	D,[B+14]
F8/E8: 30FF     	LOADI	A,WORK_B
F8/E9: A080     	STORE	[DBANK],A
F8/EA: A816     	STORE	[OF_BTAB],C
F8/EB: AC17     	STORE	[OF_BTAB+1],D
F8/EC: A805     	STORE	[BLK],C
F8/ED: AC06     	STORE	[BLK+1],D
F8/EF:          	
F8/EE:          	; RESTORE STACK AND SET OPEN FLAG
F8/EE: 8C00     	LOAD	D,[M0]
F8/EF: 30FF     	LOADI	A,0XFF
F8/F0: A015     	STORE	[OF_OPEN],A
F8/F2:          	
F8/F1:          	; EXECUTE BLOCK READ
F8/F1: 30F5     	LOADI	A,FBT_B
F8/F2: 34FB     	LOADI	B,BLK0_B
F8/F3: 388B     	LOADI	C,BLKREAD
F8/F4: FF0D     	JUMP	INDIR
F8/F6:          
F8/F5:          
F8/F5:          	; INTERNAL FS1 FUNCTION TO RESET TO WORK BANK AND RETURN
F8/F5: 38FF     FS1DONE:LOADI	C,WORK_B
F8/F6: A880     	STORE	[DBANK],C
F8/F7: FF0B     	JUMP	IRET
F8/F9:          
F8/F8:          	; BANK IS DONE, MOVE ON TO THE NEXT
F8/F8:          BI	= BI-1
F8/F8:          .BANK BI
F7/80:          FS2_B	= BI
F7/80:          .TEXT
F7/80:          
F7/80:          	; SHADOW OF FREAD
F7/80:          	; ERROR IF NO FILE IS OPEN
F7/80: 8415     FREADA:	LOAD	B,[OF_OPEN]
F7/81: 5400     	ADDI	B,0
F7/82: F65C     	BRZ	FS2ERR
F7/84:          	
F7/83:          	; CHECK SIZE
F7/83: 8418     	LOAD	B,[OF_SIZE]
F7/84: 5400     	ADDI	B,0
F7/85: F703     	BRNZ	0F
F7/86: 8419     	LOAD	B,[OF_SIZE+1]
F7/87: D100     	CMP	A,B
F7/88: F056     	BRAE	FS2ERR
F7/8A:          	
F7/89:          	; CALL FACONV
F7/89: 388B     0:	LOADI	C,@+2
F7/8A: FF46     	JUMP	FACONV
F7/8C:          	
F7/8B:          	; GET THE BLOCK
F7/8B: AC00     	STORE	[M0],D
F7/8C: A480     	STORE	[DBANK],B
F7/8D: 9800     	LOADF	C,[A+0]
F7/8E: 9C01     	LOADF	D,[A+1]
F7/8F: 34FF     	LOADI	B,WORK_B
F7/90: A480     	STORE	[DBANK],B
F7/91: A805     	STORE	[BLK],C
F7/92: AC06     	STORE	[BLK+1],D	
F7/93: 8C00     	LOAD	D,[M0]
F7/95:          	
F7/94:          	; EXECUTE BLOCK READ
F7/94: 8004     	LOAD	A,[SRC_BNK]
F7/95: 34FB     	LOADI	B,BLK0_B
F7/96: 388B     	LOADI	C,BLKREAD
F7/97: FF6A     	JUMP	INDIR
F7/99:          	
F7/98:          	; SHADOW OF FWRITE
F7/98:          	; ERROR IF NO FILE IS OPEN
F7/98: 8415     FWRITEA:LOAD	B,[OF_OPEN]
F7/99: 5400     	ADDI	B,0
F7/9A: F644     	BRZ	FS2ERR
F7/9C:          	
F7/9B:          	; CHECK SIZE
F7/9B: 8418     	LOAD	B,[OF_SIZE]
F7/9C: 5400     	ADDI	B,0
F7/9D: F70F     	BRNZ	0F
F7/9E: 8419     	LOAD	B,[OF_SIZE+1]
F7/9F: D100     	CMP	A,B
F7/A0: F83E     	BRA	FS2ERR
F7/A1: F60F     	BRZ	1F
F7/A3:          	
F7/A2:          	; READ AN EXISTING BLOCK
F7/A2:          	; CALL FACONV
F7/A2: 38A4     	LOADI	C,@+2
F7/A3: FF2D     	JUMP	FACONV
F7/A5:          	
F7/A4:          	; GET THE BLOCK
F7/A4: AC00     	STORE	[M0],D
F7/A5: A480     	STORE	[DBANK],B
F7/A6: 9800     	LOADF	C,[A+0]
F7/A7: 9C01     	LOADF	D,[A+1]
F7/A8: 34FF     	LOADI	B,WORK_B
F7/A9: A480     	STORE	[DBANK],B
F7/AA: A805     	STORE	[BLK],C
F7/AB: AC06     	STORE	[BLK+1],D	
F7/AC: 8C00     	LOAD	D,[M0]
F7/AE:          	
F7/AD:          	; EXECUTE BLOCK WRITE
F7/AD: 8004     0:	LOAD	A,[SRC_BNK]
F7/AE: 34FB     	LOADI	B,BLK0_B
F7/AF: 38A4     	LOADI	C,BLKWRIT
F7/B0: FF51     	JUMP	INDIR
F7/B2:          	
F7/B1:          	; ALLOCATE A NEW BLOCK
F7/B1: 7C02     1:	SUBI	D,2
F7/B2: 38F7     	LOADI	C,BI
F7/B3: BB01     	STOREF	[D+1],C
F7/B4: 38B9     	LOADI	C,@+5
F7/B5: BB00     	STOREF	[D],C
F7/B6: 34F3     	LOADI	B,AL0_B
F7/B7: 38B8     	LOADI	C,ALLOC
F7/B8: FF49     	JUMP	INDIR
F7/B9: 5C02     	ADDI	D,2
F7/BA: 5000     	ADDI	A,0
F7/BB: F723     	BRNZ	FS2ERR
F7/BD:          	
F7/BC:          	; SET THE FILE AS DIRTY
F7/BC: 30FF     	LOADI	A,0XFF
F7/BD: A01A     	STORE	[OF_DRTY],A
F7/BF:          	
F7/BE:          	; STORE THE NEW BLOCK
F7/BE: 8019     	LOAD	A,[OF_SIZE+1]
F7/BF: 38C1     	LOADI	C,@+2
F7/C0: FF10     	JUMP	FACONV
F7/C1: AC00     	STORE	[M0],D
F7/C2: 8805     	LOAD	C,[BLK]
F7/C3: 8C06     	LOAD	D,[BLK+1]
F7/C4: A480     	STORE	[DBANK],B
F7/C5: B800     	STOREF	[A+0],C
F7/C6: BC01     	STOREF	[A+1],D
F7/C7: 34FF     	LOADI	B,WORK_B
F7/C8: A480     	STORE	[DBANK],B	
F7/C9: 8C00     	LOAD	D,[M0]
F7/CB:          	
F7/CA:          	; INCREMENT SIZE
F7/CA: 8019     	LOAD	A,[OF_SIZE+1]
F7/CB: 5001     	ADDI	A,1
F7/CC: A019     	STORE	[OF_SIZE+1],A
F7/CD: F1DF     	BRNC	0B
F7/CE: 3001     	LOADI	A,1
F7/CF: A018     	STORE	[OF_SIZE],A
F7/D1:          	
F7/D0:          	; EXECUTE THE READ
F7/D0: FFDC     	JUMP	0B
F7/D2:          
F7/D1:          	; CONVERT TO BANK / ADDRESS FOR BLOCK TABLE LOOP
F7/D1: 34F5     FACONV:	LOADI	B,FBT_B
F7/D2: 4000     	SHIFTL	A
F7/D3: F101     	BRNC	0F
F7/D4: 5402     	ADDI	B,2
F7/D5: 4000     0:	SHIFTL	A
F7/D6: F101     	BRNC	1F
F7/D7: 5401     	ADDI	B,1
F7/D8: C100     1:	SHIFTR	A
F7/D9: FE26     	JUMPR	C
F7/DB:          	
F7/DA:          	; SHADOW OF FCLOSE
F7/DA: 3000     FCLOSEA:LOADI	A,0
F7/DB: A015     	STORE	[OF_OPEN],A
F7/DC: 34F3     	LOADI	B,AL0_B
F7/DD: 3880     	LOADI	C,FLUSH
F7/DE: FF23     	JUMP	INDIR
F7/E0:          	
F7/DF:          	; READ / WRITE ERROR
F7/DF: 30FF     FS2ERR:	LOADI	A,0XFF
F7/E1:          	
F7/E0:          	; INTERNAL FS2 FUNCTION TO RESET TO WORK BANK AND RETURN
F7/E0: 38FF     FS2DONE:LOADI	C,WORK_B
F7/E1: A880     	STORE	[DBANK],C
F7/E2: FF20     	JUMP	IRET
F7/E4:          
F7/E3:          
F7/E3:          	; BANK IS DONE, MOVE ON TO THE NEXT
F7/E3:          BI	= BI-1
F7/E3:          
F7/E3:          ; SYS.S
F7/E3:          ; USER SYSTEM CALL HANDLER
F7/E3:          ; GAVIN TERSTEEG, 2024
F7/E3:          ; SDMAY24-14
F7/E3:          
F7/E3:          .BANK BI
F6/80:          SYS0_B	= BI
F6/80:          .TEXT
F6/80:          
F6/80:          	; SYSTEM CALL HANDLER
F6/80:          	; A = SYSTEM CALL ARGUMENT
F6/80:          	; [M0] = SYSTEM CALL #
F6/80: 8400     SYSHNDL:LOAD	B,[M0]
F6/82:          	
F6/81:          	; 0: S_EXIT
F6/81: 5400     	ADDI	B,0
F6/82: F707     	BRNZ	9F
F6/84:          	
F6/83:          	; CLOSE FILE AND JUMP TO PROMPT
F6/83: 38FF     	LOADI	C,CORE0_B
F6/84: BB01     	STOREF	[D+1],C
F6/85: 38A2     	LOADI	C,DOCMD
F6/86: BB00     	STOREF	[D],C
F6/88:          	
F6/87: 34F9     	LOADI	B,FS0_B
F6/88: 38E6     	LOADI	C,FCLOSE
F6/89: FF78     	JUMP	INDIR
F6/8B:          	
F6/8A:          	; 1: S_PUTC
F6/8A: 7401     9:	SUBI	B,1
F6/8B: F703     	BRNZ	9F
F6/8D:          
F6/8C: 34FC     	LOADI	B,TTY0_B
F6/8D: 388B     	LOADI	C,TTYPUTC
F6/8E: FF73     	JUMP	INDIR
F6/90:          	
F6/8F:          	; 2: S_GETC
F6/8F: 7401     9:	SUBI	B,1
F6/90: F703     	BRNZ	9F
F6/92:          
F6/91: 34FC     	LOADI	B,TTY0_B
F6/92: 389F     	LOADI	C,TTYGETC
F6/93: FF6E     	JUMP	INDIR
F6/95:          	
F6/94:          	; 3: S_STAT
F6/94: 7401     9:	SUBI	B,1
F6/95: F703     	BRNZ	9F
F6/97:          
F6/96: 34FC     	LOADI	B,TTY0_B
F6/97: 38E8     	LOADI	C,TTYSTAT
F6/98: FF69     	JUMP	INDIR
F6/9A:          
F6/99:          	; 4: S_PUTS
F6/99: 7401     9:	SUBI	B,1
F6/9A: F703     	BRNZ	9F
F6/9C:          
F6/9B: 34FC     	LOADI	B,TTY0_B
F6/9C: 3892     	LOADI	C,TTYPUTS
F6/9D: FF64     	JUMP	INDIR
F6/9F:          	
F6/9E:          	; 5: S_INPUT
F6/9E: 7401     9:	SUBI	B,1
F6/9F: F703     	BRNZ	9F
F6/A1:          
F6/A0: 34FC     	LOADI	B,TTY0_B
F6/A1: 38A4     	LOADI	C,TTYINPT
F6/A2: FF5F     	JUMP	INDIR
F6/A4:          	
F6/A3:          	; 6: S_OPEN
F6/A3: 7401     9:	SUBI	B,1
F6/A4: F723     	BRNZ	9F
F6/A6:          
F6/A5:          	; ALLOCATE SPACE ON THE STACK
F6/A5:          	; AND STORE SEARCH ARGUMENT
F6/A5: 7C03     	SUBI	D,3
F6/A6: B302     	STOREF	[D+2],A
F6/A8:          
F6/A7:          	; START BY CLOSING THE FILE
F6/A7: 38F6     	LOADI	C,BI
F6/A8: BB01     	STOREF	[D+1],C
F6/A9: 38AE     	LOADI	C,@+5
F6/AA: BB00     	STOREF	[D],C
F6/AC:          	
F6/AB: 34F9     	LOADI	B,FS0_B
F6/AC: 38E6     	LOADI	C,FCLOSE
F6/AD: FF54     	JUMP	INDIR
F6/AF:          	
F6/AE:          	; GET THE DEFAULT USER AREA
F6/AE: 3800     	LOADI	C,0
F6/AF: A880     	STORE	[DBANK],C
F6/B0: 846B     	LOAD	B,[DFT_USR]
F6/B2:          	
F6/B1:          	; SET THE WORKING USER AREA
F6/B1: 38FF     	LOADI	C,WORK_B
F6/B2: A880     	STORE	[DBANK],C
F6/B3: A408     	STORE	[WRK_USR],B
F6/B5:          
F6/B4:          	; ATTEMPT TO SET PARAMETERS FOR SEARCH
F6/B4: 9302     	LOADF	A,[D+2]
F6/B5: 38BA     	LOADI	C,@+5
F6/B6: BB00     	STOREF	[D],C
F6/B8:          	
F6/B7: 34F9     	LOADI	B,FS0_B
F6/B8: 3880     	LOADI	C,SSPARAM
F6/B9: FF48     	JUMP	INDIR
F6/BB:          	
F6/BA:          	; CHECK TO MAKE SURE IT RETURNS 0X00
F6/BA: 5000     	ADDI	A,0
F6/BB: F724     	BRNZ	SYSERR0
F6/BD:          	
F6/BC:          	; AND SEARCH FOR IT
F6/BC: 3000     	LOADI	A,0
F6/BD: 38C2     	LOADI	C,@+5
F6/BE: BB00     	STOREF	[D],C
F6/C0:          	
F6/BF: 34F9     	LOADI	B,FS0_B
F6/C0: 38D9     	LOADI	C,FSEARCH
F6/C1: FF40     	JUMP	INDIR
F6/C3:          	
F6/C2:          	; DID IT WORK?
F6/C2: 5000     	ADDI	A,0
F6/C3: F71C     	BRNZ	SYSERR0
F6/C5:          	
F6/C4:          	; NOW OPEN IT
F6/C4: 5C03     	ADDI	D,3
F6/C6:          	
F6/C5: 34F9     	LOADI	B,FS0_B
F6/C6: 38E3     	LOADI	C,FOPEN
F6/C7: FF3A     	JUMP	INDIR
F6/C9:          	
F6/C8:          	; 7: S_CLOSE
F6/C8: 7401     9:	SUBI	B,1
F6/C9: F703     	BRNZ	9F
F6/CB:          
F6/CA: 34F9     	LOADI	B,FS0_B
F6/CB: 38E6     	LOADI	C,FCLOSE
F6/CC: FF35     	JUMP	INDIR
F6/CE:          	
F6/CD:          	; 8: S_READ
F6/CD: 7401     9:	SUBI	B,1
F6/CE: F706     	BRNZ	9F
F6/D0:          	
F6/CF:          	; CHECK TO MAKE SURE A FILE IS OPEN
F6/CF: 8415     	LOAD	B,[OF_OPEN]
F6/D0: 5400     	ADDI	B,0
F6/D1: F60E     	BRZ	SYSERR0
F6/D3:          
F6/D2: 34F9     	LOADI	B,FS0_B
F6/D3: 38E9     	LOADI	C,FREAD
F6/D4: FF2D     	JUMP	INDIR
F6/D6:          	
F6/D5:          	; 9: S_WRITE
F6/D5: 7401     9:	SUBI	B,1
F6/D6: A400     	STORE	[M0],B
F6/D7: 34F5     	LOADI	B,SYS1_B
F6/D8: 3880     	LOADI	C,9F
F6/D9: F728     	BRNZ	INDIR
F6/DB:          	
F6/DA:          	; CHECK TO MAKE SURE A FILE IS OPEN
F6/DA: 8415     	LOAD	B,[OF_OPEN]
F6/DB: 5400     	ADDI	B,0
F6/DC: F603     	BRZ	SYSERR0
F6/DE:          
F6/DD: 34F9     	LOADI	B,FS0_B
F6/DE: 38EC     	LOADI	C,FWRITE
F6/DF: FF22     	JUMP	INDIR
F6/E1:          	
F6/E0:          	; SYSCALL ERROR
F6/E0: 5C03     SYSERR0:ADDI	D,3
F6/E1: 30FF     	LOADI	A,0XFF
F6/E2: FF20     	JUMP	IRET
F6/E4:          	
F6/E3:          	; BANK IS DONE, MOVE ON TO THE NEXT
F6/E3:          BI	= BI-1
F6/E3:          .BANK BI
F5/80:          SYS1_B	= BI
F5/80:          .TEXT
F5/80:          
F5/80:          	; 10: S_FSRCH
F5/80: 8400     9:	LOAD	B,[M0]
F5/81: 7401     	SUBI	B,1
F5/82: F71A     	BRNZ	9F
F5/84:          	
F5/83:          	; ALLOCATE SPACE ON THE STACK
F5/83:          	; AND STORE SEARCH ARGUMENT
F5/83: 7C03     	SUBI	D,3
F5/84: B302     	STOREF	[D+2],A
F5/86:          	
F5/85:          	; CHECK TO MAKE SURE THE FILE IS CLOSED
F5/85: 8415     	LOAD	B,[OF_OPEN]
F5/86: 5400     	ADDI	B,0
F5/87: F74A     	BRNZ	SYSERR1
F5/89:          	
F5/88:          	; GET THE DEFAULT USER AREA
F5/88: 3800     	LOADI	C,0
F5/89: A880     	STORE	[DBANK],C
F5/8A: 846B     	LOAD	B,[DFT_USR]
F5/8C:          	
F5/8B:          	; SET THE WORKING USER AREA
F5/8B: 38FF     	LOADI	C,WORK_B
F5/8C: A880     	STORE	[DBANK],C
F5/8D: A408     	STORE	[WRK_USR],B
F5/8F:          
F5/8E:          	; ATTEMPT TO SET PARAMETERS FOR SEARCH
F5/8E: 38F5     	LOADI	C,BI
F5/8F: BB01     	STOREF	[D+1],C
F5/90: 9302     	LOADF	A,[D+2]
F5/91: 3896     	LOADI	C,@+5
F5/92: BB00     	STOREF	[D],C
F5/94:          	
F5/93: 34F9     	LOADI	B,FS0_B
F5/94: 3880     	LOADI	C,SSPARAM
F5/95: FF6C     	JUMP	INDIR
F5/97:          	
F5/96:          	; CHECK TO MAKE SURE IT RETURNS 0X00
F5/96: 5000     	ADDI	A,0
F5/97: F73A     	BRNZ	SYSERR1
F5/99:          	
F5/98:          	; AND SEARCH FOR IT
F5/98: 3000     	LOADI	A,0
F5/99: 5C03     	ADDI	D,3
F5/9B:          	
F5/9A: 34F9     	LOADI	B,FS0_B
F5/9B: 38D9     	LOADI	C,FSEARCH
F5/9C: FF65     	JUMP	INDIR
F5/9E:          	
F5/9D:          	; 11: S_NEXT
F5/9D: 7401     9:	SUBI	B,1
F5/9E: F708     	BRNZ	9F
F5/A0:          	
F5/9F:          	; CHECK TO MAKE SURE THE FILE IS CLOSED
F5/9F: 8415     	LOAD	B,[OF_OPEN]
F5/A0: 5400     	ADDI	B,0
F5/A1: 30FF     	LOADI	A,0XFF
F5/A2: F760     	BRNZ	IRET
F5/A4:          
F5/A3: 3001     	LOADI	A,1
F5/A4: 34F9     	LOADI	B,FS0_B
F5/A5: 38D9     	LOADI	C,FSEARCH
F5/A6: FF5B     	JUMP	INDIR
F5/A8:          	
F5/A7:          	; 12: S_DELET
F5/A7: 7401     9:	SUBI	B,1
F5/A8: F707     	BRNZ	9F
F5/AA:          	
F5/A9:          	; CHECK TO MAKE SURE THE FILE IS OPEN
F5/A9: 8415     	LOAD	B,[OF_OPEN]
F5/AA: 5400     	ADDI	B,0
F5/AB: 30FF     	LOADI	A,0XFF
F5/AC: F656     	BRZ	IRET
F5/AE:          
F5/AD:          	; FREE THE FILE
F5/AD: 34F3     	LOADI	B,AL0_B
F5/AE: 38BE     	LOADI	C,FFREE
F5/AF: FF52     	JUMP	INDIR
F5/B1:          	
F5/B0:          	; 13: S_CREAT
F5/B0: 7401     9:	SUBI	B,1
F5/B1: F703     	BRNZ	9F
F5/B3:          
F5/B2: 34F4     	LOADI	B,SYS2_B
F5/B3: 3880     	LOADI	C,SCREAT
F5/B4: FF4D     	JUMP	INDIR
F5/B6:          	
F5/B5:          	; 14: S_FREE
F5/B5: 7401     9:	SUBI	B,1
F5/B6: F708     	BRNZ	9F
F5/B8:          	
F5/B7:          	; CHECK TO MAKE SURE THE FILE IS CLOSED
F5/B7: 8415     	LOAD	B,[OF_OPEN]
F5/B8: 5400     	ADDI	B,0
F5/B9: 30FF     	LOADI	A,0XFF
F5/BA: F748     	BRNZ	IRET
F5/BC:          	
F5/BB: 30FF     	LOADI	A,0XFF
F5/BC: 34F3     	LOADI	B,AL0_B
F5/BD: 38B5     	LOADI	C,INDEX
F5/BE: FF43     	JUMP	INDIR
F5/C0:          	
F5/BF:          	; 15: S_EXEC
F5/BF: 7401     9:	SUBI	B,1
F5/C0: F705     	BRNZ	9F
F5/C2:          	
F5/C1:          	; SET WORKING USER AREA TO COMMAND LINE BANK
F5/C1: 30FE     	LOADI	A,CMDL_B
F5/C2: A008     	STORE	[WRK_USR],A
F5/C4:          	
F5/C3: 34FF     	LOADI	B,CORE0_B
F5/C4: 3880     	LOADI	C,EXEC
F5/C5: FF3C     	JUMP	INDIR
F5/C7:          	
F5/C6:          	; 16: S_PRNTC
F5/C6: 7401     9:	SUBI	B,1
F5/C7: F703     	BRNZ	9F
F5/C9:          	
F5/C8: 34FA     	LOADI	B,PRT0_B
F5/C9: 3881     	LOADI	C,PRTPUTC
F5/CA: FF37     	JUMP	INDIR
F5/CC:          	
F5/CB:          	; 17: S_PSTAT
F5/CB: 7401     9:	SUBI	B,1
F5/CC: F703     	BRNZ	9F
F5/CE:          	
F5/CD: 34FA     	LOADI	B,PRT0_B
F5/CE: 38A7     	LOADI	C,PRTSTAT
F5/CF: FF32     	JUMP	INDIR
F5/D1:          	
F5/D0:          	; UNKNOWN SYSCALL
F5/D0: 30FF     9:	LOADI	A,0XFF
F5/D1: FF31     	JUMP	IRET
F5/D3:          
F5/D2:          	; SYSCALL ERROR
F5/D2: 5C03     SYSERR1:ADDI	D,3
F5/D3: 30FF     	LOADI	A,0XFF
F5/D4: FF2E     	JUMP	IRET
F5/D6:          	
F5/D5:          	; BANK IS DONE, MOVE ON TO THE NEXT
F5/D5:          BI	= BI-1
F5/D5:          .BANK BI
F4/80:          SYS2_B	= BI
F4/80:          .TEXT
F4/80:          
F4/80:          	; SYSTEM CREATE ROUTINE
F4/80:          	; ALLOCATE SPACE ON THE STACK
F4/80:          	; AND STORE SEARCH ARGUMENT
F4/80: 7C03     SCREAT:	SUBI	D,3
F4/81: B302     	STOREF	[D+2],A
F4/83:          
F4/82:          	; START BY CLOSING THE FILE
F4/82: 38F4     	LOADI	C,BI
F4/83: BB01     	STOREF	[D+1],C
F4/84: 3889     	LOADI	C,@+5
F4/85: BB00     	STOREF	[D],C
F4/86: 34F9     	LOADI	B,FS0_B
F4/87: 38E6     	LOADI	C,FCLOSE
F4/88: FF79     	JUMP	INDIR
F4/8A:          	
F4/89:          	; GET THE DEFAULT USER AREA
F4/89: 3800     	LOADI	C,0
F4/8A: A880     	STORE	[DBANK],C
F4/8B: 846B     	LOAD	B,[DFT_USR]
F4/8D:          	
F4/8C:          	; SET THE WORKING USER AREA
F4/8C: 38FF     	LOADI	C,WORK_B
F4/8D: A880     	STORE	[DBANK],C
F4/8E: A408     	STORE	[WRK_USR],B
F4/90:          
F4/8F:          	; ATTEMPT TO SET PARAMETERS FOR SEARCH
F4/8F: 9302     	LOADF	A,[D+2]
F4/90: 3895     	LOADI	C,@+5
F4/91: BB00     	STOREF	[D],C
F4/92: 34F9     	LOADI	B,FS0_B
F4/93: 3880     	LOADI	C,SSPARAM
F4/94: FF6D     	JUMP	INDIR
F4/95: 5000     	ADDI	A,0
F4/96: F722     	BRNZ	SYSERR2
F4/98:          	
F4/97:          	; CHECK PATTERN FOR WILDCARDS
F4/97: 3407     	LOADI	B,MATCH
F4/98: 380A     	LOADI	C,10
F4/99: 9100     0:	LOADF	A,[B]
F4/9A: 703F     	SUBI	A,'?'
F4/9B: 30FF     	LOADI	A,0XFF
F4/9C: F61C     	BRZ	SYSERR2
F4/9D: 7801     	SUBI	C,1
F4/9E: F7FA     	BRNZ	0B
F4/A0:          	
F4/9F:          	; AND SEARCH FOR IT
F4/9F: 3000     	LOADI	A,0
F4/A0: 38A5     	LOADI	C,@+5
F4/A1: BB00     	STOREF	[D],C
F4/A2: 34F9     	LOADI	B,FS0_B
F4/A3: 38D9     	LOADI	C,FSEARCH
F4/A4: FF5D     	JUMP	INDIR
F4/A5: 5000     	ADDI	A,0
F4/A6: F70E     	BRNZ	1F
F4/A8:          	
F4/A7:          	; NOW OPEN IT
F4/A7: 38AC     	LOADI	C,@+5
F4/A8: BB00     	STOREF	[D],C
F4/A9: 34F9     	LOADI	B,FS0_B
F4/AA: 38E3     	LOADI	C,FOPEN
F4/AB: FF56     	JUMP	INDIR
F4/AC: 5000     	ADDI	A,0
F4/AD: F70B     	BRNZ	SYSERR2
F4/AF:          	
F4/AE:          	; AND FREE IT
F4/AE: 38B3     	LOADI	C,@+5
F4/AF: BB00     	STOREF	[D],C
F4/B0: 34F3     	LOADI	B,AL0_B
F4/B1: 38BE     	LOADI	C,FFREE
F4/B2: FF4F     	JUMP	INDIR
F4/B3: 5000     	ADDI	A,0
F4/B4: F704     	BRNZ	SYSERR2
F4/B6:          
F4/B5:          	; NOW WE CAN ALLOCATE A NEW FILE
F4/B5: 5C03     1:	ADDI	D,3
F4/B6: 34F3     	LOADI	B,AL0_B
F4/B7: 38C1     	LOADI	C,FALLOC
F4/B8: FF49     	JUMP	INDIR
F4/BA:          	
F4/B9:          	; SYSCALL ERROR
F4/B9: 5C03     SYSERR2:ADDI	D,3
F4/BA: 30FF     	LOADI	A,0XFF
F4/BB: FF47     	JUMP	IRET
F4/BD:          
F4/BC:          	; BANK IS DONE, MOVE ON TO THE NEXT
F4/BC:          BI	= BI-1
F4/BC:          
F4/BC:          ; ALLOC.S
F4/BC:          ; BLOCK ALLOCATION MANAGEMENT
F4/BC:          ; GAVIN TERSTEEG, 2024
F4/BC:          ; SDMAY24-14
F4/BC:          
F4/BC:          .BANK BI
F3/80:          AL0_B	= BI
F3/80:          .TEXT
F3/80:          
F3/80:          	; FLUSH ANY BUFFERS THAT MAY HAVE BECOME DIRTY
F3/80:          	; ASSUMES WORK BANK IS SELECTED
F3/80:          	; USES: A, B, C, M0
F3/80: 7C02     FLUSH:	SUBI	D,2
F3/81: 38F3     	LOADI	C,BI
F3/82: BB01     	STOREF	[D+1],C
F3/84:          
F3/83:          	; CHECK IF OPEN FILE IS DIRTY
F3/83: 801A     	LOAD	A,[OF_DRTY]
F3/84: 5000     	ADDI	A,0
F3/85: F61E     	BRZ	1F
F3/87:          	
F3/86:          	; RESET OPEN FILE DIRTY FLAG
F3/86: 3000     	LOADI	A,0
F3/87: A01A     	STORE	[OF_DRTY],A
F3/89:          	
F3/88:          	; MOVE FILE SIZE BACK INTO FILE RECORD
F3/88: AC00     	STORE	[M0],D
F3/89: 8818     	LOAD	C,[OF_SIZE]
F3/8A: 8C19     	LOAD	D,[OF_SIZE+1]
F3/8B: 8013     	LOAD	A,[SRCH_RP]
F3/8C: 8412     	LOAD	B,[SRCH_BK]
F3/8D: A480     	STORE	[DBANK],B
F3/8E: B80A     	STOREF	[A+10],C
F3/8F: BC0B     	STOREF	[A+11],D
F3/90: 34FF     	LOADI	B,WORK_B
F3/91: A480     	STORE	[DBANK],B
F3/92: 8C00     	LOAD	D,[M0]
F3/94:          
F3/93:          	; EXECUTE WRITES FOR FILE RECORD AND BTAB
F3/93: 3000     	LOADI	A,0
F3/94: 8411     	LOAD	B,[SRCH_LO]
F3/95: A005     	STORE	[BLK],A
F3/96: A406     	STORE	[BLK+1],B
F3/98:          	
F3/97:          	; WRITE FILE RECORD
F3/97: 30F1     	LOADI	A,KBUF_B
F3/98: 389D     	LOADI	C,@+5
F3/99: BB00     0:	STOREF	[D],C
F3/9A: 34FB     	LOADI	B,BLK0_B
F3/9B: 38A4     	LOADI	C,BLKWRIT
F3/9C: FF65     	JUMP	INDIR
F3/9E:          	
F3/9D:          	; GET ADDRESS OF THE FILE BLOCK TABLE
F3/9D: 8016     	LOAD	A,[OF_BTAB]
F3/9E: 8417     	LOAD	B,[OF_BTAB+1]
F3/9F: A005     	STORE	[BLK],A
F3/A0: A406     	STORE	[BLK+1],B
F3/A2:          	
F3/A1:          	; WRITE FILE BLOCK TABLE
F3/A1: 30F5     	LOADI	A,FBT_B
F3/A2: 38A4     	LOADI	C,@+2
F3/A3: FFF5     	JUMP	0B
F3/A5:          	
F3/A4:          	; CHECK IF ALLOCATION BITMAP IS DIRTY
F3/A4: 8021     1:	LOAD	A,[AB_DRTY]
F3/A5: 5000     	ADDI	A,0
F3/A6: F609     	BRZ	2F
F3/A8:          	
F3/A7:          	; RESET ALLOCATION BITMAP DIRTY FLAG
F3/A7: 3000     	LOADI	A,0
F3/A8: A021     	STORE	[AB_DRTY],A
F3/AA:          	
F3/A9:          	; GET ADDRESS OF CURRENT ALLOCATION BITMAP BLOCK
F3/A9: 3000     	LOADI	A,0
F3/AA: 8420     	LOAD	B,[AB_CBLK]
F3/AB: A005     	STORE	[BLK],A
F3/AC: A406     	STORE	[BLK+1],B
F3/AE:          
F3/AD:          	; WRITE ALLOCATION BITMAP
F3/AD: 30F9     	LOADI	A,ABM_B
F3/AE: 38B0     	LOADI	C,@+2
F3/AF: FFE9     	JUMP	0B
F3/B1:          
F3/B0:          	; RESET STACK AND RETURN
F3/B0: 5C02     2:	ADDI	D,2
F3/B1: 30FF     	LOADI	A,WORK_B
F3/B2: A080     	STORE	[DBANK],A
F3/B3: 3000     	LOADI	A,0
F3/B4: FF4E     	JUMP	IRET
F3/B6:          	
F3/B5:          	; INDEX ALLOCATION BITMAP
F3/B5:          	; SEARCHES FOR A BLOCK IN THE ALLOCATION TABLE
F3/B5:          	; THAT CONTAINS AN EMPTY BLOCK OR ALLOCATED BLOCK
F3/B5:          	; ASSUMES WORK BANK IS SELECTED
F3/B5:          	; A = 0 IF LOOKING FOR EMPTY BLOCK, A = 1 IF LOOKING FOR FULL BLOCK
F3/B5:          	; A = 0XFF IF COUNTING FREE BLOCKS
F3/B5:          	; RETURNS A = 0 IF OPERATION IS SUCCESSFUL, A = 0XFF OTHERWISE
F3/B5:          	; USES: A, B, C, M0, M1, M2
F3/B5: 34F2     INDEX:	LOADI	B,AL1_B
F3/B6: 3880     	LOADI	C,INDEXA
F3/B7: FF4A     	JUMP	INDIR
F3/B9:          	
F3/B8:          	; ALLOCATE BLOCK ON DISK
F3/B8:          	; LOOKS FOR AN UNUSED BLOCK IN THE ALLOCATION BITMAP,
F3/B8:          	; RESERVES IT, AND THEN RETURNS IT.
F3/B8:          	; ADDRESS WILL BE RETURNED IN [BLK]
F3/B8:          	; RETURNS A = 0 IF OPERATION IS SUCCESSFUL, A = 0XFF OTHERWISE
F3/B8:          	; USES: A, B, C, M0, M1, M2
F3/B8: 34F1     ALLOC:	LOADI	B,AL2_B
F3/B9: 3880     	LOADI	C,ALLOCA
F3/BA: FF47     	JUMP	INDIR
F3/BC:          	
F3/BB:          	; FREE BLOCK ON DISK
F3/BB:          	; GIVEN A BLOCK IN [AB_FREE], THE ABM WILL BE
F3/BB:          	; SEARCHED AND THAT BIT WILL BE MARKED AS UNALLOCATED
F3/BB:          	; [AB_FREE] = BLOCK TO FREE
F3/BB:          	; USES: A, B, C, M0, M1, M2
F3/BB: 34F0     FREE:	LOADI	B,AL3_B
F3/BC: 3880     	LOADI	C,FREEA
F3/BD: FF44     	JUMP	INDIR
F3/BF:          	
F3/BE:          	; FREE A FILE
F3/BE:          	; GIVEN AN OPEN FILE, ALL OWNED BLOCKS WILL BE FREED
F3/BE:          	; AND ITS FILE RECORD WILL BE MARKED EMPTY
F3/BE:          	; USES: A, B, C, M0, M1, M2
F3/BE: 34EF     FFREE:	LOADI	B,AL4_B
F3/BF: 3880     	LOADI	C,FFREEA
F3/C0: FF41     	JUMP	INDIR
F3/C2:          	
F3/C1:          	; ALLOCATE A FILE
F3/C1:          	; A FILE RECORD WILL BE RESERVED AND A NEW FILE BLOCK TABLE
F3/C1:          	; WILL BE ALLOCATED
F3/C1:          	; THE FILE WILL BE GIVEN THE NAME OF THE CURRENT FILE MATCH PARAMETER
F3/C1:          	; NO WILDCARDS SHOULD APPEAR IN THE MATCH STRING
F3/C1:          	; USES: A, B, C, M0, M1, M2
F3/C1: 34EE     FALLOC:	LOADI	B,AL5_B
F3/C2: 3880     	LOADI	C,FALLOCA
F3/C3: FF3E     	JUMP	INDIR
F3/C5:          
F3/C4:          	; BANK IS DONE, MOVE ON TO THE NEXT
F3/C4:          BI	= BI-1
F3/C4:          .BANK BI
F2/80:          AL1_B	= BI
F2/80:          .TEXT
F2/80:          	
F2/80:          BD_FREE	= 0X6E
F2/80:          	
F2/80:          	; SHADOW OF INDEX
F2/80: A001     INDEXA: STORE	[M1],A
F2/81: 7C02     	SUBI	D,2
F2/83:          
F2/82:          	; DO WE RESET THE BLOCK COUNT?
F2/82: 5000     	ADDI	A,0
F2/83: F506     	BRNN	0F
F2/85:          	
F2/84:          	; YES, WE DO
F2/84: 3000     	LOADI	A,0
F2/85: A080     	STORE	[DBANK],A
F2/86: A06E     	STORE	[BD_FREE],A
F2/87: A06F     	STORE	[BD_FREE+1],A
F2/89:          	
F2/88:          	; SWITCH BACK THE WORK BANK AND CONTINUE
F2/88: 30FF     	LOADI	A,WORK_B
F2/89: A080     	STORE	[DBANK],A
F2/8B:          	
F2/8A:          	; BEFORE WE DO ANY WORK, LETS FLUSH THE EXISTING BUFFERS
F2/8A: 38F2     0:	LOADI	C,BI
F2/8B: BB01     	STOREF	[D+1],C
F2/8C: 3891     	LOADI	C,@+5
F2/8D: BB00     	STOREF	[D],C
F2/8E: 34F3     	LOADI	B,AL0_B
F2/8F: 3880     	LOADI	C,FLUSH
F2/90: FF71     	JUMP	INDIR
F2/92:          	
F2/91:          	; SET CURRENT AB BLOCK TO 1
F2/91: 3000     	LOADI	A,0
F2/92: A005     	STORE	[BLK],A
F2/93: 3001     	LOADI	A,1
F2/95:          	
F2/94:          	
F2/94:          	; GRAB THE BLOCK AND START PROCESSING
F2/94: A020     0:	STORE	[AB_CBLK],A
F2/95: A006     	STORE	[BLK+1],A
F2/96: 30F9     	LOADI	A,ABM_B
F2/97: 389C     	LOADI	C,@+5
F2/98: BB00     	STOREF	[D],C
F2/99: 34FB     	LOADI	B,BLK0_B
F2/9A: 388B     	LOADI	C,BLKREAD
F2/9B: FF66     	JUMP	INDIR
F2/9D:          	
F2/9C:          	; INIT SEARCH
F2/9C: 3000     	LOADI	A,0
F2/9D: 34F9     	LOADI	B,ABM_B
F2/9F:          	
F2/9E:          	; SEARCH THE BITMAP
F2/9E: A023     1:	STORE	[AB_CPNT],A
F2/9F: A422     	STORE	[AB_BANK],B
F2/A0: A480     	STORE	[DBANK],B
F2/A1: 9800     	LOADF	C,[A]
F2/A2: 34FF     	LOADI	B,WORK_B
F2/A3: A480     	STORE	[DBANK],B
F2/A5:          	
F2/A4:          	; GET BEHAVIOR
F2/A4: 8001     	LOAD	A,[M1]
F2/A5: 5000     	ADDI	A,0
F2/A6: F627     	BRZ	7F
F2/A7: F52A     	BRNN	8F
F2/A9:          	
F2/A8:          	; COUNT BITS IN C
F2/A8: 3000     	LOADI	A,0
F2/A9: A080     	STORE	[DBANK],A
F2/AA: 3408     	LOADI	B,8
F2/AC:          	
F2/AB:          	; KEEP POPPING BITS OFF OF C TILL NONE REMAIN
F2/AB: 4A00     2:	SHIFTL	C
F2/AC: F001     	BRC	3F
F2/AE:          	
F2/AD:          	; ADD 1 TO COUNT
F2/AD: 5001     	ADDI	A,1
F2/AF:          	
F2/AE:          	; ARE WE DONE?
F2/AE: 7401     3:	SUBI	B,1
F2/AF: F7FB     	BRNZ	2B
F2/B1:          	
F2/B0:          	; ADD A TO BIT COUNTER
F2/B0: 846F     	LOAD	B,[BD_FREE+1]
F2/B1: 4400     	ADD	B,A
F2/B2: A46F     	STORE	[BD_FREE+1],B
F2/B3: F103     	BRNC	4F
F2/B4: 846E     	LOAD	B,[BD_FREE]
F2/B5: 5401     	ADDI	B,1
F2/B6: A46E     	STORE	[BD_FREE],B
F2/B8:          	
F2/B7:          	; DONE, BACK TO THE WORK BANK
F2/B7: 30FF     4:	LOADI	A,WORK_B
F2/B8: A080     	STORE	[DBANK],A
F2/BA:          	
F2/B9:          	; GET NEXT CHUNK
F2/B9: 8023     6:	LOAD	A,[AB_CPNT]
F2/BA: 8422     	LOAD	B,[AB_BANK]
F2/BB: 5001     	ADDI	A,1
F2/BC: F5E1     	BRNN	1B
F2/BD: 3000     	LOADI	A,0
F2/BE: 5401     	ADDI	B,1
F2/BF: 38FD     	LOADI	C,ABM_B+4
F2/C0: D600     	CMP	B,C
F2/C1: F7DC     	BRNZ	1B
F2/C3:          	
F2/C2:          	; READ THE NEXT BLOCK
F2/C2: 8020     	LOAD	A,[AB_CBLK]
F2/C3: 5001     	ADDI	A,1
F2/C4: 3411     	LOADI	B,17
F2/C5: D100     	CMP	A,B
F2/C6: F7CD     	BRNZ	0B
F2/C8:          	
F2/C7:          	; WE DIDN'T FIND IT
F2/C7:          	; OR WE ARE JUST DONE COUNTING
F2/C7:          	; COULD BE EITHER
F2/C7: 8401     	LOAD	B,[M1]
F2/C8: 30FF     	LOADI	A,0xFF
F2/C9: 5400     	ADDI	B,0
F2/CA: F50A     	BRNN	9F	; NOPE, RIP :(
F2/CC:          	
F2/CB:          	; YAY, LETS DO IT AGAIN
F2/CB: 3000     	LOADI	A,0
F2/CC: 5C02     	ADDI	D,2
F2/CD: FFB2     	JUMP	INDEXA
F2/CF:          	
F2/CE:          	; CHECK TO SEE IF CHUNK HAS AN EMPTY BLOCK
F2/CE: 5801     7:	ADDI	C,1
F2/CF: F6E9     	BRZ	6B
F2/D0: 3000     	LOADI	A,0
F2/D1: FF03     	JUMP	9F
F2/D3:          
F2/D2:          	; CHECK TO SEE IF CHUNK HAS A FILLED BLOCK
F2/D2: 5800     8:	ADDI	C,0
F2/D3: F6E5     	BRZ	6B
F2/D4: 3000     	LOADI	A,0
F2/D6:          
F2/D5:          	; RESTORE STACK
F2/D5: 5C02     9:	ADDI	D,2
F2/D7:          
F2/D6: 34FF     AL1DONE:LOADI	B,WORK_B
F2/D7: A480     	STORE	[DBANK],B
F2/D8: FF2A     	JUMP	IRET
F2/DA:          
F2/D9:          	; BANK IS DONE, MOVE ON TO THE NEXT
F2/D9:          BI	= BI-1
F2/D9:          .BANK BI
F1/80:          AL2_B	= BI
F1/80:          .TEXT
F1/80:          
F1/80:          	; SHADOW OF ALLOC
F1/80: 7C02     ALLOCA:	SUBI	D,2
F1/82:          
F1/81:          	; START SEARCH FOR AN EMPTY BIT
F1/81: 8422     0:	LOAD	B,[AB_BANK]
F1/82: 8823     	LOAD	C,[AB_CPNT]
F1/83: AC01     	STORE	[M1],D
F1/85:          
F1/84:          	; SEARCH MEMORY BANK
F1/84: A480     1:	STORE	[DBANK],B
F1/86:          
F1/85:          	; CHECK BYTE
F1/85: 9200     2:	LOADF	A,[C]
F1/86: 5001     	ADDI	A,1
F1/87: F715     	BRNZ	3F
F1/88: 5801     	ADDI	C,1
F1/89: F5FB     	BRNN	2B
F1/8B:          	
F1/8A:          	; MOVE ON TO NEXT BANK
F1/8A: 5401     	ADDI	B,1
F1/8B: 38FD     	LOADI	C,ABM_B+4
F1/8C: D600     	CMP	B,C
F1/8D: 3800     	LOADI	C,0
F1/8E: F7F5     	BRNZ	1B
F1/90:          	
F1/8F:          	; AT THIS POINT, JUST RE-INDEX
F1/8F: 30FF     	LOADI	A,WORK_B
F1/90: A080     	STORE	[DBANK],A
F1/91: 3000     	LOADI	A,0
F1/92: 38F1     	LOADI	C,BI
F1/93: BB01     	STOREF	[D+1],C
F1/94: 3899     	LOADI	C,@+5
F1/95: BB00     	STOREF	[D],C
F1/96: 34F3     	LOADI	B,AL0_B
F1/97: 38B5     	LOADI	C,INDEX
F1/98: FF69     	JUMP	INDIR
F1/99: AC01     	STORE	[M1],D
F1/9B:          	
F1/9A:          	; DID IT WORK?
F1/9A: 5000     	ADDI	A,0
F1/9B: F730     	BRNZ	9F
F1/9C: FFE4     	JUMP	0B
F1/9E:          
F1/9D:          	; WE FOUND ONE
F1/9D: 7001     3:	SUBI	A,1
F1/9E: 3CFF     	LOADI	D,WORK_B
F1/9F: AC80     	STORE	[DBANK],D
F1/A1:          	
F1/A0:          	; SAVE BANK AND CPNT
F1/A0: A422     	STORE	[AB_BANK],B
F1/A1: A823     	STORE	[AB_CPNT],C
F1/A3:          	
F1/A2:          	; GET THE BIT #
F1/A2: 3C00     	LOADI	D,0
F1/A3: C100     4:	SHIFTR	A
F1/A4: F102     	BRNC	4F
F1/A5: 5C01     	ADDI	D,1
F1/A6: FFFC     	JUMP	4B
F1/A8:          
F1/A7:          	; STORE IT AND THEN MASK THE ENTRY IN THE ABM
F1/A7: AC00     4:	STORE	[M0],D
F1/A8: 3001     	LOADI	A,1
F1/A9: 7C01     5:	SUBI	D,1
F1/AA: F102     	BRNC	6F
F1/AB: 4000     	SHIFTL	A
F1/AC: FFFC     	JUMP	5B
F1/AD: A480     6:	STORE	[DBANK],B
F1/AE: 9E00     	LOADF	D,[C]
F1/AF: 4C00     	ADD	D,A
F1/B0: BE00     	STOREF	[C],D
F1/B1: 30FF     	LOADI	A,WORK_B
F1/B2: A080     	STORE	[DBANK],A
F1/B4:          	
F1/B3:          	; SET ABM DIRTY FLAG
F1/B3: 30FF     	LOADI	A,0XFF
F1/B4: A021     	STORE	[AB_DRTY],A
F1/B6:          	
F1/B5:          	; CALCULATE WHAT BLOCK # THAT WE JUST ALLOCATED
F1/B5: 8020     	LOAD	A,[AB_CBLK]
F1/B6: 7001     	SUBI	A,1
F1/B7: 4000     	SHIFTL	A
F1/B8: 4000     	SHIFTL	A
F1/B9: 4000     	SHIFTL	A
F1/BA: 4000     	SHIFTL	A
F1/BB: 74F9     	SUBI	B,ABM_B
F1/BC: 4A00     	SHIFTL	C
F1/BD: 4500     	SHIFTL	B
F1/BE: 4A00     	SHIFTL	C
F1/BF: F101     	BRNC	0F
F1/C0: 5401     	ADDI	B,1
F1/C1: 4500     0:	SHIFTL	B
F1/C2: 4A00     	SHIFTL	C
F1/C3: F101     	BRNC	1F
F1/C4: 5401     	ADDI	B,1
F1/C5: 4400     1:	ADD	B,A
F1/C6: 8000     	LOAD	A,[M0]
F1/C7: 4800     	ADD	C,A
F1/C9:          	
F1/C8:          	; SAVE IN [BLK]
F1/C8: 3000     	LOADI	A,0
F1/C9: A405     	STORE	[BLK],B
F1/CA: A806     	STORE	[BLK+1],C
F1/CC:          	
F1/CB:          	; RESTORE THE STACK
F1/CB: 8C01     	LOAD	D,[M1]
F1/CC: 5C02     9:	ADDI	D,2
F1/CE:          
F1/CD: 34FF     AL2DONE:LOADI	B,WORK_B
F1/CE: A480     	STORE	[DBANK],B
F1/CF: FF33     	JUMP	IRET
F1/D1:          
F1/D0:          	; BANK IS DONE, MOVE ON TO THE NEXT
F1/D0:          BI	= BI-1
F1/D0:          .BANK BI
F0/80:          AL3_B	= BI
F0/80:          .TEXT
F0/80:          
F0/80:          	; SHADOW OF FREE
F0/80: 7C02     FREEA:	SUBI	D,2
F0/82:          
F0/81:          	; START BY MAKING SURE AB_CBLK IS CORRECT
F0/81: 8025     0:	LOAD	A,[AB_FREE]
F0/82: 8420     	LOAD	B,[AB_CBLK]
F0/83: C100     	SHIFTR	A
F0/84: C100     	SHIFTR	A
F0/85: C100     	SHIFTR	A
F0/86: C100     	SHIFTR	A
F0/87: 5001     	ADDI	A,1
F0/88: D100     	CMP	A,B
F0/89: F613     	BRZ	1F
F0/8B:          	
F0/8A:          	; NOPE, LET'S FIX THAT
F0/8A:          	; START BY FLUSHING
F0/8A: A001     	STORE	[M1],A
F0/8B: 38F0     	LOADI	C,BI
F0/8C: BB01     	STOREF	[D+1],C
F0/8D: 3892     	LOADI	C,@+5
F0/8E: BB00     	STOREF	[D],C
F0/8F: 34F3     	LOADI	B,AL0_B
F0/90: 3880     	LOADI	C,FLUSH
F0/91: FF70     	JUMP	INDIR
F0/93:          	
F0/92:          	; READ THE CORRECT AB_CBLK
F0/92: 8001     	LOAD	A,[M1]
F0/93: A006     	STORE	[BLK+1],A
F0/94: A020     	STORE	[AB_CBLK],A
F0/95: 3000     	LOADI	A,0
F0/96: A005     	STORE	[BLK],A
F0/97: 30F9     	LOADI	A,ABM_B
F0/98: 3881     	LOADI	C,0B
F0/99: BB00     	STOREF	[D],C
F0/9A: 34FB     	LOADI	B,BLK0_B
F0/9B: 388B     	LOADI	C,BLKREAD
F0/9C: FF65     	JUMP	INDIR
F0/9E:          	
F0/9D:          	; ALL GOOD, NOW LETS GET THE BANK / POINTER / BIT
F0/9D: AC01     1:	STORE	[M1],D
F0/9E: 8025     	LOAD	A,[AB_FREE]
F0/9F: 8426     	LOAD	B,[AB_FREE+1]
F0/A1:          	
F0/A0:          	; FIRST GET THE BIT
F0/A0: 3800     	LOADI	C,0
F0/A1: 3C03     	LOADI	D,3
F0/A2: C900     0:	SHIFTR	C
F0/A3: C500     	SHIFTR	B
F0/A4: F101     	BRNC	1F
F0/A5: 5804     	ADDI	C,0X04
F0/A6: C100     1:	SHIFTR	A
F0/A7: F101     	BRNC	2F
F0/A8: 5480     	ADDI	B,0X80
F0/A9: 7C01     2:	SUBI	D,1
F0/AA: F7F7     	BRNZ	0B
F0/AB: A824     	STORE	[AB_BIT],C
F0/AD:          	
F0/AC:          	; THEN GET THE POINTER
F0/AC: 3800     	LOADI	C,0
F0/AD: 3C07     	LOADI	D,7
F0/AE: C900     0:	SHIFTR	C
F0/AF: C500     	SHIFTR	B
F0/B0: F101     	BRNC	1F
F0/B1: 5840     	ADDI	C,0X40
F0/B2: C100     1:	SHIFTR	A
F0/B3: F101     	BRNC	2F
F0/B4: 5480     	ADDI	B,0X80
F0/B5: 7C01     2:	SUBI	D,1
F0/B6: F7F7     	BRNZ	0B
F0/B7: A823     	STORE	[AB_CPNT],C
F0/B9:          	
F0/B8:          	; WE SHOULD BE LEFT WITH THE CORRECT BANK TOO
F0/B8: 54F9     	ADDI	B,ABM_B
F0/B9: A422     	STORE	[AB_BANK],B
F0/BB:          	
F0/BA:          	; LETS GO MAKE SURE THAT WE CAN ACTUALLY FREE THIS BLOCK
F0/BA: 8024     	LOAD	A,[AB_BIT]
F0/BB: A480     	STORE	[DBANK],B
F0/BC: 9E00     	LOADF	D,[C]
F0/BD: 7001     0:	SUBI	A,1
F0/BE: F102     	BRNC	1F
F0/BF: CD00     	SHIFTR	D
F0/C0: FFFC     	JUMP	0B
F0/C1: CD00     1:	SHIFTR	D
F0/C2: 3CFF     	LOADI	D,WORK_B
F0/C3: AC80     	STORE	[DBANK],D
F0/C5:          
F0/C4:          	; IF IT'S ZERO, WE CAN EXIT RIGHT NOW
F0/C4: F10E     	BRNC	9F
F0/C6:          	
F0/C5:          	; SET ABM DIRTY FLAG
F0/C5: 30FF     	LOADI	A,0XFF
F0/C6: A021     	STORE	[AB_DRTY],A
F0/C8:          	
F0/C7:          	; ALRIGHT, LETS GO DEALLOCATE IT
F0/C7: 8024     	LOAD	A,[AB_BIT]
F0/C8: 3C01     	LOADI	D,1
F0/C9: 7001     0:	SUBI	A,1
F0/CA: F102     	BRNC	1F
F0/CB: 4F00     	SHIFTL	D
F0/CC: FFFC     	JUMP	0B
F0/CD: A480     1:	STORE	[DBANK],B
F0/CE: 9200     	LOADF	A,[C]
F0/CF: 6300     	SUB	A,D
F0/D0: B200     	STOREF	[C],A
F0/D1: 30FF     	LOADI	A,WORK_B
F0/D2: A080     	STORE	[DBANK],A
F0/D4:          
F0/D3:          	; RESTORE THE STACK
F0/D3: 8C01     9:	LOAD	D,[M1]
F0/D4: 5C02     	ADDI	D,2
F0/D6:          
F0/D5: 34FF     AL3DONE:LOADI	B,WORK_B
F0/D6: A480     	STORE	[DBANK],B
F0/D7: FF2B     	JUMP	IRET
F0/D9:          	
F0/D8:          	; BANK IS DONE, MOVE ON TO THE NEXT
F0/D8:          BI	= BI-1
F0/D8:          .BANK BI
EF/80:          AL4_B	= BI
EF/80:          .TEXT
EF/80:          
EF/80:          	; SHADOW OF FFREE
EF/80: 7C02     FFREEA:	SUBI	D,2
EF/82:          
EF/81:          	; SET RETURN BANK
EF/81: 38EF     	LOADI	C,BI
EF/82: BB01     	STOREF	[D+1],C
EF/84:          
EF/83:          	; START BY FREEING ALL FILE CONTENT BLOCKS IN BTAB
EF/83: 8019     0:	LOAD	A,[OF_SIZE+1]
EF/84: 7001     	SUBI	A,1
EF/85: A019     	STORE	[OF_SIZE+1],A
EF/86: F004     	BRC	1F
EF/87: 8018     	LOAD	A,[OF_SIZE]
EF/88: 7001     	SUBI	A,1
EF/89: A018     	STORE	[OF_SIZE],A
EF/8A: F117     	BRNC	4F
EF/8C:          
EF/8B:          	; FREE BLOCK POINTED TO BY [OF_SIZE]
EF/8B: 8019     1:	LOAD	A,[OF_SIZE+1]
EF/8C: 34F5     	LOADI	B,FBT_B
EF/8D: 4000     	SHIFTL	A
EF/8E: F101     	BRNC	2F
EF/8F: 5402     	ADDI	B,2
EF/90: 4000     2:	SHIFTL	A
EF/91: F101     	BRNC	3F
EF/92: 5401     	ADDI	B,1
EF/93: C100     3:	SHIFTR	A
EF/95:          	
EF/94:          	; GET THE BLOCK
EF/94: AC00     	STORE	[M0],D
EF/95: A480     	STORE	[DBANK],B
EF/96: 9800     	LOADF	C,[A+0]
EF/97: 9C01     	LOADF	D,[A+1]
EF/98: 34FF     	LOADI	B,WORK_B
EF/99: A480     	STORE	[DBANK],B
EF/9A: A825     	STORE	[AB_FREE],C
EF/9B: AC26     	STORE	[AB_FREE+1],D	
EF/9C: 8C00     	LOAD	D,[M0]
EF/9E:          	
EF/9D:          	; CALL FREE
EF/9D: 3883     	LOADI	C,0B
EF/9E: BB00     	STOREF	[D],C
EF/9F: 34F3     	LOADI	B,AL0_B
EF/A0: 38BB     	LOADI	C,FREE
EF/A1: FF60     	JUMP	INDIR
EF/A3:          
EF/A2:          	; NEXT, WE FREE THE BLOCK TABLE ITSELF
EF/A2: 8016     4:	LOAD	A,[OF_BTAB]
EF/A3: 8417     	LOAD	B,[OF_BTAB+1]
EF/A4: A025     	STORE	[AB_FREE],A
EF/A5: A426     	STORE	[AB_FREE+1],B	
EF/A7:          	
EF/A6:          	; CALL FREE
EF/A6: 38AB     	LOADI	C,@+5
EF/A7: BB00     	STOREF	[D],C
EF/A8: 34F3     	LOADI	B,AL0_B
EF/A9: 38BB     	LOADI	C,FREE
EF/AA: FF57     	JUMP	INDIR
EF/AC:          	
EF/AB:          	; FINALLY, WE STRIKE OUT THE FILE RECORD
EF/AB: 8013     	LOAD	A,[SRCH_RP]
EF/AC: 8412     	LOAD	B,[SRCH_BK]
EF/AD: 3800     	LOADI	C,0
EF/AE: A480     	STORE	[DBANK],B
EF/AF: B800     	STOREF	[A],C
EF/B0: 34FF     	LOADI	B,WORK_B
EF/B1: A480     	STORE	[DBANK],B
EF/B3:          	
EF/B2:          	; RESET OPEN FILE FLAG
EF/B2: 3000     	LOADI	A,0
EF/B3: A015     	STORE	[OF_OPEN],A
EF/B5:          
EF/B4:          	; SET THE FILE DIRTY FLAG
EF/B4: 30FF     	LOADI	A,0XFF
EF/B5: A01A     	STORE	[OF_DRTY],A
EF/B7:          
EF/B6:          	; RESTORE THE STACK
EF/B6: 5C02     	ADDI	D,2
EF/B8:          	
EF/B7:          	; DO ONE FINAL FLUSH
EF/B7: 34F3     	LOADI	B,AL0_B
EF/B8: 3880     	LOADI	C,FLUSH
EF/B9: FF48     	JUMP	INDIR
EF/BB:          	
EF/BA:          	; BANK IS DONE, MOVE ON TO THE NEXT
EF/BA:          BI	= BI-1
EF/BA:          .BANK BI
EE/80:          AL5_B	= BI
EE/80:          .TEXT
EE/80:          
EE/80:          	; SHADOW OF FALLOC
EE/80: 7C02     FALLOCA:SUBI	D,2
EE/82:          	
EE/81:          	; LOOK FOR AN EMPTY FILE RECORD
EE/81: 3000     	LOADI	A,0
EE/82: 38EE     	LOADI	C,BI
EE/83: BB01     	STOREF	[D+1],C
EE/84: 3889     	LOADI	C,@+5
EE/85: BB00     	STOREF	[D],C
EE/86: 34F9     	LOADI	B,FS0_B
EE/87: 38D7     	LOADI	C,FEMPTY
EE/88: FF79     	JUMP	INDIR
EE/89: 5000     	ADDI	A,0
EE/8A: F72B     	BRNZ	9F
EE/8C:          	
EE/8B:          	; LETS ALLOCATE A BLOCK FOR THE FBT NOW
EE/8B: 3890     	LOADI	C,@+5
EE/8C: BB00     	STOREF	[D],C
EE/8D: 34F3     	LOADI	B,AL0_B
EE/8E: 38B8     	LOADI	C,ALLOC
EE/8F: FF72     	JUMP	INDIR
EE/90: 5000     	ADDI	A,0
EE/91: F724     	BRNZ	9F
EE/93:          	
EE/92:          	; COPY FBT ADDRESS INTO RECORD
EE/92: AC00     	STORE	[M0],D
EE/93: 8005     	LOAD	A,[BLK]
EE/94: 8406     	LOAD	B,[BLK+1]
EE/95: 8813     	LOAD	C,[SRCH_RP]
EE/96: 8C12     	LOAD	D,[SRCH_BK]
EE/97: AC80     	STORE	[DBANK],D
EE/98: B20D     	STOREF	[C+13],A
EE/99: B60E     	STOREF	[C+14],B
EE/9A: 3000     	LOADI	A,0
EE/9B: B20A     	STOREF	[C+10],A	; RESET FILE SIZE WHILE WE ARE HERE
EE/9C: B20B     	STOREF	[C+11],A
EE/9D: 30FF     	LOADI	A,WORK_B
EE/9E: A080     	STORE	[DBANK],A
EE/A0:          	
EE/9F:          	; COPY PATTERN INTO FILE RECORD
EE/9F: 3C09     	LOADI	D,9
EE/A0: 3807     0:	LOADI	C,MATCH
EE/A1: 8413     	LOAD	B,[SRCH_RP]
EE/A2: 8012     	LOAD	A,[SRCH_BK]
EE/A3: 4B00     	ADD	C,D
EE/A4: 9A00     	LOADF	C,[C]
EE/A5: A080     	STORE	[DBANK],A
EE/A6: 4700     	ADD	B,D
EE/A7: B900     	STOREF	[B],C
EE/A8: 30FF     	LOADI	A,WORK_B
EE/A9: A080     	STORE	[DBANK],A
EE/AA: 7C01     	SUBI	D,1
EE/AB: F101     	BRNC	1F
EE/AC: FFF3     	JUMP	0B
EE/AE:          	
EE/AD:          	; ATTEMPT TO OPEN FILE
EE/AD: 8C00     1:	LOAD	D,[M0]
EE/AE: 38B3     	LOADI	C,@+5
EE/AF: BB00     	STOREF	[D],C
EE/B0: 34F9     	LOADI	B,FS0_B
EE/B1: 38E3     	LOADI	C,FOPEN
EE/B2: FF4F     	JUMP	INDIR
EE/B4:          	
EE/B3:          	; SET FILE AS DIRTY
EE/B3: 30FF     	LOADI	A,0XFF
EE/B4: A01A     	STORE	[OF_DRTY],A
EE/B5: 3000     	LOADI	A,0
EE/B7:          
EE/B6:          	; RESTORE STACK AND EXIT
EE/B6: 5C02     9:	ADDI	D,2
EE/B7: 34FF     	LOADI	B,WORK_B
EE/B8: A480     	STORE	[DBANK],B
EE/B9: FF49     	JUMP	IRET
EE/BB:          
EE/BA:          	; BANK IS DONE, MOVE ON TO THE NEXT
EE/BA:          BI	= BI-1
EE/BA:          
EE/BA:          ; END.S
EE/BA:          ; DEFINES SYMBOLS BASED ON ASSEMBLY STATE
EE/BA:          ; GAVIN TERSTEEG, 2024
EE/BA:          ; SDMAY24-14
EE/BA:          
EE/BA:          MAX_IB	= BI
EE/BA:          MAX_DB	= BD
