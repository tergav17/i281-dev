00/00:          ; COMMON.S
01/80:          ; DOS/281 SYSTEM COMMON DEFINITIONS
01/80:          
01/80:          ; DEFINES
01/80:          INDIR	= 0X01
01/80:          IRET	= 0X02
01/80:          SYSCALL	= 0X03
01/80:          PRGM	= 0X04
01/80:          HALT	= 0X7F
01/80:          
01/80:          DBANK	= 0X80		; DATA BANK ADDRESS
01/80:          
01/80:          UART	= 0X90		; UART BASE ADDRESS
01/80:          UART_RH	= UART+0X00	; UART READ HOLDING
01/80:          UART_TH	= UART+0X00	; UART TRANSMIT HOLDING
01/80:          UART_LS	= UART+0X05	; UART LINE STATUS
01/80:          SCRATCH	= UART+0X07	; SCRATCH BYTE ADDRESS
01/80:          
01/80:          CF	= 0XA0		; COMPACT FLASH BASE ADDRESS
01/80:          CF_DATA	= CF+0X00	; CF DATA
01/80:          CF_ERR	= CF+0X01	; CF ERROR
01/80:          CF_FEAT	= CF+0x01	; CF FEATURES
01/80:          CF_CNT	= CF+0X02	; CF SECTOR COUNT
01/80:          CF_LBA0	= CF+0X03	; CF LBA BITS 0-7
01/80:          CF_LBA1	= CF+0X04	; CF LBA BITS 8-15
01/80:          CF_LBA2	= CF+0X05	; CF LBA BITS 16-23
01/80:          CF_LBA3	= CF+0X06	; CF LBA BITS 24-27
01/80:          CF_STAT	= CF+0X07	; CF STATUS
01/80:          CF_CMD	= CF+0X07	; CF COMMAND
01/80:          
01/80:          CF_READ	= 0X20		; READ COMMAND
01/80:          CF_WRIT = 0X30		; WRITE COMMAND
01/80:          
01/80:          ; LOW.S
01/80:          ; LOW MEMORY OF THE DOS/281 SYSTEM
01/80:          ; HANDLES SYSCALLS
01/80:          
01/80:          .BANK 0
00/80:          .TEXT
00/80:          
00/80:          	; JUMP STUB FOR HANDLING SYSCALLS
00/80: FFFE     	JUMP	HALT
00/81: FF00     	JUMP	ENTRY
00/83:          
00/82:          
00/82:          	; ENTRY POINT FOR THE KERENL AFTER THE 2ND STAGE BOOT
00/82:          	; JUST JUMP DIRECTLY TO THE 'INIT' ROUTINE IN CORE 
00/82: 34FF     ENTRY:	LOADI	B,CORE0_B
00/83: 3880     	LOADI	C,INIT
00/84: FF7C     	JUMP	INDIR
00/86:          	
00/85:          
00/85:          
00/85:          .DATA
00/85:          
00/00:          
00/00:          
00/00:          
00/00:          	; SET UP UPPER BANK STUFF
00/00:          	; THE 'B_' SYMBOLS WILL BE USED TO KEEP TRACK OF WHAT BANKS ARE
00/00:          	; IN USE
00/00:          	; 'BI" WILL BE USED FOR INSTRUCTION BANKS
00/00:          	; 'BD' WILL BE USED FOR DATA BANKS
00/00:          	; AT THE END OF ASSEMBLY, THESE VALUES WILL BE USED TO DETERMINE
00/00:          	; HOW MUCH FREE MEMORY USER PROGRAMS HAVE
00/00:          BI	= 255
00/00:          BD	= 255
00/00:          
00/00:          ; CORE.S
00/00:          ; MAIN 'GUTS' OF DOS/281
00/00:          
00/00:          .BANK BI
FF/00:          CORE0_B	= BI
FF/00:          .TEXT
FF/00:          
FF/80:          	; SET UP SYSTEM FOR OPERATION
FF/80:          	; BRING UP THE WORK BANK
FF/80: 30FF     INIT:	LOADI	A,WORK_B
FF/81: A080     	STORE	[DBANK],A
FF/83:          	
FF/82:          	; SET THE STACK POINTER TO THE TOP OF THE STACK
FF/82: 3C7E     	LOADI	D,0X80-2
FF/84:          
FF/83:          	; INITALIZE THE TTY DRIVER
FF/83: 38FF     	LOADI	C,CORE0_B
FF/84: BB01     	STOREF	[D+1],C
FF/85: 388A     	LOADI	C,@+5
FF/86: BB00     	STOREF	[D],C
FF/88:          	
FF/87: 34FE     	LOADI	B,TTY0_B
FF/88: 3880     	LOADI	C,TTYINIT
FF/89: FF77     	JUMP	INDIR
FF/8B:          	
FF/8A:          	; SEND OUT THE 'HELLO' SPLASH
FF/8A: 38FF     	LOADI	C,WORK_B
FF/8B: A800     	STORE	[SRC_BNK],C
FF/8C: 3060     	LOADI	A,S_HELLO
FF/8E:          	
FF/8D: 3892     	LOADI	C,@+5
FF/8E: BB00     	STOREF	[D],C
FF/90:          	
FF/8F: 34FE     	LOADI	B,TTY0_B
FF/90: 3888     	LOADI	C,TTYPUTS
FF/91: FF6F     	JUMP	INDIR
FF/93:          	
FF/92:          	; DOT PROMPT
FF/92: 38FF     PROMPT: LOADI	C,WORK_B
FF/93: A800     	STORE	[SRC_BNK],C
FF/94: 3001     	LOADI	A,S_PRMT
FF/96:          
FF/95: 38FF     	LOADI	C,CORE0_B
FF/96: BB01     	STOREF	[D+1],C
FF/97: 389C     	LOADI	C,@+5
FF/98: BB00     	STOREF	[D],C
FF/9A:          	
FF/99: 34FE     	LOADI	B,TTY0_B
FF/9A: 3888     	LOADI	C,TTYPUTS
FF/9B: FF65     	JUMP	INDIR
FF/9D:          	
FF/9C:          	; GET AN INPUT FROM THE TERMINAL
FF/9C: 38FE     	LOADI	C,CMDL_B
FF/9D: A800     	STORE	[SRC_BNK],C
FF/9F:          	
FF/9E: 38A3     	LOADI	C,@+5
FF/9F: BB00     	STOREF	[D],C
FF/A1:          	
FF/A0: 34FE     	LOADI	B,TTY0_B
FF/A1: 389A     	LOADI	C,TTYINPT
FF/A2: FF5E     	JUMP	INDIR
FF/A4:          	
FF/A3: FFEE     	JUMP	PROMPT
FF/A5:          
FF/A4:          	; BANK IS DONE, MOVE ON TO THE NEXT
FF/A4:          BI	= BI-1
FF/A4:          
FF/A4:          	; ALLOCATE A BANK FOR THE KERNEL WORK AREA
FF/A4:          	; 0X60-7F = KERNEL STACK SPACE
FF/A4:          .BANK	BD
FF/A4:          WORK_B	= BD
FF/A4:          .DATA
FF/A4:          
FF/00:          	; SOURCE BANK OF WHATEVER OPERATION IS BEING DONE
FF/00:          	; MAINLY USED TO KEEP TRACK OF THE BANK ADDRESS
FF/00:          	; OF STUFF BEING WORKED ON IN USER SPACE
FF/00: 00       .DEFL BYTE SRC_BNK	0
FF/01:          
FF/01:          	; COMMAND LINE PROMPT
FF/01: 0A0D2E00 .DEFL BYTE S_PRMT	0X0A,0X0D,'.',0
FF/05:          
FF/05:          	; PLACE 'HELLO' AT BOTTOM  OF STACK
FF/05:          	; WE DON'T CARE IF IT GETS OVERWRITTEN LATER
FF/05:          .ORG 0X60
FF/60: 444F532F
       32383120
       56312E30
       0A0D00   .DEFL BYTE S_HELLO	"DOS/281 V1.0",0X0A,0X0D,0
FF/6F:          
FF/6F:          
FF/6F:          	; BANK IS DONE, MOVE ON TO THE NEXT
FF/6F:          BD	= BD-1
FF/6F:          
FF/6F:          	; COMMAND LINE BANK
FF/6F:          CMDL_B	= BD
FF/6F:          
FF/6F:          BD	= BD-1
FF/6F:          ; TTY.S
FF/6F:          ; SERIAL CONSOLE DRIVER
FF/6F:          
FF/6F:          .BANK BI
FE/00:          TTY0_B	= BI
FE/00:          .TEXT
FE/00:          
FE/80:          	; SERIAL INIT
FE/80:          	; ASSUMES WORK BANK IS SELECTED
FE/80:          	; SET UP THE 16C550 UART
FE/80:          	; TODO
FE/80:          	; USES: A, B, C
FE/80: FF81     TTYINIT:JUMP	IRET
FE/82:          
FE/81:          	; PUTS A CHARACTER ONTO THE TERMINAL
FE/81:          	; ASSUMES WORK BANK IS SELECTED
FE/81:          	; A = CHARACTER TO PRINT
FE/81:          	; USES: B
FE/81: 8495     TTYPUTC:LOAD	B,[UART_LS]
FE/83:          
FE/82:          	; READ 5TH BIT TO SEE IF WE CAN TRANSMIT YET
FE/82: 4500     	SHIFTL	B
FE/83: 4500     	SHIFTL	B
FE/84: 4500     	SHIFTL	B
FE/85: F1FB     	BRNC	TTYPUTC
FE/87:          	
FE/86:          	; TRANSMITE BYTE
FE/86: A090     	STORE	[UART_TH],A
FE/87: FF43     	JUMP	TTYDONE
FE/89:          
FE/88:          	; PUTS A STRING FROM USER SPACE ONTO THE TERMINAL
FE/88:          	; ASSUMES WORK BANK IS SELECTED
FE/88:          	; A = ADDRESS OF STRING
FE/88:          	; [SRC_BNK] = DATA BANK OF STRING
FE/88:          	; USES: A, B, C
FE/88: 8400     TTYPUTS:LOAD	B,[SRC_BNK]
FE/89: A480     	STORE	[DBANK],B
FE/8B:          
FE/8A:          	; READ BYTE FROM STRING
FE/8A: 9800     0:	LOADF	C,[A]
FE/8B: 5800     	ADDI	C,0
FE/8C: F63E     	BRZ	TTYDONE
FE/8E:          	
FE/8D:          	; GET THE LINE STATUS REGISTER
FE/8D: 8495     1:	LOAD	B,[UART_LS]
FE/8F:          
FE/8E:          	; READ 5TH BIT TO SEE IF WE CAN TRANSMIT YET
FE/8E: 4500     	SHIFTL	B
FE/8F: 4500     	SHIFTL	B
FE/90: 4500     	SHIFTL	B
FE/91: F1FB     	BRNC	1B
FE/93:          	
FE/92:          	; TRANSMIT BYTE
FE/92: A890     	STORE	[UART_TH],C
FE/94:          	
FE/93:          	; INCREMENT POINTER
FE/93: 5001     	ADDI	A,1
FE/95:          	
FE/94:          	; RETURN TO PRINT LOOP
FE/94: FFF5     	JUMP	0B
FE/96:          	
FE/95:          	; WAIT FOR A CHARACTER TO BE TYPED AND THEN RETURNS IT
FE/95:          	; CHARACTER WILL NOT BE ECHOED
FE/95:          	; IF TTYSTAT RETURN 0XFF, THE RETURN WILL BE INSTANT
FE/95:          	; CHARACTER RETURNED IN A
FE/95:          	; USES: A, B
FE/95: 8495     TTYGETC:LOAD	B,[UART_LS]
FE/97:          
FE/96:          	; READ 1ST BIT
FE/96: C500     	SHIFTR	B
FE/97: F1FD     	BRNC	TTYGETC
FE/99:          	
FE/98:          	; READ BYTE
FE/98: 8090     	LOAD	A,[UART_RH]
FE/99: FF31     	JUMP	TTYDONE
FE/9B:          	
FE/9A:          	; INPUTS A LINE OF CHARACTER INTO A DATA BANK
FE/9A:          	; RESULTING STRING WILL START AT ADDRESS ZERO, AND BE ZERO
FE/9A:          	; TERMINATED
FE/9A:          	; [SRC_BNK] = DATA BANK OF RESULT
FE/9A:          	; USES: A, B, C
FE/9A: 8400     TTYINPT:LOAD	B,[SRC_BNK]
FE/9B: A480     	STORE	[DBANK],B
FE/9D:          	
FE/9C:          	; SET POINTER FOR STORAGE
FE/9C: 3800     	LOADI	C,0
FE/9E:          
FE/9D:          	; READ CHARACTER FROM CONSOLE
FE/9D:          	; GET THE LINE STATUS REGISTER
FE/9D: 8495     0:	LOAD	B,[UART_LS]
FE/9F:          
FE/9E:          	; CHECK BIT 0 TO SEE IF WE HAVE A CHARACTER 
FE/9E: C500     	SHIFTR	B
FE/9F: F1FD     	BRNC	0B
FE/A1:          	
FE/A0:          	; READ THE CHARACTER INTO A
FE/A0: 8090     	LOAD	A,[UART_RH]
FE/A2:          
FE/A1:          	; SEE IF IT IS A 'CR' CHARACTER
FE/A1: 340D     1:	LOADI	B,0X0D
FE/A2: D100     	CMP	A,B
FE/A3: F61F     	BRZ	9F
FE/A5:          	
FE/A4:          	; SEE IF IT IS A 'BS' CHARACTER
FE/A4: 3408     	LOADI	B,0X08
FE/A5: D100     	CMP	A,B
FE/A6: F60E     	BRZ	3F
FE/A8:          	
FE/A7:          	; IGNORE ALL OTHER WHITESPACE CHARACTERS
FE/A7: 3420     	LOADI	B,0X20
FE/A8: D100     	CMP	A,B
FE/A9: F1F3     	BRB	0B
FE/AB:          	
FE/AA:          	; CHECK IF IT IS A DELETE CHARACTER
FE/AA: 347F     	LOADI	B,0X7F
FE/AB: D100     	CMP	A,B
FE/AC: F702     	BRNZ	2F
FE/AE:          	
FE/AD:          	; YEP, CONVERT IT IN TO A 'BS' CHARACTER
FE/AD: 3008     	LOADI	A,0X08
FE/AE: FFF2     	JUMP	1B
FE/B0:          	
FE/AF:          	; CHECK TO SEE IF THERE IS SPACE TO PLACE THE CHARACTERS
FE/AF:          	; INTO THE BUFFER
FE/AF: D600     2:	CMP	B,C
FE/B0: F6EC     	BRZ	0B
FE/B2:          	
FE/B1:          	; PRINT THE CHARACTER
FE/B1: A090     	STORE	[UART_TH],A
FE/B3:          	
FE/B2:          	; PLACE IT INTO THE BUFFER
FE/B2: B200     	STOREF	[C],A
FE/B3: 5801     	ADDI	C,1
FE/B4: FFE8     	JUMP	0B
FE/B6:          
FE/B5:          	; HANDLE BACKSPACE
FE/B5:          	; SUBTRACT ONE FROM THE BUFFER
FE/B5: 5800     3:	ADDI	C,0
FE/B6: F6E6     	BRZ	0B
FE/B7: 7801     	SUBI	C,1
FE/B9:          
FE/B8:          	; ECHO THE CHARACTER
FE/B8: A090     	STORE	[UART_TH],A
FE/BA:          
FE/B9:          	; PRINT AN ADDITIONAL SPACE AND THEN BACKSPACE
FE/B9: 8495     4:	LOAD	B,[UART_LS]
FE/BA: C500     	SHIFTR	B
FE/BB: F1FD     	BRNC	4B
FE/BD:          	
FE/BC: 3420     	LOADI	B,0X20
FE/BD: A490     	STORE	[UART_TH],B
FE/BF:          	
FE/BE: 8495     5:	LOAD	B,[UART_LS]
FE/BF: C500     	SHIFTR	B
FE/C0: F1FD     	BRNC	5B
FE/C2:          	
FE/C1: A090     	STORE	[UART_TH],A
FE/C3:          	
FE/C2: FFDA     	JUMP	0B
FE/C4:          	
FE/C3:          	; TERMINATE THE STRING AND EXIT
FE/C3: 3000     9:	LOADI	A,0
FE/C4: B200     	STOREF	[C],A
FE/C5: FF05     	JUMP	TTYDONE
FE/C7:          	
FE/C6:          
FE/C6:          	; POLL THE UART TO SEE IF THERE IS A CHARACTER WAITING
FE/C6:          	; RETURNS A=0XFF IF THERE IS A CHARACTER, OTHERWISE A=0X00
FE/C6: 3000     TTYSTAT:LOADI	A,0
FE/C8:          
FE/C7:          	; GET THE LINE STATUS REGISTER
FE/C7: 8495     	LOAD	B,[UART_LS]
FE/C9:          
FE/C8:          	; READ 1ST BIT
FE/C8: C500     	SHIFTR	B
FE/C9: F101     	BRNC	TTYDONE
FE/CB:          	
FE/CA:          	; SET A AND FALL TO TTYDONE
FE/CA: 30FF     	LOADI	A,0XFF
FE/CC:          
FE/CB:          	; INTERNAL TTY FUNCTION TO RESET TO WORK BANK AND RETURN
FE/CB: 38FF     TTYDONE:LOADI	C,WORK_B
FE/CC: A880     	STORE	[DBANK],C
FE/CD: FF34     	JUMP	IRET
