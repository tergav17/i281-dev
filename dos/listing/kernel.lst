00/00:          ; COMMON.S
01/80:          ; DOS/281 SYSTEM COMMON DEFINITIONS
01/80:          
01/80:          ; DEFINES
01/80:          INDIR	= 0X01
01/80:          IRET	= 0X02
01/80:          SYSCALL	= 0X03
01/80:          PRGM	= 0X04
01/80:          HALT	= 0X7F
01/80:          
01/80:          DBANK	= 0X80		; DATA BANK ADDRESS
01/80:          
01/80:          UART	= 0X90		; UART BASE ADDRESS
01/80:          UART_RH	= UART+0X00	; UART READ HOLDING
01/80:          UART_TH	= UART+0X00	; UART TRANSMIT HOLDING
01/80:          UART_LS	= UART+0X05	; UART LINE STATUS
01/80:          SCRATCH	= UART+0X07	; SCRATCH BYTE ADDRESS
01/80:          
01/80:          CF	= 0XA0		; COMPACT FLASH BASE ADDRESS
01/80:          CF_DATA	= CF+0X00	; CF DATA
01/80:          CF_ERR	= CF+0X01	; CF ERROR
01/80:          CF_FEAT	= CF+0x01	; CF FEATURES
01/80:          CF_CNT	= CF+0X02	; CF SECTOR COUNT
01/80:          CF_LBA0	= CF+0X03	; CF LBA BITS 0-7
01/80:          CF_LBA1	= CF+0X04	; CF LBA BITS 8-15
01/80:          CF_LBA2	= CF+0X05	; CF LBA BITS 16-23
01/80:          CF_LBA3	= CF+0X06	; CF LBA BITS 24-27
01/80:          CF_STAT	= CF+0X07	; CF STATUS
01/80:          CF_CMD	= CF+0X07	; CF COMMAND
01/80:          
01/80:          CF_8BIT	= 0X01		; 8 BIT MODE
01/80:          CF_DCAC	= 0X82		; DISABLE CACHE
01/80:          
01/80:          CF_READ	= 0X20		; READ COMMAND
01/80:          CF_WRIT = 0X30		; WRITE COMMAND
01/80:          CF_SETF	= 0XEF		; SET FEATURE COMMAND
01/80:          
01/80:          ; LOW.S
01/80:          ; LOW MEMORY OF THE DOS/281 SYSTEM
01/80:          ; HANDLES SYSCALLS
01/80:          
01/80:          .BANK 0
00/80:          .TEXT
00/80:          
00/80:          	; JUMP STUB FOR HANDLING SYSCALLS
00/80: FFFE     	JUMP	HALT
00/81: FF00     	JUMP	ENTRY
00/83:          
00/82:          
00/82:          	; ENTRY POINT FOR THE KERENL AFTER THE 2ND STAGE BOOT
00/82:          	; JUST JUMP DIRECTLY TO THE 'INIT' ROUTINE IN CORE 
00/82: 34FF     ENTRY:	LOADI	B,CORE0_B
00/83: 3880     	LOADI	C,INIT
00/84: FF7C     	JUMP	INDIR
00/86:          	
00/85:          
00/85:          
00/85:          .DATA
00/85:          
00/00:          
00/00:          
00/00:          
00/00:          	; SET UP UPPER BANK STUFF
00/00:          	; THE 'B_' SYMBOLS WILL BE USED TO KEEP TRACK OF WHAT BANKS ARE
00/00:          	; IN USE
00/00:          	; 'BI" WILL BE USED FOR INSTRUCTION BANKS
00/00:          	; 'BD' WILL BE USED FOR DATA BANKS
00/00:          	; AT THE END OF ASSEMBLY, THESE VALUES WILL BE USED TO DETERMINE
00/00:          	; HOW MUCH FREE MEMORY USER PROGRAMS HAVE
00/00:          BI	= 255
00/00:          BD	= 255
00/00:          
00/00:          ; CORE.S
00/00:          ; MAIN 'GUTS' OF DOS/281
00/00:          
00/00:          .BANK BI
FF/00:          CORE0_B	= BI
FF/00:          .TEXT
FF/00:          
FF/80:          	; SET UP SYSTEM FOR OPERATION
FF/80:          	; BRING UP THE WORK BANK
FF/80: 30FF     INIT:	LOADI	A,WORK_B
FF/81: A080     	STORE	[DBANK],A
FF/83:          	
FF/82:          	; SET THE STACK POINTER TO THE TOP OF THE STACK
FF/82: 3C7E     	LOADI	D,0X80-2
FF/84:          
FF/83:          	; INITALIZE THE TTY DRIVER
FF/83: 38FF     	LOADI	C,CORE0_B
FF/84: BB01     	STOREF	[D+1],C
FF/85: 388A     	LOADI	C,@+5
FF/86: BB00     	STOREF	[D],C
FF/88:          	
FF/87: 34FE     	LOADI	B,TTY0_B
FF/88: 3880     	LOADI	C,TTYINIT
FF/89: FF77     	JUMP	INDIR
FF/8B:          	
FF/8A:          	; SEND OUT THE 'HELLO' SPLASH
FF/8A: 38FF     	LOADI	C,WORK_B
FF/8B: A803     	STORE	[SRC_BNK],C
FF/8C: 3060     	LOADI	A,S_HELLO
FF/8E:          	
FF/8D: 3892     	LOADI	C,@+5
FF/8E: BB00     	STOREF	[D],C
FF/90:          	
FF/8F: 34FE     	LOADI	B,TTY0_B
FF/90: 3888     	LOADI	C,TTYPUTS
FF/91: FF6F     	JUMP	INDIR
FF/93:          	
FF/92:          	; INITALIZE THE BLOCK DRIVER
FF/92: 3897     	LOADI	C,@+5
FF/93: BB00     	STOREF	[D],C
FF/95:          	
FF/94: 34FD     	LOADI	B,BLK0_B
FF/95: 3880     	LOADI	C,BLKINIT
FF/96: FF6A     	JUMP	INDIR
FF/98:          	
FF/97:          	; DOT PROMPT
FF/97: 38FF     PROMPT: LOADI	C,WORK_B
FF/98: A803     	STORE	[SRC_BNK],C
FF/99: 300F     	LOADI	A,S_PRMT
FF/9B:          
FF/9A: 38FF     	LOADI	C,CORE0_B
FF/9B: BB01     	STOREF	[D+1],C
FF/9C: 38A1     	LOADI	C,@+5
FF/9D: BB00     	STOREF	[D],C
FF/9F:          	
FF/9E: 34FE     	LOADI	B,TTY0_B
FF/9F: 3888     	LOADI	C,TTYPUTS
FF/A0: FF60     	JUMP	INDIR
FF/A2:          	
FF/A1:          	; GET AN INPUT FROM THE TERMINAL
FF/A1: 38FE     	LOADI	C,CMDL_B
FF/A2: A803     	STORE	[SRC_BNK],C
FF/A4:          	
FF/A3: 38A8     	LOADI	C,@+5
FF/A4: BB00     	STOREF	[D],C
FF/A6:          	
FF/A5: 34FE     	LOADI	B,TTY0_B
FF/A6: 389A     	LOADI	C,TTYINPT
FF/A7: FF59     	JUMP	INDIR
FF/A9:          	
FF/A8:          	
FF/A8:          	; ATTEMPT TO LOOKUP FILE
FF/A8: 3000     	LOADI	A,0
FF/A9: 38AE     	LOADI	C,@+5
FF/AA: BB00     	STOREF	[D],C
FF/AC:          	
FF/AB: 34FC     	LOADI	B,FS0_B
FF/AC: 3880     	LOADI	C,SSPARAM
FF/AD: FF53     	JUMP	INDIR
FF/AF:          	
FF/AE:          	; AND BREAK
FF/AE: FFFF     BP:	JUMP	BP
FF/B0:          	
FF/AF: FFE7     	JUMP	PROMPT
FF/B1:          
FF/B0:          	; BANK IS DONE, MOVE ON TO THE NEXT
FF/B0:          BI	= BI-1
FF/B0:          
FF/B0:          	; ALLOCATE A BANK FOR THE KERNEL WORK AREA
FF/B0:          	; 0X60-7F = KERNEL STACK SPACE
FF/B0:          .BANK	BD
FF/B0:          WORK_B	= BD
FF/B0:          .DATA
FF/B0:          
FF/00:          	; MISC VALUES
FF/00:          	; USED AS TEMP REGISTERS FOR ALL SORTS OF STUFF
FF/00: 00       .DEFL BYTE M0		0
FF/01: 00       .DEFL BYTE M1		0
FF/02: 00       .DEFL BYTE M2		0
FF/03:          
FF/03:          	; SOURCE BANK OF WHATEVER OPERATION IS BEING DONE
FF/03:          	; MAINLY USED TO KEEP TRACK OF THE BANK ADDRESS
FF/03:          	; OF STUFF BEING WORKED ON IN USER SPACE
FF/03: 00       .DEFL BYTE SRC_BNK	0
FF/04:          
FF/04:          	; ADDRESSES FOR THE BLOCK DEVICE DRIVER
FF/04:          	; USED DURING A 'READ' OR 'WRITE' CALL
FF/04: 00       .DEFL BYTE BLK_HI	0
FF/05: 00       .DEFL BYTE BLK_LO	0
FF/06:          
FF/06:          	; PATTERN FOR SEARCHING FOR FILES
FF/06: 3F3F3F3F
       3F3F3F3F .DEFL BYTE[8] PATTERN	"????????"
FF/0E:          
FF/0E:          	; WORKING USER AREA
FF/0E: 30       .DEFL BYTE WRK_USR	'0'
FF/0F:          
FF/0F:          	; COMMAND LINE PROMPT
FF/0F: 0A0D2E00 .DEFL BYTE S_PRMT	0X0A,0X0D,'.',0
FF/13:          
FF/13:          	; PLACE 'HELLO' AT BOTTOM  OF STACK
FF/13:          	; WE DON'T CARE IF IT GETS OVERWRITTEN LATER
FF/13:          .ORG 0X60
FF/60: 444F532F
       32383120
       56312E30
       0A0D00   .DEFL BYTE S_HELLO	"DOS/281 V1.0",0X0A,0X0D,0
FF/6F:          
FF/6F:          
FF/6F:          	; BANK IS DONE, MOVE ON TO THE NEXT
FF/6F:          BD	= BD-1
FF/6F:          
FF/6F:          	; COMMAND LINE BANK
FF/6F:          CMDL_B	= BD
FF/6F:          
FF/6F:          	; BANK IS DONE, MOVE ON TO THE NEXT
FF/6F:          BD	= BD-4
FF/6F:          	
FF/6F:          	; BLOCK ALLOCATION BITMAP
FF/6F:          ABM_B	= BD
FF/6F:          
FF/6F:          	; BANK IS DONE, MOVE ON TO THE NEXT
FF/6F:          BD	= BD-4
FF/6F:          
FF/6F:          	; FILE BLOCK TABLE
FF/6F:          FBT_B	= BD
FF/6F:          
FF/6F:          	; BANK IS DONE, MOVE ON TO THE NEXT
FF/6F:          BD	= BD-4
FF/6F:          
FF/6F:          	; KERNEL BUFFER
FF/6F:          KBUF_B	= BD
FF/6F:          
FF/6F:          	; BANK IS DONE, MOVE ON TO THE NEXT
FF/6F:          BD	= BD-1
FF/6F:          
FF/6F:          
FF/6F:          ; TTY.S
FF/6F:          ; SERIAL CONSOLE DRIVER
FF/6F:          
FF/6F:          .BANK BI
FE/00:          TTY0_B	= BI
FE/00:          .TEXT
FE/00:          
FE/80:          	; SERIAL INIT
FE/80:          	; SET UP THE 16C550 UART
FE/80:          	; ASSUMES WORK BANK IS SELECTED
FE/80:          	; TODO
FE/80:          	; USES: A, B, C
FE/80: FF51     TTYINIT:JUMP	TTYDONE
FE/82:          
FE/81:          	; PUTS A CHARACTER ONTO THE TERMINAL
FE/81:          	; ASSUMES WORK BANK IS SELECTED
FE/81:          	; A = CHARACTER TO PRINT
FE/81:          	; USES: B
FE/81: 8495     TTYPUTC:LOAD	B,[UART_LS]
FE/83:          
FE/82:          	; READ 5TH BIT TO SEE IF WE CAN TRANSMIT YET
FE/82: 4500     	SHIFTL	B
FE/83: 4500     	SHIFTL	B
FE/84: 4500     	SHIFTL	B
FE/85: F1FB     	BRNC	TTYPUTC
FE/87:          	
FE/86:          	; TRANSMITE BYTE
FE/86: A090     	STORE	[UART_TH],A
FE/87: FF4A     	JUMP	TTYDONE
FE/89:          
FE/88:          	; PUTS A STRING FROM USER SPACE ONTO THE TERMINAL
FE/88:          	; ASSUMES WORK BANK IS SELECTED
FE/88:          	; A = ADDRESS OF STRING
FE/88:          	; [SRC_BNK] = DATA BANK OF STRING
FE/88:          	; USES: A, B, C
FE/88: 8403     TTYPUTS:LOAD	B,[SRC_BNK]
FE/89: A480     	STORE	[DBANK],B
FE/8B:          
FE/8A:          	; READ BYTE FROM STRING
FE/8A: 9800     0:	LOADF	C,[A]
FE/8B: 5800     	ADDI	C,0
FE/8C: F645     	BRZ	TTYDONE
FE/8E:          	
FE/8D:          	; GET THE LINE STATUS REGISTER
FE/8D: 8495     1:	LOAD	B,[UART_LS]
FE/8F:          
FE/8E:          	; READ 5TH BIT TO SEE IF WE CAN TRANSMIT YET
FE/8E: 4500     	SHIFTL	B
FE/8F: 4500     	SHIFTL	B
FE/90: 4500     	SHIFTL	B
FE/91: F1FB     	BRNC	1B
FE/93:          	
FE/92:          	; TRANSMIT BYTE
FE/92: A890     	STORE	[UART_TH],C
FE/94:          	
FE/93:          	; INCREMENT POINTER
FE/93: 5001     	ADDI	A,1
FE/95:          	
FE/94:          	; RETURN TO PRINT LOOP
FE/94: FFF5     	JUMP	0B
FE/96:          	
FE/95:          	; WAIT FOR A CHARACTER TO BE TYPED AND THEN RETURNS IT
FE/95:          	; CHARACTER WILL NOT BE ECHOED
FE/95:          	; IF TTYSTAT RETURN 0XFF, THE RETURN WILL BE INSTANT
FE/95:          	; ASSUMES WORK BANK IS SELECTED
FE/95:          	; CHARACTER RETURNED IN A
FE/95:          	; USES: A, B
FE/95: 8495     TTYGETC:LOAD	B,[UART_LS]
FE/97:          
FE/96:          	; READ 1ST BIT
FE/96: C500     	SHIFTR	B
FE/97: F1FD     	BRNC	TTYGETC
FE/99:          	
FE/98:          	; READ BYTE
FE/98: 8090     	LOAD	A,[UART_RH]
FE/99: FF38     	JUMP	TTYDONE
FE/9B:          	
FE/9A:          	; INPUTS A LINE OF CHARACTER INTO A DATA BANK
FE/9A:          	; RESULTING STRING WILL START AT ADDRESS ZERO, AND BE ZERO
FE/9A:          	; TERMINATED
FE/9A:          	; ASSUMES WORK BANK IS SELECTED
FE/9A:          	; [SRC_BNK] = DATA BANK OF RESULT
FE/9A:          	; USES: A, B, C
FE/9A: 8403     TTYINPT:LOAD	B,[SRC_BNK]
FE/9B: A480     	STORE	[DBANK],B
FE/9D:          	
FE/9C:          	; SET POINTER FOR STORAGE
FE/9C: 3800     	LOADI	C,0
FE/9E:          
FE/9D:          	; READ CHARACTER FROM CONSOLE
FE/9D:          	; GET THE LINE STATUS REGISTER
FE/9D: 8495     0:	LOAD	B,[UART_LS]
FE/9F:          
FE/9E:          	; CHECK BIT 0 TO SEE IF WE HAVE A CHARACTER 
FE/9E: C500     	SHIFTR	B
FE/9F: F1FD     	BRNC	0B
FE/A1:          	
FE/A0:          	; READ THE CHARACTER INTO A
FE/A0: 8090     	LOAD	A,[UART_RH]
FE/A2:          
FE/A1:          	; SEE IF IT IS A 'CR' CHARACTER
FE/A1: 340D     1:	LOADI	B,0X0D
FE/A2: D100     	CMP	A,B
FE/A3: F626     	BRZ	9F
FE/A5:          	
FE/A4:          	; SEE IF IT IS A 'BS' CHARACTER
FE/A4: 3408     	LOADI	B,0X08
FE/A5: D100     	CMP	A,B
FE/A6: F615     	BRZ	4F
FE/A8:          	
FE/A7:          	; IGNORE ALL OTHER WHITESPACE CHARACTERS
FE/A7: 3420     	LOADI	B,0X20
FE/A8: D100     	CMP	A,B
FE/A9: F1F3     	BRB	0B
FE/AB:          	
FE/AA:          	; CHECK IF IT IS A DELETE CHARACTER
FE/AA: 347F     	LOADI	B,0X7F
FE/AB: D100     	CMP	A,B
FE/AC: F702     	BRNZ	2F
FE/AE:          	
FE/AD:          	; YEP, CONVERT IT IN TO A 'BS' CHARACTER
FE/AD: 3008     	LOADI	A,0X08
FE/AE: FFF2     	JUMP	1B
FE/B0:          	
FE/AF:          	; CHECK TO SEE IF THERE IS SPACE TO PLACE THE CHARACTERS
FE/AF:          	; INTO THE BUFFER
FE/AF: D600     2:	CMP	B,C
FE/B0: F6EC     	BRZ	0B
FE/B2:          
FE/B1:          	; CONVERT TO UPPER CASE
FE/B1: 3461     	LOADI	B,0X61
FE/B2: D100     	CMP	A,B
FE/B3: F104     	BRB	3F
FE/B4: 347A     	LOADI	B,0X7A
FE/B5: D100     	CMP	A,B
FE/B6: F801     	BRA	3F
FE/B7: 7020     	SUBI	A,0X20
FE/B9:          	
FE/B8:          	; PRINT THE CHARACTER
FE/B8: A090     3:	STORE	[UART_TH],A
FE/BA:          	
FE/B9:          	; PLACE IT INTO THE BUFFER
FE/B9: B200     	STOREF	[C],A
FE/BA: 5801     	ADDI	C,1
FE/BB: FFE1     	JUMP	0B
FE/BD:          
FE/BC:          	; HANDLE BACKSPACE
FE/BC:          	; SUBTRACT ONE FROM THE BUFFER
FE/BC: 5800     4:	ADDI	C,0
FE/BD: F6DF     	BRZ	0B
FE/BE: 7801     	SUBI	C,1
FE/C0:          
FE/BF:          	; ECHO THE CHARACTER
FE/BF: A090     	STORE	[UART_TH],A
FE/C1:          
FE/C0:          	; PRINT AN ADDITIONAL SPACE AND THEN BACKSPACE
FE/C0: 8495     5:	LOAD	B,[UART_LS]
FE/C1: C500     	SHIFTR	B
FE/C2: F1FD     	BRNC	5B
FE/C4:          	
FE/C3: 3420     	LOADI	B,0X20
FE/C4: A490     	STORE	[UART_TH],B
FE/C6:          	
FE/C5: 8495     6:	LOAD	B,[UART_LS]
FE/C6: C500     	SHIFTR	B
FE/C7: F1FD     	BRNC	6B
FE/C9:          	
FE/C8: A090     	STORE	[UART_TH],A
FE/CA:          	
FE/C9: FFD3     	JUMP	0B
FE/CB:          	
FE/CA:          	; TERMINATE THE STRING AND EXIT
FE/CA: 3000     9:	LOADI	A,0
FE/CB: B200     	STOREF	[C],A
FE/CC: FF05     	JUMP	TTYDONE
FE/CE:          	
FE/CD:          
FE/CD:          	; POLL THE UART TO SEE IF THERE IS A CHARACTER WAITING
FE/CD:          	; ASSUMES WORK BANK IS SELECTED
FE/CD:          	; RETURNS A=0XFF IF THERE IS A CHARACTER, OTHERWISE A=0X00
FE/CD: 3000     TTYSTAT:LOADI	A,0
FE/CF:          
FE/CE:          	; GET THE LINE STATUS REGISTER
FE/CE: 8495     	LOAD	B,[UART_LS]
FE/D0:          
FE/CF:          	; READ 1ST BIT
FE/CF: C500     	SHIFTR	B
FE/D0: F101     	BRNC	TTYDONE
FE/D2:          	
FE/D1:          	; SET A AND FALL TO TTYDONE
FE/D1: 30FF     	LOADI	A,0XFF
FE/D3:          
FE/D2:          	; INTERNAL TTY FUNCTION TO RESET TO WORK BANK AND RETURN
FE/D2: 38FF     TTYDONE:LOADI	C,WORK_B
FE/D3: A880     	STORE	[DBANK],C
FE/D4: FF2D     	JUMP	IRET
FE/D6:          
FE/D5:          	; BANK IS DONE, MOVE ON TO THE NEXT
FE/D5:          BI	= BI-1
FE/D5:          ; BLK.S
FE/D5:          ; BLOCK DEVICE DRIVER
FE/D5:          ; (COMPACT FLASH VERSION)
FE/D5:          
FE/D5:          .BANK BI
FD/80:          BLK0_B	= BI
FD/80:          .TEXT
FD/80:          
FD/80:          	; BLOCK DEVICE INIT
FD/80:          	; SET UP THE COMPACT FLASH CARD
FD/80:          	; ASSUMES WORK BANK IS SELECTED
FD/80:          	; USES: A, B, C
FD/80: 3882     BLKINIT:LOADI	C,@+2
FD/81: FF3B     	JUMP	CFWAIT
FD/83:          	
FD/82:          	; SET 8 BIT MODE
FD/82: 3001     	LOADI	A,CF_8BIT
FD/83: A0A1     	STORE	[CF_FEAT],A
FD/84: 30EF     	LOADI	A,CF_SETF
FD/85: A0A7     	STORE	[CF_CMD],A
FD/87:          	
FD/86:          	; NOW DISABLE THE CACHE
FD/86: 3888     	LOADI	C,@+2
FD/87: FF35     	JUMP	CFWAIT
FD/88: 3082     	LOADI	A,CF_DCAC
FD/89: A0A1     	STORE	[CF_FEAT],A
FD/8A: 30EF     	LOADI	A,CF_SETF
FD/8B: A0A7     	STORE	[CF_CMD],A
FD/8D:          
FD/8C: FF36     	JUMP	BLKDONE
FD/8E:          
FD/8D:          	; READS A BLOCK (512 BYTES) FROM THE BLOCK DEVICE
FD/8D:          	; CONTENTS WILL BE PLACED IN 4 SEQUENTIAL DATA BANKS
FD/8D:          	; ASSUMES WORK BANK IS SELECTED
FD/8D:          	; A = LOWEST DESTINATION DATA BANK
FD/8D:          	; USES: A, B, C, M0
FD/8D: 388F     BLKREAD:LOADI	C,@+2
FD/8E: FF24     	JUMP	CFADDR
FD/90:          	
FD/8F:          	; EXECUTE THE READ COMMAND AND WAIT
FD/8F: 3420     	LOADI	B,CF_READ
FD/90: A4A7     	STORE	[CF_CMD],B
FD/91: 3893     	LOADI	C,@+2
FD/92: FF2A     	JUMP	CFWAIT
FD/94:          	
FD/93:          	; COPY INTO 4 DATA BANKS
FD/93: 3804     	LOADI	C,4
FD/94: A000     0:	STORE	[M0],A
FD/95: A080     	STORE	[DBANK],A
FD/96: 3000     	LOADI	A,0
FD/98:          	
FD/97:          	; COPY 128 BYTES
FD/97: 84A0     1:	LOAD	B,[CF_DATA]
FD/98: B400     	STOREF	[A],B
FD/99: 5001     	ADDI	A,1
FD/9A: F5FC     	BRNN	1B
FD/9C:          	
FD/9B:          	; NEXT BANK?
FD/9B: 8000     	LOAD	A,[M0]
FD/9C: 5001     	ADDI	A,1
FD/9D: 7801     	SUBI	C,1
FD/9E: F7F5     	BRNZ	0B
FD/A0:          	
FD/9F:          	; OPERATION COMPLETE
FD/9F: FF23     	JUMP	BLKDONE
FD/A1:          	
FD/A0:          	; WRITES A BLOCK (512 BYTES) TO THE BLOCK DEVICE
FD/A0:          	; CONTENTS WILL BE TAKEN FROM 4 SEQUENTIAL DATA BANKS
FD/A0:          	; ASSUMES WORK BANK IS SELECTED
FD/A0:          	; A = LOWEST SOURCE DATA BANK
FD/A0:          	; USES: A, B, C, M0
FD/A0: 38A2     BLKWRIT:LOADI	C,@+2
FD/A1: FF11     	JUMP	CFADDR
FD/A3:          	
FD/A2:          	; EXECUTE THE WRITE COMMAND AND WAIT
FD/A2: 3430     	LOADI	B,CF_WRIT
FD/A3: A4A7     	STORE	[CF_CMD],B
FD/A4: 38A6     	LOADI	C,@+2
FD/A5: FF17     	JUMP	CFWAIT
FD/A7:          	
FD/A6:          	; COPY OUT OF 4 DATA BANKS
FD/A6: 3804     	LOADI	C,4
FD/A7: A000     0:	STORE	[M0],A
FD/A8: A080     	STORE	[DBANK],A
FD/A9: 3000     	LOADI	A,0
FD/AB:          	
FD/AA:          	; COPY 128 BYTES
FD/AA: 9400     1:	LOADF	B,[A]
FD/AB: A4A0     	STORE	[CF_DATA],B
FD/AC: 5001     	ADDI	A,1
FD/AD: F5FC     	BRNN	1B
FD/AF:          	
FD/AE:          	; NEXT BANK?
FD/AE: 8000     	LOAD	A,[M0]
FD/AF: 5001     	ADDI	A,1
FD/B0: 7801     	SUBI	C,1
FD/B1: F7F5     	BRNZ	0B
FD/B3:          	
FD/B2:          	; OPERATION COMPLETE
FD/B2: FF10     	JUMP	BLKDONE
FD/B4:          
FD/B3:          	; SET THE LBA ADDRESS OF THE CF CARD
FD/B3:          	; USING THE BLOCK ADDRESS ON THE WORK BANK
FD/B3:          	; BLOCK COUNT IS ALSO SET
FD/B3:          	; AFTER THAT, A WAIT IS PERFORMED SO A
FD/B3:          	; COMMAND CAN BE EXECUTED AFTER
FD/B3:          	; USES: B
FD/B3: 8405     CFADDR:	LOAD	B,[BLK_LO]
FD/B4: A4A3     	STORE	[CF_LBA0],B
FD/B5: 8404     	LOAD	B,[BLK_HI]
FD/B6: A4A4     	STORE	[CF_LBA1],B
FD/B7: 3400     	LOADI	B,0
FD/B8: A4A5     	STORE	[CF_LBA2],B
FD/B9: 34E0     	LOADI	B,0XE0
FD/BA: A4A6     	STORE	[CF_LBA3],B
FD/BB: 3401     	LOADI	B,1
FD/BC: A4A2     	STORE	[CF_CNT],B
FD/BE:          
FD/BD:          	; WAIT FOR THE CF CARD TO BECOME READY
FD/BD:          	; FOR THIS TO HAPPEN, THE BUSY FLAG MUST BE 0
FD/BD:          	; AND THE READY FLAG MUST BE 1
FD/BD:          	; IF A CF CARD ISN'T PRESENT, THIS ROUTINE HANGS
FD/BD:          	; BUT WE DON'T CARE
FD/BD:          	; USES: B
FD/BD: 84A7     CFWAIT:	LOAD	B,[CF_STAT]
FD/BF:          
FD/BE:          	; CHECK BIT 7 (BUSY FLAG)
FD/BE: 4500     	SHIFTL	B
FD/C0:          	
FD/BF:          	; GO BACK TO START BUSY
FD/BF: F0FD     	BRC	CFWAIT
FD/C1:          	
FD/C0:          	; CHECK BIT 6 (READY FLAG)
FD/C0: 4500     	SHIFTL	B
FD/C2:          	
FD/C1:          	; GO BACK TO START IF NOT READY
FD/C1: F1FB     	BRNC	CFWAIT
FD/C3:          	
FD/C2:          	; RETURN FROM FUNCTION CALL
FD/C2: FE3D     	JUMPR	C
FD/C4:          
FD/C3:          
FD/C3:          	; INTERNAL BLK FUNCTION TO RESET TO WORK BANK AND RETURN
FD/C3: 38FF     BLKDONE:LOADI	C,WORK_B
FD/C4: A880     	STORE	[DBANK],C
FD/C5: FF3C     	JUMP	IRET
FD/C7:          
FD/C6:          	; BANK IS DONE, MOVE ON TO THE NEXT
FD/C6:          BI	= BI-1
FD/C6:          ; FS.S
FD/C6:          ; FILE SYSTEM HANDLING ROUTINES
FD/C6:          
FD/C6:          .BANK BI
FC/80:          FS0_B	= BI
FC/80:          .TEXT
FC/80:          	; SET SEARCH PARAMETERS
FC/80:          	; USING A STRING IN USER SPACE, THE FILE SEARCH PATTERN WILL
FC/80:          	; BE UPDATED
FC/80:          	; THE FILE SEARCH POINTER WILL ALSO BE RESET
FC/80:          	; ASSUMES WORK BANK IS SELECTED
FC/80:          	; A = ADDRESS OF STRING
FC/80:          	; [SRC_BNK] = DATA BANK OF STRING
FC/80:          	; RETURNS A=0X00 IF PATTERN IS VALID, OTHERWISE 0XFF
FC/80:          	; USES: A, B, C, M0, M1, M2
FC/80: A000     SSPARAM:STORE	[M0],A
FC/82:          
FC/81:          	; STORE PATTERN COUNTER
FC/81: 3006     	LOADI	A,6
FC/82: A001     	STORE	[M1],A
FC/84:          	
FC/83:          	; STORE PATTERN POINTER
FC/83: 3006     	LOADI	A,PATTERN
FC/84: A002     	STORE	[M2],A
FC/86:          	
FC/85:          	; RESET THE PATTERN
FC/85: 3006     	LOADI	A,PATTERN
FC/86: 3408     	LOADI	B,8
FC/87: 3820     	LOADI	C,0X20
FC/88: B800     0:	STOREF	[A],C
FC/89: 5001     	ADDI	A,1
FC/8A: 7401     	SUBI	B,1
FC/8B: F7FC     	BRNZ	0B
FC/8D:          	
FC/8C:          	; DO AN INITAL CHECKOUT OF THE PATTERN
FC/8C: 8003     	LOAD	A,[SRC_BNK]
FC/8D: 8400     	LOAD	B,[M0]
FC/8E: A080     	STORE	[DBANK],A
FC/90:          	
FC/8F:          	; MAKE SURE THERE IS ACTUALLY A PATTERN
FC/8F: 9900     	LOADF	C,[B]
FC/90: 3020     	LOADI	A,0X20
FC/91: D200     	CMP	A,C
FC/92: F03A     	BRAE	9F
FC/94:          	
FC/93:          	; SEE IF THERE IS A USER AREA PREFIX
FC/93:          	; AND CHANGE BANK TO KERNEL WORK AREA
FC/93: 9101     	LOADF	A,[B+1]
FC/94: 703A     	SUBI	A,':'
FC/95: 30FF     	LOADI	A,WORK_B
FC/96: A080     	STORE	[DBANK],A
FC/97: F709     	BRNZ	1F
FC/99:          	
FC/98:          	; MAKE SURE THAT THE USER AREA PREFIX IS VALID
FC/98: 3030     	LOADI	A,'0'
FC/99: D800     	CMP	C,A
FC/9A: F132     	BRB	9F
FC/9B: 3039     	LOADI	A,'9'
FC/9C: D800     	CMP	C,A
FC/9D: F82F     	BRA	9F
FC/9F:          
FC/9E:          	; SET THE WORKING USER AREA
FC/9E: A80E     	STORE	[WRK_USR],C
FC/A0:          	
FC/9F:          	; AND SKIP THE PREFIX
FC/9F: 5402     	ADDI	B,2
FC/A0: A400     	STORE	[M0],B
FC/A2:          
FC/A1:          	; GRAB THE NEXT CHARACTER
FC/A1:          	; C = NEXT CHARACTER
FC/A1: 8400     1:	LOAD	B,[M0]
FC/A2: 8003     	LOAD	A,[SRC_BNK]
FC/A3: A080     	STORE	[DBANK],A
FC/A4: 9900     	LOADF	C,[B]
FC/A5: 30FF     	LOADI	A,WORK_B
FC/A6: A080     	STORE	[DBANK],A
FC/A8:          	
FC/A7:          	; INCREMENT AND SAVE POINTER INTO M0
FC/A7: 5401     	ADDI	B,1
FC/A8: A400     	STORE	[M0],B
FC/AA:          	
FC/A9:          	; GRAB PATTERN POINTER
FC/A9: 8002     	LOAD	A,[M2]
FC/AB:          	
FC/AA:          	; SEE IF THE PATTERN IS COMPLETE
FC/AA: 3420     	LOADI	B,0X20
FC/AB: D600     	CMP	B,C
FC/AC: F01B     	BRAE	6F
FC/AE:          	
FC/AD:          	; GRAB PATTERN COUNTER
FC/AD: 8401     	LOAD	B,[M1]
FC/AF:          	
FC/AE:          	; SEE IF IT IS A '.'
FC/AE: 782E     	SUBI	C,'.'
FC/AF: F611     	BRZ	5F
FC/B1:          	
FC/B0:          	; THERE MUST BE SPACE IN THE PATTERN BUFFER FOR ANY
FC/B0:          	; OF THE NEXT VALUES TO BE VALID
FC/B0:          	; LETS CHECK IT
FC/B0: 7401     	SUBI	B,1
FC/B1: F41B     	BRN	9F
FC/B3:          	
FC/B2:          	; SEE IF IT IS A '*'
FC/B2: 78FC     	SUBI	C,'*'-'.'
FC/B3: F606     	BRZ	3F
FC/B5:          	
FC/B4:          	; OTHERWISE, IT'S A NORMAL CHARACTER
FC/B4:          	; PLACE IT IN THE BUFFER AND MOVE ON
FC/B4: 582A     	ADDI	C,'*'
FC/B5: B800     	STOREF	[A],C
FC/B6: 5001     	ADDI	A,1
FC/B7: A002     2:	STORE	[M2],A
FC/B8: A401     	STORE	[M1],B
FC/B9: FFE7     	JUMP	1B
FC/BB:          
FC/BA:          	; HANDLE '*'
FC/BA:          	; FILL REST OF PATTERN SECTION WITH '?'
FC/BA: 5401     3:	ADDI	B,1
FC/BB: 383F     	LOADI	C,'?'
FC/BC: B800     4:	STOREF	[A],C
FC/BD: 5001     	ADDI	A,1
FC/BE: 7401     	SUBI	B,1
FC/BF: F7FC     	BRNZ	4B
FC/C0: FFF6     	JUMP	2B
FC/C2:          	
FC/C1:          	; HANDLE '.'
FC/C1:          	; MAKE SURE THE LAST 2 BYTES OF THE PATTERN BUFFER ARE EMPTY
FC/C1:          	; AND THERE HASN'T BEEN A '.' ALREADY
FC/C1: 380C     5:	LOADI	C,PATTERN+6
FC/C2: 4100     	ADD	A,B
FC/C3: D200     	CMP	A,C
FC/C4: F808     	BRA	9F
FC/C6:          	
FC/C5:          	; SET THE NEW PATTERN POINTER
FC/C5: 300C     	LOADI	A,PATTERN+6
FC/C6: 3402     	LOADI	B,2
FC/C7: FFEF     	JUMP	2B
FC/C9:          
FC/C8:          	; PATTERN IS COMPLETE
FC/C8:          	; MAKE SURE ALL FIELDS HAVE BEEN FILLED IN
FC/C8: 380C     6:	LOADI	C,PATTERN+6
FC/C9: D200     	CMP	A,C
FC/CA: F902     	BRBE	9F
FC/CB: 3000     	LOADI	A,0
FC/CC: FF02     	JUMP	FS0DONE
FC/CE:          	
FC/CD:          	; PATTERN IS INVALID
FC/CD: 30FF     9:	LOADI	A,0XFF
FC/CE: FF00     	JUMP	FS0DONE
FC/D0:          	
FC/CF:          
FC/CF:          
FC/CF:          
FC/CF:          	; INTERNAL FS0 FUNCTION TO RESET TO WORK BANK AND RETURN
FC/CF: 38FF     FS0DONE:LOADI	C,WORK_B
FC/D0: A880     	STORE	[DBANK],C
FC/D1: FF30     	JUMP	IRET
FC/D3:          
FC/D2:          	; BANK IS DONE, MOVE ON TO THE NEXT
