00/00:          ; COMMON.S
01/80:          ; DOS/281 SYSTEM COMMON DEFINITIONS
01/80:          
01/80:          ; DEFINES
01/80:          INDIR	= 1
01/80:          IRET	= 2
01/80:          SYSCALL	= 3
01/80:          SYSJUMP	= 4
01/80:          PRGM	= 5
01/80:          HALT	= 6
01/80:          
01/80:          DBANK	= 0X80		; DATA BANK ADDRESS
01/80:          
01/80:          UART	= 0X90		; UART BASE ADDRESS
01/80:          UART_RH	= UART+0X00	; UART READ HOLDING
01/80:          UART_TH	= UART+0X00	; UART TRANSMIT HOLDING
01/80:          UART_LS	= UART+0X05	; UART LINE STATUS
01/80:          SCRATCH	= UART+0X07	; SCRATCH BYTE ADDRESS
01/80:          
01/80:          CF	= 0XA0		; COMPACT FLASH BASE ADDRESS
01/80:          CF_DATA	= CF+0X00	; CF DATA
01/80:          CF_ERR	= CF+0X01	; CF ERROR
01/80:          CF_FEAT	= CF+0x01	; CF FEATURES
01/80:          CF_CNT	= CF+0X02	; CF SECTOR COUNT
01/80:          CF_LBA0	= CF+0X03	; CF LBA BITS 0-7
01/80:          CF_LBA1	= CF+0X04	; CF LBA BITS 8-15
01/80:          CF_LBA2	= CF+0X05	; CF LBA BITS 16-23
01/80:          CF_LBA3	= CF+0X06	; CF LBA BITS 24-27
01/80:          CF_STAT	= CF+0X07	; CF STATUS
01/80:          CF_CMD	= CF+0X07	; CF COMMAND
01/80:          
01/80:          CF_8BIT	= 0X01		; 8 BIT MODE
01/80:          CF_DCAC	= 0X82		; DISABLE CACHE
01/80:          
01/80:          CF_READ	= 0X20		; READ COMMAND
01/80:          CF_WRIT = 0X30		; WRITE COMMAND
01/80:          CF_SETF	= 0XEF		; SET FEATURE COMMAND
01/80:          
01/80:          ; LOW.S
01/80:          ; LOW MEMORY OF THE DOS/281 SYSTEM
01/80:          ; HANDLES SYSCALLS
01/80:          
01/80:          ; EQUATES
01/80:          KMEM_ST	= 0X78	; KERNEL MEMORY STACK SAVE SLOT
01/80:          ARG_BNK = 0x6C	; ARGUMENT BANK
01/80:          DFT_USR	= 0X6B	; DEFAULT USER AREA
01/80:          
01/80:          .BANK 0
00/80:          .TEXT
00/80:          
00/80:          	; JUMP STUB FOR RECEIVING SYSCALLS
00/80: FF03     	JUMP	SYSPREP
00/82:          
00/81:          
00/81:          	; ENTRY POINT FOR THE KERENL AFTER THE 2ND STAGE BOOT
00/81:          	; JUST JUMP DIRECTLY TO THE 'INIT' ROUTINE IN CORE 
00/81: 34FF     ENTRY:	LOADI	B,CORE0_B
00/82: 3880     	LOADI	C,INIT
00/83: FF7D     	JUMP	INDIR
00/85:          	
00/84:          	; SYSTEM CALL HANDLER PREPARATION
00/84:          	; SAVE THE PREVIOUS STACK, AND SWITCH TO THE KERNEL STACK
00/84:          	; THEN MOVE TO THE SYSTEM CALL HANDLER
00/84: AC78     SYSPREP:STORE	[KMEM_ST],D
00/86:          	
00/85:          	; GET THE ARGUMENT BANK
00/85: 8C6C     	LOAD	D,[ARG_BNK]
00/87:          	
00/86:          	; MOVE TO KERNEL WORK AREA
00/86: 38FF     	LOADI	C,WORK_B
00/87: A880     	STORE	[DBANK],C
00/89:          	
00/88:          	; SET THE SOURCE BANK
00/88: AC05     	STORE	[SRC_BNK],D
00/8A:          	
00/89:          	; GET THE DEFAULT USER AREA
00/89: 3800     	LOADI	C,0
00/8A: A880     	STORE	[DBANK],C
00/8B: 8C6B     	LOAD	D,[DFT_USR]
00/8D:          	
00/8C:          	; SET THE WORKING USER AREA
00/8C: 38FF     	LOADI	C,WORK_B
00/8D: A880     	STORE	[DBANK],C
00/8E: AC09     	STORE	[WRK_USR],D
00/90:          	
00/8F:          	; SET UP KERNEL STACK
00/8F: 3C7E     	LOADI	D,0X80-2
00/91:          	
00/90:          	; SAVE PLACE RETURN ADDRESS INTO THE STACK
00/90: 3898     	LOADI	C,SYSDONE
00/91: BB00     	STOREF	[D],C
00/92: 3800     	LOADI	C,0
00/93: BB01     	STOREF	[D+1],C
00/95:          	
00/94:          	; STICK THE CURRENT SYSTEM CALL IN M0
00/94: A400     	STORE	[M0],B
00/96:          	
00/95:          	; HANDLE THE SYSTEM CALL
00/95: 34F8     	LOADI	B,SYS0_B
00/96: 3880     	LOADI	C,SYSHNDL
00/97: FF69     	JUMP	INDIR
00/99:          	
00/98:          	
00/98:          	; SYSTEM CALL DONE
00/98: 3800     SYSDONE:LOADI	C,0
00/99: A880     	STORE	[DBANK],C
00/9B:          	
00/9A:          	; RESTORE USER STACK
00/9A: 8C78     	LOAD	D,[KMEM_ST]
00/9C:          	
00/9B:          	; RETURN
00/9B: FF66     	JUMP	IRET
00/9D:          	
00/9C:          .DATA
00/9C:          
00/00:          	; SET UP ZERO PAGE
00/00:          .ORG	0X6B
00/6B: 30       .DEF BYTE	'0'
00/6C:          
00/6C:          
00/6C:          
00/6C:          	; SET UP UPPER BANK STUFF
00/6C:          	; THE 'B_' SYMBOLS WILL BE USED TO KEEP TRACK OF WHAT BANKS ARE
00/6C:          	; IN USE
00/6C:          	; 'BI" WILL BE USED FOR INSTRUCTION BANKS
00/6C:          	; 'BD' WILL BE USED FOR DATA BANKS
00/6C:          	; AT THE END OF ASSEMBLY, THESE VALUES WILL BE USED TO DETERMINE
00/6C:          	; HOW MUCH FREE MEMORY USER PROGRAMS HAVE
00/6C:          BI	= 255
00/6C:          BD	= 255
00/6C:          
00/6C:          ; CORE.S
00/6C:          ; MAIN 'GUTS' OF DOS/281
00/6C:          
00/6C:          .BANK BI
FF/00:          CORE0_B	= BI
FF/00:          .TEXT
FF/00:          
FF/80:          	; SET UP SYSTEM FOR OPERATION
FF/80:          	; BRING UP THE WORK BANK
FF/80: 30FF     INIT:	LOADI	A,WORK_B
FF/81: A080     	STORE	[DBANK],A
FF/83:          	
FF/82:          	; SET THE STACK POINTER TO THE TOP OF THE STACK
FF/82: 3C7E     	LOADI	D,0X80-2
FF/84:          
FF/83:          	; INITALIZE THE TTY DRIVER
FF/83: 38FF     	LOADI	C,BI
FF/84: BB01     	STOREF	[D+1],C
FF/85: 388A     	LOADI	C,@+5
FF/86: BB00     	STOREF	[D],C
FF/88:          	
FF/87: 34FD     	LOADI	B,TTY0_B
FF/88: 3880     	LOADI	C,TTYINIT
FF/89: FF77     	JUMP	INDIR
FF/8B:          	
FF/8A:          	; SEND OUT THE 'HELLO' SPLASH
FF/8A: 38FF     	LOADI	C,WORK_B
FF/8B: A805     	STORE	[SRC_BNK],C
FF/8C: 3060     	LOADI	A,S_HELLO
FF/8E:          	
FF/8D: 3892     	LOADI	C,@+5
FF/8E: BB00     	STOREF	[D],C
FF/90:          	
FF/8F: 34FD     	LOADI	B,TTY0_B
FF/90: 3888     	LOADI	C,TTYPUTS
FF/91: FF6F     	JUMP	INDIR
FF/93:          	
FF/92:          	; INITALIZE THE BLOCK DRIVER
FF/92: 3897     	LOADI	C,@+5
FF/93: BB00     	STOREF	[D],C
FF/95:          	
FF/94: 34FC     	LOADI	B,BLK0_B
FF/95: 3880     	LOADI	C,BLKINIT
FF/96: FF6A     	JUMP	INDIR
FF/98:          	
FF/97:          	; DOT PROMPT
FF/97: 301C     PROMPT: LOADI	A,ST_PRMT
FF/98: 38FF     CPRMPT:	LOADI	C,WORK_B	; USED FOR CUSTOM PROMPTS
FF/99: A805     	STORE	[SRC_BNK],C
FF/9B:          
FF/9A: 38FF     	LOADI	C,BI
FF/9B: BB01     	STOREF	[D+1],C
FF/9C: 38A1     	LOADI	C,@+5
FF/9D: BB00     	STOREF	[D],C
FF/9F:          	
FF/9E: 34FD     	LOADI	B,TTY0_B
FF/9F: 3888     	LOADI	C,TTYPUTS
FF/A0: FF60     	JUMP	INDIR
FF/A2:          	
FF/A1:          	; GET AN INPUT FROM THE TERMINAL
FF/A1: 38FE     	LOADI	C,CMDL_B
FF/A2: A805     	STORE	[SRC_BNK],C
FF/A4:          	
FF/A3: 38A8     	LOADI	C,@+5
FF/A4: BB00     	STOREF	[D],C
FF/A6:          	
FF/A5: 34FD     	LOADI	B,TTY0_B
FF/A6: 389A     	LOADI	C,TTYINPT
FF/A7: FF59     	JUMP	INDIR
FF/A9:          	
FF/A8:          	; DO CR / LF
FF/A8: 300D     	LOADI	A,0X0D
FF/A9: 38AE     	LOADI	C,@+5
FF/AA: BB00     	STOREF	[D],C
FF/AC:          	
FF/AB: 34FD     	LOADI	B,TTY0_B
FF/AC: 3881     	LOADI	C,TTYPUTC
FF/AD: FF53     	JUMP	INDIR
FF/AF:          	
FF/AE: 300A     	LOADI	A,0X0A
FF/AF: 38B4     	LOADI	C,@+5
FF/B0: BB00     	STOREF	[D],C
FF/B2:          	
FF/B1: 34FD     	LOADI	B,TTY0_B
FF/B2: 3881     	LOADI	C,TTYPUTC
FF/B3: FF4D     	JUMP	INDIR
FF/B5:          	
FF/B4:          	; NOW, EXECUTE THE COMMAND
FF/B4: 34FE     	LOADI	B,CORE1_B
FF/B5: 3880     	LOADI	C,EXEC
FF/B6: FF4A     	JUMP	INDIR
FF/B8:          
FF/B7:          	; BANK IS DONE, MOVE ON TO THE NEXT
FF/B7:          BI	= BI-1
FF/B7:          .BANK BI
FE/80:          CORE1_B	= BI
FE/80:          .TEXT
FE/80:          
FE/80:          	; ATTEMPT TO EXECUTE WHATEVER HAS BEEN PLACE IN THE CMD
FE/80:          	; BUFFER
FE/80:          	; START BY CLOSING THE FILE
FE/80: 38FE     EXEC:	LOADI	C,BI
FE/81: BB01     	STOREF	[D+1],C
FE/82: 3887     	LOADI	C,@+5
FE/83: BB00     	STOREF	[D],C
FE/85:          	
FE/84: 34FB     	LOADI	B,FS0_B
FE/85: 38E1     	LOADI	C,FCLOSE
FE/86: FF7A     	JUMP	INDIR	
FE/88:          	
FE/87:          	; SET WORKING USER AREA TO '0'
FE/87:          	; TODO: CHANGE THIS TO DEFAULT AREA
FE/87: 3030     	LOADI	A,'0'
FE/88: A009     	STORE	[WRK_USR],A
FE/8A:          
FE/89:          	; ATTEMPT TO SET PARAMETERS FOR SEARCH
FE/89: 3000     	LOADI	A,0
FE/8A: 388F     	LOADI	C,@+5
FE/8B: BB00     	STOREF	[D],C
FE/8D:          	
FE/8C: 34FB     	LOADI	B,FS0_B
FE/8D: 3880     	LOADI	C,SSPARAM
FE/8E: FF72     	JUMP	INDIR
FE/90:          	
FE/8F:          	; CHECK TO MAKE SURE IT RETURNS 0XFE
FE/8F: 70FE     	SUBI	A,0XFE
FE/90: F74A     	BRNZ	EXECERR
FE/92:          	
FE/91:          	; MANUALLY SET THE EXTENSION AS 'SV'
FE/91: 3053     	LOADI	A,'S'
FE/92: A010     	STORE	[PATTERN+6],A
FE/93: 3056     	LOADI	A,'V'
FE/94: A011     	STORE	[PATTERN+7],A
FE/96:          	
FE/95:          	; AND SEARCH FOR IT
FE/95: 3000     	LOADI	A,0
FE/96: 389B     	LOADI	C,@+5
FE/97: BB00     	STOREF	[D],C
FE/99:          	
FE/98: 34FB     	LOADI	B,FS0_B
FE/99: 38D4     	LOADI	C,FSEARCH
FE/9A: FF66     	JUMP	INDIR
FE/9C:          	
FE/9B:          	; DID IT WORK?
FE/9B: 5000     	ADDI	A,0
FE/9C: F73E     	BRNZ	EXECERR
FE/9E:          	
FE/9D:          	; NOW OPEN IT
FE/9D: 38A2     	LOADI	C,@+5
FE/9E: BB00     	STOREF	[D],C
FE/A0:          	
FE/9F: 34FB     	LOADI	B,FS0_B
FE/A0: 38DE     	LOADI	C,FOPEN
FE/A1: FF5F     	JUMP	INDIR
FE/A3:          	
FE/A2:          	; RESET LOAD STATE
FE/A2: 30F2     	LOADI	A,KBUF_B
FE/A3: A005     	STORE	[SRC_BNK],A
FE/A4: 3000     	LOADI	A,0
FE/A6:          	
FE/A5:          	; READ IN THE SAV RECORD
FE/A5: A004     0:	STORE	[L0],A
FE/A6: 38AB     	LOADI	C,@+5
FE/A7: BB00     	STOREF	[D],C
FE/A9:          	
FE/A8: 34FB     	LOADI	B,FS0_B
FE/A9: 38E4     	LOADI	C,FREAD
FE/AA: FF56     	JUMP	INDIR
FE/AC:          	
FE/AB:          	; SAVE THE STACK
FE/AB: AC00     	STORE	[M0],D
FE/AD:          	
FE/AC:          	; MAKE SURE THE READ WORKED
FE/AC: 5000     	ADDI	A,0
FE/AD: F72D     	BRNZ	EXECERR
FE/AF:          	
FE/AE:          	; CHECK THAT THE RECORD IS VALID
FE/AE: 30F2     	LOADI	A,KBUF_B
FE/AF: A080     	STORE	[DBANK],A
FE/B1:          	
FE/B0:          	; LOOK FOR THE 0X0281 AT THE BEGINNING OF THE RECORD
FE/B0: 8000     	LOAD	A,[0X00]
FE/B1: 7002     	SUBI	A,0X02
FE/B2: F728     	BRNZ	EXECERR
FE/B3: 8001     	LOAD	A,[0X01]
FE/B4: 7081     	SUBI	A,0X81
FE/B5: F725     	BRNZ	EXECERR
FE/B7:          	
FE/B6:          	; GRAB THE DESTINATION SECTOR
FE/B6: 8002     	LOAD	A,[0X02]
FE/B8:          	
FE/B7:          	; NO BANK 0!
FE/B7: 5000     	ADDI	A,0
FE/B8: F622     	BRZ	EXECERR
FE/BA:          	
FE/B9:          	; AND LOAD UP THE DATA BLOCK
FE/B9: 3800     	LOADI	C,0
FE/BA: 34F3     1:	LOADI	B,KBUF_B+1
FE/BB: A480     	STORE	[DBANK],B
FE/BC: 9600     	LOADF	B,[C]
FE/BD: A080     	STORE	[DBANK],A
FE/BE: B600     	STOREF	[C],B
FE/BF: 5801     	ADDI	C,1
FE/C0: F5F9     	BRNN	1B
FE/C2:          	
FE/C1:          	; FINALLY, LOAD UP THE ISR BLOCK
FE/C1: 34F4     	LOADI	B,KBUF_B+2
FE/C2: 3CFE     	LOADI	D,BI
FE/C3: 38C5     	LOADI	C,@+2
FE/C4: FF40     	JUMP	PRGM
FE/C6:          	
FE/C5:          	; RESTORE THE STACK AND WORK AREA
FE/C5: 30FF     	LOADI	A,WORK_B
FE/C6: A080     	STORE	[DBANK],A
FE/C7: 8C00     	LOAD	D,[M0]
FE/C9:          	
FE/C8:          	; EITHER MOVE ON TO THE NEXT BLOCK OR EXIT
FE/C8: 8004     	LOAD	A,[L0]
FE/C9: 841A     	LOAD	B,[OF_SIZE+1]
FE/CA: 5001     	ADDI	A,1
FE/CB: D100     	CMP	A,B
FE/CC: F7D8     	BRNZ	0B
FE/CE:          	
FE/CD:          	; SET SYSTEM VARIABLES
FE/CD: 3400     	LOADI	B,0
FE/CE: A480     	STORE	[DBANK],B
FE/CF: 3400     	LOADI	B,MAX_IB
FE/D0: A470     	STORE	[0X70],B
FE/D1: 3400     	LOADI	B,MAX_DB
FE/D2: A471     	STORE	[0X71],B
FE/D3: 34FE     	LOADI	B,CMDL_B
FE/D4: A472     	STORE	[0X72],B
FE/D5: 3400     	LOADI	B,0
FE/D6: A473     	STORE	[0X73],B
FE/D8:          	
FE/D7:          	; RUN THE PROGRAM
FE/D7: 3401     	LOADI	B,1
FE/D8: A480     	STORE	[DBANK],B
FE/D9: 3880     	LOADI	C,0X80
FE/DA: FF26     	JUMP	INDIR
FE/DC:          	
FE/DB:          
FE/DB:          
FE/DB:          	; HANDLE ERROR IN EXEC
FE/DB: 30FF     EXECERR:LOADI	A,WORK_B
FE/DC: A080     	STORE	[DBANK],A
FE/DD: 301B     	LOADI	A,ST_ERR
FE/DE: 34FF     	LOADI	B,CORE0_B
FE/DF: 3898     	LOADI	C,CPRMPT
FE/E0: FF20     	JUMP	INDIR
FE/E2:          
FE/E1:          	; BANK IS DONE, MOVE ON TO THE NEXT
FE/E1:          BI	= BI-1
FE/E1:          
FE/E1:          	; ALLOCATE A BANK FOR THE KERNEL WORK AREA
FE/E1:          	; 0X60-7F = KERNEL STACK SPACE
FE/E1:          .BANK	BD
FF/B7:          WORK_B	= BD
FF/B7:          .DATA
FF/B7:          
FF/00:          	; MISC VALUES
FF/00:          	; USED AS TEMP REGISTERS FOR ALL SORTS OF STUFF
FF/00: 00       .DEFL BYTE M0		0
FF/01: 00       .DEFL BYTE M1		0
FF/02: 00       .DEFL BYTE M2		0
FF/03:          
FF/03:          	; DEVICE SPECIFIC MISC VALUES
FF/03:          	; SAFE TO USE IN DEVICE DRIVERS
FF/03: 00       .DEFL BYTE D0		0
FF/04:          
FF/04:          	; STATE INFORMATION FOR LOADING A BINARY INTO MEMORY
FF/04: 00       .DEFL BYTE L0		0
FF/05:          
FF/05:          	; SOURCE BANK OF WHATEVER OPERATION IS BEING DONE
FF/05:          	; MAINLY USED TO KEEP TRACK OF THE BANK ADDRESS
FF/05:          	; OF STUFF BEING WORKED ON IN USER SPACE
FF/05: 00       .DEFL BYTE SRC_BNK	0
FF/06:          
FF/06:          	; ADDRESSES FOR THE BLOCK DEVICE DRIVER
FF/06:          	; USED DURING A 'READ' OR 'WRITE' CALL
FF/06: 0000     .DEFL BYTE BLK		0,0
FF/08:          
FF/08:          	; PATTERN FOR SEARCHING FOR FILES
FF/08:          	; AND WORKING USER AREA
FF/08: FF       .DEFL BYTE MATCH	0XFF	; THIS IS ALWAYS 0XFF
FF/09: 30       .DEFL BYTE WRK_USR	'0'
FF/0A: 3F3F3F3F
       3F3F3F3F .DEFL BYTE PATTERN	"????????"
FF/12:          
FF/12:          	; STATE INFORMATION FOR SEARCHING 
FF/12: 00       .DEFL BYTE SRCH_LO	0	; LOW BLOCK
FF/13: 00       .DEFL BYTE SRCH_BK	0	; CURRENT BANK
FF/14: 00       .DEFL BYTE SRCH_RP	0	; RECORD POINTER
FF/15: 00       .DEFL BYTE SRCH_LS	0	; LAST ENDING
FF/16:          
FF/16:          	; STATE INFORMATION FOR OPEN FILES
FF/16: 00       .DEFL BYTE OF_OPEN	0	; OF_OPEN = 1 IF THERE IS A FILE OPEN
FF/17: 0000     .DEFL BYTE OF_BTAB	0,0	; BLOCK TABLE ADDRESS
FF/19: 0000     .DEFL BYTE OF_SIZE	0,0	; OPEN FILE SIZE
FF/1B:          
FF/1B:          	; ERROR
FF/1B: 3F       .DEFL BYTE ST_ERR	"?"
FF/1C:          
FF/1C:          	; COMMAND LINE PROMPT
FF/1C: 0A0D2E00 .DEFL BYTE ST_PRMT	0X0A,0X0D,'.',0
FF/20:          
FF/20:          	; PLACE 'HELLO' AT BOTTOM  OF STACK
FF/20:          	; WE DON'T CARE IF IT GETS OVERWRITTEN LATER
FF/20:          .ORG 0X60
FF/60: 444F532F
       32383120
       56312E30
       0A0D00   .DEFL BYTE S_HELLO	"DOS/281 V1.0",0X0A,0X0D,0
FF/6F:          
FF/6F:          
FF/6F:          	; BANK IS DONE, MOVE ON TO THE NEXT
FF/6F:          BD	= BD-1
FF/6F:          
FF/6F:          	; COMMAND LINE BANK
FF/6F:          CMDL_B	= BD
FF/6F:          
FF/6F:          	; BANK IS DONE, MOVE ON TO THE NEXT
FF/6F:          BD	= BD-4
FF/6F:          	
FF/6F:          	; BLOCK ALLOCATION BITMAP
FF/6F:          ABM_B	= BD
FF/6F:          
FF/6F:          	; BANK IS DONE, MOVE ON TO THE NEXT
FF/6F:          BD	= BD-4
FF/6F:          
FF/6F:          	; FILE BLOCK TABLE
FF/6F:          FBT_B	= BD
FF/6F:          
FF/6F:          	; BANK IS DONE, MOVE ON TO THE NEXT
FF/6F:          BD	= BD-4
FF/6F:          
FF/6F:          	; KERNEL BUFFER
FF/6F:          KBUF_B	= BD
FF/6F:          
FF/6F:          	; BANK IS DONE, MOVE ON TO THE NEXT
FF/6F:          BD	= BD-1
FF/6F:          
FF/6F:          
FF/6F:          ; TTY.S
FF/6F:          ; SERIAL CONSOLE DRIVER
FF/6F:          
FF/6F:          .BANK BI
FD/00:          TTY0_B	= BI
FD/00:          .TEXT
FD/00:          
FD/80:          	; SERIAL INIT
FD/80:          	; SET UP THE 16C550 UART
FD/80:          	; ASSUMES WORK BANK IS SELECTED
FD/80:          	; TODO
FD/80:          	; USES: A, B, C
FD/80: FF51     TTYINIT:JUMP	TTYDONE
FD/82:          
FD/81:          	; PUTS A CHARACTER ONTO THE TERMINAL
FD/81:          	; ASSUMES WORK BANK IS SELECTED
FD/81:          	; A = CHARACTER TO PRINT
FD/81:          	; USES: B
FD/81: 8495     TTYPUTC:LOAD	B,[UART_LS]
FD/83:          
FD/82:          	; READ 5TH BIT TO SEE IF WE CAN TRANSMIT YET
FD/82: 4500     	SHIFTL	B
FD/83: 4500     	SHIFTL	B
FD/84: 4500     	SHIFTL	B
FD/85: F1FB     	BRNC	TTYPUTC
FD/87:          	
FD/86:          	; TRANSMITE BYTE
FD/86: A090     	STORE	[UART_TH],A
FD/87: FF4A     	JUMP	TTYDONE
FD/89:          
FD/88:          	; PUTS A STRING FROM USER SPACE ONTO THE TERMINAL
FD/88:          	; ASSUMES WORK BANK IS SELECTED
FD/88:          	; A = ADDRESS OF STRING
FD/88:          	; [SRC_BNK] = DATA BANK OF STRING
FD/88:          	; USES: A, B, C
FD/88: 8405     TTYPUTS:LOAD	B,[SRC_BNK]
FD/89: A480     	STORE	[DBANK],B
FD/8B:          
FD/8A:          	; READ BYTE FROM STRING
FD/8A: 9800     0:	LOADF	C,[A]
FD/8B: 5800     	ADDI	C,0
FD/8C: F645     	BRZ	TTYDONE
FD/8E:          	
FD/8D:          	; GET THE LINE STATUS REGISTER
FD/8D: 8495     1:	LOAD	B,[UART_LS]
FD/8F:          
FD/8E:          	; READ 5TH BIT TO SEE IF WE CAN TRANSMIT YET
FD/8E: 4500     	SHIFTL	B
FD/8F: 4500     	SHIFTL	B
FD/90: 4500     	SHIFTL	B
FD/91: F1FB     	BRNC	1B
FD/93:          	
FD/92:          	; TRANSMIT BYTE
FD/92: A890     	STORE	[UART_TH],C
FD/94:          	
FD/93:          	; INCREMENT POINTER
FD/93: 5001     	ADDI	A,1
FD/95:          	
FD/94:          	; RETURN TO PRINT LOOP
FD/94: FFF5     	JUMP	0B
FD/96:          	
FD/95:          	; WAIT FOR A CHARACTER TO BE TYPED AND THEN RETURNS IT
FD/95:          	; CHARACTER WILL NOT BE ECHOED
FD/95:          	; IF TTYSTAT RETURN 0XFF, THE RETURN WILL BE INSTANT
FD/95:          	; ASSUMES WORK BANK IS SELECTED
FD/95:          	; CHARACTER RETURNED IN A
FD/95:          	; USES: A, B
FD/95: 8495     TTYGETC:LOAD	B,[UART_LS]
FD/97:          
FD/96:          	; READ 1ST BIT
FD/96: C500     	SHIFTR	B
FD/97: F1FD     	BRNC	TTYGETC
FD/99:          	
FD/98:          	; READ BYTE
FD/98: 8090     	LOAD	A,[UART_RH]
FD/99: FF38     	JUMP	TTYDONE
FD/9B:          	
FD/9A:          	; INPUTS A LINE OF CHARACTER INTO A DATA BANK
FD/9A:          	; RESULTING STRING WILL START AT ADDRESS ZERO, AND BE ZERO
FD/9A:          	; TERMINATED
FD/9A:          	; ASSUMES WORK BANK IS SELECTED
FD/9A:          	; [SRC_BNK] = DATA BANK OF RESULT
FD/9A:          	; USES: A, B, C
FD/9A: 8405     TTYINPT:LOAD	B,[SRC_BNK]
FD/9B: A480     	STORE	[DBANK],B
FD/9D:          	
FD/9C:          	; SET POINTER FOR STORAGE
FD/9C: 3800     	LOADI	C,0
FD/9E:          
FD/9D:          	; READ CHARACTER FROM CONSOLE
FD/9D:          	; GET THE LINE STATUS REGISTER
FD/9D: 8495     0:	LOAD	B,[UART_LS]
FD/9F:          
FD/9E:          	; CHECK BIT 0 TO SEE IF WE HAVE A CHARACTER 
FD/9E: C500     	SHIFTR	B
FD/9F: F1FD     	BRNC	0B
FD/A1:          	
FD/A0:          	; READ THE CHARACTER INTO A
FD/A0: 8090     	LOAD	A,[UART_RH]
FD/A2:          
FD/A1:          	; SEE IF IT IS A 'CR' CHARACTER
FD/A1: 340D     1:	LOADI	B,0X0D
FD/A2: D100     	CMP	A,B
FD/A3: F626     	BRZ	9F
FD/A5:          	
FD/A4:          	; SEE IF IT IS A 'BS' CHARACTER
FD/A4: 3408     	LOADI	B,0X08
FD/A5: D100     	CMP	A,B
FD/A6: F615     	BRZ	4F
FD/A8:          	
FD/A7:          	; IGNORE ALL OTHER WHITESPACE CHARACTERS
FD/A7: 3420     	LOADI	B,0X20
FD/A8: D100     	CMP	A,B
FD/A9: F1F3     	BRB	0B
FD/AB:          	
FD/AA:          	; CHECK IF IT IS A DELETE CHARACTER
FD/AA: 347F     	LOADI	B,0X7F
FD/AB: D100     	CMP	A,B
FD/AC: F702     	BRNZ	2F
FD/AE:          	
FD/AD:          	; YEP, CONVERT IT IN TO A 'BS' CHARACTER
FD/AD: 3008     	LOADI	A,0X08
FD/AE: FFF2     	JUMP	1B
FD/B0:          	
FD/AF:          	; CHECK TO SEE IF THERE IS SPACE TO PLACE THE CHARACTERS
FD/AF:          	; INTO THE BUFFER
FD/AF: D600     2:	CMP	B,C
FD/B0: F6EC     	BRZ	0B
FD/B2:          
FD/B1:          	; CONVERT TO UPPER CASE
FD/B1: 3461     	LOADI	B,0X61
FD/B2: D100     	CMP	A,B
FD/B3: F104     	BRB	3F
FD/B4: 347A     	LOADI	B,0X7A
FD/B5: D100     	CMP	A,B
FD/B6: F801     	BRA	3F
FD/B7: 7020     	SUBI	A,0X20
FD/B9:          	
FD/B8:          	; PRINT THE CHARACTER
FD/B8: A090     3:	STORE	[UART_TH],A
FD/BA:          	
FD/B9:          	; PLACE IT INTO THE BUFFER
FD/B9: B200     	STOREF	[C],A
FD/BA: 5801     	ADDI	C,1
FD/BB: FFE1     	JUMP	0B
FD/BD:          
FD/BC:          	; HANDLE BACKSPACE
FD/BC:          	; SUBTRACT ONE FROM THE BUFFER
FD/BC: 5800     4:	ADDI	C,0
FD/BD: F6DF     	BRZ	0B
FD/BE: 7801     	SUBI	C,1
FD/C0:          
FD/BF:          	; ECHO THE CHARACTER
FD/BF: A090     	STORE	[UART_TH],A
FD/C1:          
FD/C0:          	; PRINT AN ADDITIONAL SPACE AND THEN BACKSPACE
FD/C0: 8495     5:	LOAD	B,[UART_LS]
FD/C1: C500     	SHIFTR	B
FD/C2: F1FD     	BRNC	5B
FD/C4:          	
FD/C3: 3420     	LOADI	B,0X20
FD/C4: A490     	STORE	[UART_TH],B
FD/C6:          	
FD/C5: 8495     6:	LOAD	B,[UART_LS]
FD/C6: C500     	SHIFTR	B
FD/C7: F1FD     	BRNC	6B
FD/C9:          	
FD/C8: A090     	STORE	[UART_TH],A
FD/CA:          	
FD/C9: FFD3     	JUMP	0B
FD/CB:          	
FD/CA:          	; TERMINATE THE STRING AND EXIT
FD/CA: 3000     9:	LOADI	A,0
FD/CB: B200     	STOREF	[C],A
FD/CC: FF05     	JUMP	TTYDONE
FD/CE:          	
FD/CD:          
FD/CD:          	; POLL THE UART TO SEE IF THERE IS A CHARACTER WAITING
FD/CD:          	; ASSUMES WORK BANK IS SELECTED
FD/CD:          	; RETURNS A=0XFF IF THERE IS A CHARACTER, OTHERWISE A=0X00
FD/CD: 3000     TTYSTAT:LOADI	A,0
FD/CF:          
FD/CE:          	; GET THE LINE STATUS REGISTER
FD/CE: 8495     	LOAD	B,[UART_LS]
FD/D0:          
FD/CF:          	; READ 1ST BIT
FD/CF: C500     	SHIFTR	B
FD/D0: F101     	BRNC	TTYDONE
FD/D2:          	
FD/D1:          	; SET A AND FALL TO TTYDONE
FD/D1: 30FF     	LOADI	A,0XFF
FD/D3:          
FD/D2:          	; INTERNAL TTY FUNCTION TO RESET TO WORK BANK AND RETURN
FD/D2: 38FF     TTYDONE:LOADI	C,WORK_B
FD/D3: A880     	STORE	[DBANK],C
FD/D4: FF2D     	JUMP	IRET
FD/D6:          
FD/D5:          	; BANK IS DONE, MOVE ON TO THE NEXT
FD/D5:          BI	= BI-1
FD/D5:          ; BLK.S
FD/D5:          ; BLOCK DEVICE DRIVER
FD/D5:          ; (COMPACT FLASH VERSION)
FD/D5:          
FD/D5:          .BANK BI
FC/80:          BLK0_B	= BI
FC/80:          .TEXT
FC/80:          
FC/80:          	; BLOCK DEVICE INIT
FC/80:          	; SET UP THE COMPACT FLASH CARD
FC/80:          	; ASSUMES WORK BANK IS SELECTED
FC/80:          	; USES: A, B, C
FC/80: 3882     BLKINIT:LOADI	C,@+2
FC/81: FF41     	JUMP	CFWAIT
FC/83:          	
FC/82:          	; SET 8 BIT MODE
FC/82: 3001     	LOADI	A,CF_8BIT
FC/83: A0A1     	STORE	[CF_FEAT],A
FC/84: 30EF     	LOADI	A,CF_SETF
FC/85: A0A7     	STORE	[CF_CMD],A
FC/87:          	
FC/86:          	; NOW DISABLE THE CACHE
FC/86: 3888     	LOADI	C,@+2
FC/87: FF3B     	JUMP	CFWAIT
FC/88: 3082     	LOADI	A,CF_DCAC
FC/89: A0A1     	STORE	[CF_FEAT],A
FC/8A: 30EF     	LOADI	A,CF_SETF
FC/8B: A0A7     	STORE	[CF_CMD],A
FC/8D:          
FC/8C: FF3C     	JUMP	BLKDONE
FC/8E:          
FC/8D:          	; READS A BLOCK (512 BYTES) FROM THE BLOCK DEVICE
FC/8D:          	; CONTENTS WILL BE PLACED IN 4 SEQUENTIAL DATA BANKS
FC/8D:          	; ASSUMES WORK BANK IS SELECTED
FC/8D:          	; A = LOWEST DESTINATION DATA BANK
FC/8D:          	; RETURNS A = 0X00
FC/8D:          	; USES: A, B, C, D0
FC/8D: 388F     BLKREAD:LOADI	C,@+2
FC/8E: FF2A     	JUMP	CFADDR
FC/90:          	
FC/8F:          	; EXECUTE THE READ COMMAND AND WAIT
FC/8F: 3420     	LOADI	B,CF_READ
FC/90: A4A7     	STORE	[CF_CMD],B
FC/91: 3893     	LOADI	C,@+2
FC/92: FF30     	JUMP	CFWAIT
FC/94:          	
FC/93:          	; COPY INTO 4 DATA BANKS
FC/93: 3804     	LOADI	C,4
FC/94: A003     0:	STORE	[D0],A
FC/95: A080     	STORE	[DBANK],A
FC/96: 3000     	LOADI	A,0
FC/98:          	
FC/97:          	; COPY 128 BYTES
FC/97: 84A0     1:	LOAD	B,[CF_DATA]
FC/98: B400     	STOREF	[A],B
FC/99: 5001     	ADDI	A,1
FC/9A: F5FC     	BRNN	1B
FC/9C:          	
FC/9B:          	; NEXT BANK?
FC/9B: 30FF     	LOADI	A,WORK_B
FC/9C: A080     	STORE	[DBANK],A
FC/9D: 8003     	LOAD	A,[D0]
FC/9E: 5001     	ADDI	A,1
FC/9F: 7801     	SUBI	C,1
FC/A0: F7F3     	BRNZ	0B
FC/A2:          	
FC/A1:          	; OPERATION COMPLETE
FC/A1: 3000     	LOADI	A,0
FC/A2: FF26     	JUMP	BLKDONE
FC/A4:          	
FC/A3:          	; WRITES A BLOCK (512 BYTES) TO THE BLOCK DEVICE
FC/A3:          	; CONTENTS WILL BE TAKEN FROM 4 SEQUENTIAL DATA BANKS
FC/A3:          	; ASSUMES WORK BANK IS SELECTED
FC/A3:          	; A = LOWEST SOURCE DATA BANK
FC/A3:          	; RETURNS A = 0X00
FC/A3:          	; USES: A, B, C, D0
FC/A3: 38A5     BLKWRIT:LOADI	C,@+2
FC/A4: FF14     	JUMP	CFADDR
FC/A6:          	
FC/A5:          	; EXECUTE THE WRITE COMMAND AND WAIT
FC/A5: 3430     	LOADI	B,CF_WRIT
FC/A6: A4A7     	STORE	[CF_CMD],B
FC/A7: 38A9     	LOADI	C,@+2
FC/A8: FF1A     	JUMP	CFWAIT
FC/AA:          	
FC/A9:          	; COPY OUT OF 4 DATA BANKS
FC/A9: 3804     	LOADI	C,4
FC/AA: A003     0:	STORE	[D0],A
FC/AB: A080     	STORE	[DBANK],A
FC/AC: 3000     	LOADI	A,0
FC/AE:          	
FC/AD:          	; COPY 128 BYTES
FC/AD: 9400     1:	LOADF	B,[A]
FC/AE: A4A0     	STORE	[CF_DATA],B
FC/AF: 5001     	ADDI	A,1
FC/B0: F5FC     	BRNN	1B
FC/B2:          	
FC/B1:          	; NEXT BANK?
FC/B1: 30FF     	LOADI	A,WORK_B
FC/B2: A080     	STORE	[DBANK],A
FC/B3: 8003     	LOAD	A,[D0]
FC/B4: 5001     	ADDI	A,1
FC/B5: 7801     	SUBI	C,1
FC/B6: F7F3     	BRNZ	0B
FC/B8:          	
FC/B7:          	; OPERATION COMPLETE
FC/B7: 3000     	LOADI	A,0
FC/B8: FF10     	JUMP	BLKDONE
FC/BA:          
FC/B9:          	; SET THE LBA ADDRESS OF THE CF CARD
FC/B9:          	; USING THE BLOCK ADDRESS ON THE WORK BANK
FC/B9:          	; BLOCK COUNT IS ALSO SET
FC/B9:          	; AFTER THAT, A WAIT IS PERFORMED SO A
FC/B9:          	; COMMAND CAN BE EXECUTED AFTER
FC/B9:          	; USES: B
FC/B9: 8407     CFADDR:	LOAD	B,[BLK+1]
FC/BA: A4A3     	STORE	[CF_LBA0],B
FC/BB: 8406     	LOAD	B,[BLK]
FC/BC: A4A4     	STORE	[CF_LBA1],B
FC/BD: 3400     	LOADI	B,0
FC/BE: A4A5     	STORE	[CF_LBA2],B
FC/BF: 34E0     	LOADI	B,0XE0
FC/C0: A4A6     	STORE	[CF_LBA3],B
FC/C1: 3401     	LOADI	B,1
FC/C2: A4A2     	STORE	[CF_CNT],B
FC/C4:          
FC/C3:          	; WAIT FOR THE CF CARD TO BECOME READY
FC/C3:          	; FOR THIS TO HAPPEN, THE BUSY FLAG MUST BE 0
FC/C3:          	; AND THE READY FLAG MUST BE 1
FC/C3:          	; IF A CF CARD ISN'T PRESENT, THIS ROUTINE HANGS
FC/C3:          	; BUT WE DON'T CARE
FC/C3:          	; USES: B
FC/C3: 84A7     CFWAIT:	LOAD	B,[CF_STAT]
FC/C5:          
FC/C4:          	; CHECK BIT 7 (BUSY FLAG)
FC/C4: 4500     	SHIFTL	B
FC/C6:          	
FC/C5:          	; GO BACK TO START BUSY
FC/C5: F0FD     	BRC	CFWAIT
FC/C7:          	
FC/C6:          	; CHECK BIT 6 (READY FLAG)
FC/C6: 4500     	SHIFTL	B
FC/C8:          	
FC/C7:          	; GO BACK TO START IF NOT READY
FC/C7: F1FB     	BRNC	CFWAIT
FC/C9:          	
FC/C8:          	; RETURN FROM FUNCTION CALL
FC/C8: FE37     	JUMPR	C
FC/CA:          
FC/C9:          
FC/C9:          	; INTERNAL BLK FUNCTION TO RESET TO WORK BANK AND RETURN
FC/C9: 38FF     BLKDONE:LOADI	C,WORK_B
FC/CA: A880     	STORE	[DBANK],C
FC/CB: FF36     	JUMP	IRET
FC/CD:          
FC/CC:          	; BANK IS DONE, MOVE ON TO THE NEXT
FC/CC:          BI	= BI-1
FC/CC:          ; FS.S
FC/CC:          ; FILE SYSTEM HANDLING ROUTINES
FC/CC:          
FC/CC:          .BANK BI
FB/80:          FS0_B	= BI
FB/80:          .TEXT
FB/80:          	; SET SEARCH PARAMETERS
FB/80:          	; USING A STRING IN USER SPACE, THE FILE SEARCH PATTERN WILL
FB/80:          	; BE UPDATED
FB/80:          	; THE FILE SEARCH POINTER WILL ALSO BE RESET
FB/80:          	; ASSUMES WORK BANK IS SELECTED
FB/80:          	; A = ADDRESS OF STRING
FB/80:          	; [SRC_BNK] = DATA BANK OF STRING
FB/80:          	; RETURNS A=0X00 IF PATTERN IS VALID, OTHERWISE 0XFF
FB/80:          	; 0XFE CAN BE RETURNED IF THERE NEVER IS A '.' IN THE FILE
FB/80:          	; USES: A, B, C, M0, M1, M2
FB/80: A000     SSPARAM:STORE	[M0],A
FB/82:          
FB/81:          	; STORE PATTERN COUNTER
FB/81: 3006     	LOADI	A,6
FB/82: A001     	STORE	[M1],A
FB/84:          	
FB/83:          	; STORE PATTERN POINTER
FB/83: 300A     	LOADI	A,PATTERN
FB/84: A002     	STORE	[M2],A
FB/86:          	
FB/85:          	; RESET THE PATTERN
FB/85: 300A     	LOADI	A,PATTERN
FB/86: 3408     	LOADI	B,8
FB/87: 3820     	LOADI	C,0X20
FB/88: B800     0:	STOREF	[A],C
FB/89: 5001     	ADDI	A,1
FB/8A: 7401     	SUBI	B,1
FB/8B: F7FC     	BRNZ	0B
FB/8D:          	
FB/8C:          	; DO AN INITAL CHECKOUT OF THE PATTERN
FB/8C: 8005     	LOAD	A,[SRC_BNK]
FB/8D: 8400     	LOAD	B,[M0]
FB/8E: A080     	STORE	[DBANK],A
FB/90:          	
FB/8F:          	; MAKE SURE THERE IS ACTUALLY A PATTERN
FB/8F: 9900     	LOADF	C,[B]
FB/90: 3020     	LOADI	A,0X20
FB/91: D200     	CMP	A,C
FB/92: F03F     	BRAE	9F
FB/94:          	
FB/93:          	; SEE IF THERE IS A USER AREA PREFIX
FB/93:          	; AND CHANGE BANK TO KERNEL WORK AREA
FB/93: 9101     	LOADF	A,[B+1]
FB/94: 703A     	SUBI	A,':'
FB/95: 30FF     	LOADI	A,WORK_B
FB/96: A080     	STORE	[DBANK],A
FB/97: F709     	BRNZ	1F
FB/99:          	
FB/98:          	; MAKE SURE THAT THE USER AREA PREFIX IS VALID
FB/98: 3030     	LOADI	A,'0'
FB/99: D800     	CMP	C,A
FB/9A: F137     	BRB	9F
FB/9B: 3039     	LOADI	A,'9'
FB/9C: D800     	CMP	C,A
FB/9D: F834     	BRA	9F
FB/9F:          
FB/9E:          	; SET THE WORKING USER AREA
FB/9E: A809     	STORE	[WRK_USR],C
FB/A0:          	
FB/9F:          	; AND SKIP THE PREFIX
FB/9F: 5402     	ADDI	B,2
FB/A0: A400     	STORE	[M0],B
FB/A2:          
FB/A1:          	; GRAB THE NEXT CHARACTER
FB/A1:          	; C = NEXT CHARACTER
FB/A1: 8400     1:	LOAD	B,[M0]
FB/A2: 8005     	LOAD	A,[SRC_BNK]
FB/A3: A080     	STORE	[DBANK],A
FB/A4: 9900     	LOADF	C,[B]
FB/A5: 30FF     	LOADI	A,WORK_B
FB/A6: A080     	STORE	[DBANK],A
FB/A8:          	
FB/A7:          	; INCREMENT AND SAVE POINTER INTO M0
FB/A7: 5401     	ADDI	B,1
FB/A8: A400     	STORE	[M0],B
FB/AA:          	
FB/A9:          	; GRAB PATTERN POINTER
FB/A9: 8002     	LOAD	A,[M2]
FB/AB:          	
FB/AA:          	; SEE IF THE PATTERN IS COMPLETE
FB/AA:          	; AND GRAB PATTERN COUNTER
FB/AA: 3420     	LOADI	B,0X20
FB/AB: D600     	CMP	B,C
FB/AC: 8401     	LOAD	B,[M1]
FB/AD: F01A     	BRAE	6F
FB/AF:          	
FB/AE:          	
FB/AE:          	
FB/AE:          	; SEE IF IT IS A '.'
FB/AE: 782E     	SUBI	C,'.'
FB/AF: F611     	BRZ	5F
FB/B1:          	
FB/B0:          	; THERE MUST BE SPACE IN THE PATTERN BUFFER FOR ANY
FB/B0:          	; OF THE NEXT VALUES TO BE VALID
FB/B0:          	; LETS CHECK IT
FB/B0: 7401     	SUBI	B,1
FB/B1: F420     	BRN	9F
FB/B3:          	
FB/B2:          	; SEE IF IT IS A '*'
FB/B2: 78FC     	SUBI	C,'*'-'.'
FB/B3: F606     	BRZ	3F
FB/B5:          	
FB/B4:          	; OTHERWISE, IT'S A NORMAL CHARACTER
FB/B4:          	; PLACE IT IN THE BUFFER AND MOVE ON
FB/B4: 582A     	ADDI	C,'*'
FB/B5: B800     	STOREF	[A],C
FB/B6: 5001     	ADDI	A,1
FB/B7: A002     2:	STORE	[M2],A
FB/B8: A401     	STORE	[M1],B
FB/B9: FFE7     	JUMP	1B
FB/BB:          
FB/BA:          	; HANDLE '*'
FB/BA:          	; FILL REST OF PATTERN SECTION WITH '?'
FB/BA: 5401     3:	ADDI	B,1
FB/BB: 383F     	LOADI	C,'?'
FB/BC: B800     4:	STOREF	[A],C
FB/BD: 5001     	ADDI	A,1
FB/BE: 7401     	SUBI	B,1
FB/BF: F7FC     	BRNZ	4B
FB/C0: FFF6     	JUMP	2B
FB/C2:          	
FB/C1:          	; HANDLE '.'
FB/C1:          	; MAKE SURE THE LAST 2 BYTES OF THE PATTERN BUFFER ARE EMPTY
FB/C1:          	; AND THERE HASN'T BEEN A '.' ALREADY
FB/C1: 3810     5:	LOADI	C,PATTERN+6
FB/C2: 4100     	ADD	A,B
FB/C3: D200     	CMP	A,C
FB/C4: F80D     	BRA	9F
FB/C6:          	
FB/C5:          	; SET THE NEW PATTERN POINTER
FB/C5: 3010     	LOADI	A,PATTERN+6
FB/C6: 3402     	LOADI	B,2
FB/C7: FFEF     	JUMP	2B
FB/C9:          
FB/C8:          	; PATTERN IS COMPLETE
FB/C8:          	; MAKE SURE ALL FIELDS HAVE BEEN FILLED IN
FB/C8: 3810     6:	LOADI	C,PATTERN+6
FB/C9: D200     	CMP	A,C
FB/CA: F902     	BRBE	7F
FB/CB: 3000     	LOADI	A,0
FB/CC: FF1A     	JUMP	FS0DONE
FB/CE:          	
FB/CD:          	; CHECK TO SEE IF A '.' HAS BEEN PLACED
FB/CD: 4100     7:	ADD	A,B
FB/CE: D200     	CMP	A,C
FB/CF: F702     	BRNZ	9F
FB/D0: 30FE     	LOADI	A,0XFE
FB/D1: FF15     	JUMP	FS0DONE
FB/D3:          	
FB/D2:          	; PATTERN IS INVALID
FB/D2: 30FF     9:	LOADI	A,0XFF
FB/D3: FF13     	JUMP	FS0DONE
FB/D5:          	
FB/D4:          		
FB/D4:          	; FILE RECORD FORMAT (16 BYTES)
FB/D4:          	; 0:     FILE ALLOCATED TAG
FB/D4:          	;   0X00 = UNALLOCATED
FB/D4:          	;   0XFF = ALLOCATED
FB/D4:          	; 1:     USER AREA
FB/D4:          	;   '0'-'9' FOR USER AREA
FB/D4:          	; 2-7:   FILE NAME
FB/D4:          	;   'A'-'Z','0'-'9','-','_'
FB/D4:          	; 8-9:   FILE EXTENSION
FB/D4:          	;   'A'-'Z','0'-'9','-','_'
FB/D4:          	; 10-11  FILE SIZE IN BLOCKS
FB/D4:          	; 12:    UNUSED
FB/D4:          	; 13-14: FILE BLOCK TABLE ADDRESS
FB/D4:          	;   16 BIT PHYSICAL ADDRESS OF BLOCK TABLE
FB/D4:          	; 15:    NEXT RECORD / END RECORD
FB/D4:          	;   0X00 = HAS NEXT RECORD
FB/D4:          	;   0X01 = NEXT RECORD ON NEXT BLOCK
FB/D4:          	;   0XFF = END OF RECORD 
FB/D4:          	
FB/D4:          	; SEARCHES THE FILE RECORDS UNTIL ONE MATCHING THE CURRENT PATTERN
FB/D4:          	; IS FOUND OR ALL RECORDS ARE EXHAUSTED
FB/D4:          	; ASSUMES WORK BANK IS SELECTED
FB/D4:          	; A = 0 TO RESET THE SEARCH, 1 TO CONTINUE TO NEXT ENTRY
FB/D4:          	; A RETURNS 0X00 IF FOUND, OTHERWISE 0XFF IS RETURNED
FB/D4:          	; USES: A, B, C, M0, M1, M2
FB/D4: 3408     FSEARCH:LOADI	B,MATCH
FB/D5: A402     	STORE	[M2],B
FB/D6: 5000     	ADDI	A,0
FB/D7: 34FA     	LOADI	B,FS1_B
FB/D8: 38C7     	LOADI	C,FSNEXT
FB/D9: F727     	BRNZ	INDIR
FB/DB:          	
FB/DA:          	; RESET SEARCH STATE
FB/DA: 3011     	LOADI	A,17
FB/DB: A012     	STORE	[SRCH_LO],A
FB/DD:          	
FB/DC:          	; CHECK THE RECORD
FB/DC: 3880     	LOADI	C,FSSTART
FB/DD: FF23     	JUMP	INDIR
FB/DF:          	
FB/DE:          	; OPENS THE FILE THAT IS CURRENTLY BEING POINTED
FB/DE:          	; TO BE THE FILE SEARCH STATE
FB/DE:          	; DUE TO THIS, FOPEN MUST BE RUN IMMEDIATELY
FB/DE:          	; AFTER A FILE SEARCH
FB/DE:          	; ASSUMES WORK BANK IS SELECTED
FB/DE:          	; A RETURNS 0X00 IF SUCCESSFUL, OTHERWISE 0XFF IS RETURNED
FB/DE:          	; USES: A, B, C, M0
FB/DE: 34FA     FOPEN:	LOADI	B,FS1_B
FB/DF: 38DA     	LOADI	C,FOPENA
FB/E0: FF20     	JUMP	INDIR
FB/E2:          	
FB/E1:          	; CLOSES ANY FILES THAT ARE OPEN
FB/E1:          	; ALL BUFFERS WILL BE FLUSHED AFTER THE OPERATION COMPLETES
FB/E1:          	; USES: A, B, C
FB/E1: 3000     FCLOSE:	LOADI	A,0
FB/E2: A016     	STORE	[OF_OPEN],A
FB/E3: FF03     	JUMP	FS0DONE
FB/E5:          
FB/E4:          	; READS A BLOCK OUT OF THE CURRENTLY OPEN FILE
FB/E4:          	; THE AND ERROR IS RETURNED IF THE BLOCK IS OUTSIDE OF THE CURRENT
FB/E4:          	; FILE SIZE
FB/E4:          	; A FILE MUST CURRENTLY BE OPEN
FB/E4:          	; A = BLOCK TO READ
FB/E4:          	; [SRC_BNK] = DESTINATION OF READ DATA
FB/E4:          	; ASSUMES WORK BANK IS SELECTED
FB/E4:          	; A RETURNS 0X00 IF SUCCESSFUL, OTHERWISE 0XFF IS RETURNED
FB/E4:          	; USES: A, B, C, M0
FB/E4: 34F9     FREAD:	LOADI	B,FS2_B
FB/E5: 3880     	LOADI	C,FREADA
FB/E6: FF1A     	JUMP	INDIR
FB/E8:          
FB/E7:          
FB/E7:          
FB/E7:          	; INTERNAL FS0 FUNCTION TO RESET TO WORK BANK AND RETURN
FB/E7: 38FF     FS0DONE:LOADI	C,WORK_B
FB/E8: A880     	STORE	[DBANK],C
FB/E9: FF18     	JUMP	IRET
FB/EB:          
FB/EA:          	; BANK IS DONE, MOVE ON TO THE NEXT
FB/EA:          BI	= BI-1
FB/EA:          .BANK BI
FA/80:          FS1_B	= BI
FA/80:          .TEXT
FA/80:          
FA/80:          	; START THE FILE SEARCH ON A BLOCK
FA/80:          	; RESET INTER-BLOCK SEARCH STATE
FA/80:          	; AND READ THE BLOCK
FA/80:          	; THEN EXECUTE FSCHECK
FA/80:          	; ASSUMES WORK BANK IS SELECTED
FA/80:          	; USES: A, B, C
FA/80: 3000     FSSTART:LOADI	A,0
FA/81: A014     	STORE	[SRCH_RP],A
FA/82: 30F2     	LOADI	A,KBUF_B
FA/83: A013     	STORE	[SRCH_BK],A
FA/85:          	
FA/84:          	; SET ADDRESS FOR READ
FA/84: 3400     	LOADI	B,0
FA/85: A406     	STORE	[BLK],B
FA/86: 8412     	LOAD	B,[SRCH_LO]
FA/87: A407     	STORE	[BLK+1],B
FA/89:          	
FA/88:          	; AND EXECUTE A READ INTO THE KBUF
FA/88: 7C02     	SUBI	D,2
FA/89: 38FA     	LOADI	C,FS1_B
FA/8A: BB01     	STOREF	[D+1],C
FA/8B: 3890     	LOADI	C,@+5
FA/8C: BB00     	STOREF	[D],C
FA/8D: 34FC     	LOADI	B,BLK0_B
FA/8E: 388D     	LOADI	C,BLKREAD
FA/8F: FF71     	JUMP	INDIR
FA/90: 5C02     	ADDI	D,2
FA/92:          
FA/91:          	; FILE SEARCH CHECK
FA/91:          	; USING THE CURRENT SEARCH STATE, THE RECORD WILL BE CHECKED
FA/91:          	; AGAINST THE CURRENT PATTERN
FA/91:          	; ASSUMES WORK BANK IS SELECTED
FA/91:          	; A RETURNS 0X00 IF FOUND, OTHERWISE FSNEXT IS CALLED
FA/91:          	; USES: A, B, C, M0, M1
FA/91: 380A     FSCHECK:LOADI	C,10
FA/92: A801     	STORE	[M1],C
FA/94:          
FA/93:          	; RECORD THE CURRENT RECORD ENDING
FA/93: 8014     	LOAD	A,[SRCH_RP]
FA/94: 8413     	LOAD	B,[SRCH_BK]
FA/95: A480     	STORE	[DBANK],B 
FA/96: 980F     	LOADF	C,[A+15]
FA/97: 34FF     	LOADI	B,WORK_B
FA/98: A480     	STORE	[DBANK],B
FA/99: A815     	STORE	[SRCH_LS],C
FA/9B:          	
FA/9A:          	; GET THE PATTERN TO MATCH AGAINST
FA/9A: 8802     	LOAD	C,[M2]
FA/9C:          	
FA/9B:          	; GET BYTE OF MATCH PATTERN
FA/9B: A800     0:	STORE	[M0],C
FA/9C: 9A00     	LOADF	C,[C]
FA/9D: 783F     	SUBI	C,'?'
FA/9E: F608     	BRZ	1F
FA/9F: 583F     	ADDI	C,'?'
FA/A1:          	
FA/A0:          	; SWITCH TO RECORD BANK
FA/A0: 8413     	LOAD	B,[SRCH_BK]
FA/A1: A480     	STORE	[DBANK],B
FA/A3:          	
FA/A2:          	; CHECK AGAINST THE RECORD POINTER
FA/A2: 9400     	LOADF	B,[A]
FA/A3: D600     	CMP	B,C
FA/A4: 34FF     	LOADI	B,WORK_B
FA/A5: A480     	STORE	[DBANK],B
FA/A6: F720     	BRNZ	FSNEXT
FA/A8:          	
FA/A7:          	; THAT ONE MATCHED, KEEP GOING
FA/A7: 5001     1:	ADDI	A,1
FA/A8: 8800     	LOAD	C,[M0]
FA/A9: 5801     	ADDI	C,1
FA/AA: 8401     	LOAD	B,[M1]
FA/AB: 7401     	SUBI	B,1
FA/AC: A401     	STORE	[M1],B
FA/AD: F7ED     	BRNZ	0B
FA/AF:          	
FA/AE:          	; WE HAVE A MATCH!
FA/AE:          	; COPY USER AREA INTO USER SPACE
FA/AE: AC00     	STORE	[M0],D
FA/AF: 8014     	LOAD	A,[SRCH_RP]
FA/B0: 8413     	LOAD	B,[SRCH_BK]
FA/B1: A480     	STORE	[DBANK],B 
FA/B2: 9801     	LOADF	C,[A+1]
FA/B3: 3400     	LOADI	B,0
FA/B4: A480     	STORE	[DBANK],B
FA/B5: A86A     	STORE	[0X6A],C
FA/B7:          	
FA/B6:          	; COPY FILE NAME AND SIZE
FA/B6: 3C0A     	LOADI	D,10
FA/B7: 34FF     	LOADI	B,WORK_B
FA/B8: A480     	STORE	[DBANK],B
FA/B9: 8413     2:	LOAD	B,[SRCH_BK]
FA/BA: A480     	STORE	[DBANK],B 
FA/BB: 980B     	LOADF	C,[A+11]
FA/BC: 3400     	LOADI	B,0
FA/BD: A480     	STORE	[DBANK],B
FA/BE: BB5F     	STOREF	[D+0X60-1],C
FA/BF: 7001     	SUBI	A,1
FA/C0: 7C01     	SUBI	D,1
FA/C1: 34FF     	LOADI	B,WORK_B
FA/C2: A480     	STORE	[DBANK],B
FA/C3: F7F5     	BRNZ	2B
FA/C4: 8C00     	LOAD	D,[M0]
FA/C6:          	
FA/C5:          	; COMPLETE OPERATION
FA/C5: 3000     	LOADI	A,0
FA/C6: FF2E     	JUMP	FS1DONE
FA/C8:          	
FA/C7:          	; INCREMENT TO THE NEXT RECORD
FA/C7:          	; CHECK TO SEE IF THERE IS ACTUALLY A NEXT RECORD
FA/C7: 30FF     FSNEXT:	LOADI	A,0XFF
FA/C8: 8415     	LOAD	B,[SRCH_LS]
FA/C9: 5400     	ADDI	B,0
FA/CA: F42A     	BRN	FS1DONE
FA/CB: F70A     	BRNZ	0F
FA/CD:          	
FA/CC:          	; INCREMENT TO NEXT RECORD ON BANK
FA/CC: 8014     	LOAD	A,[SRCH_RP]
FA/CD: 5010     	ADDI	A,16
FA/CE: A014     	STORE	[SRCH_RP],A
FA/CF: F5C1     	BRNN	FSCHECK
FA/D1:          	
FA/D0:          	; INCREMENT TO NEXT BANK
FA/D0: 3000     	LOADI	A,0
FA/D1: A014     	STORE	[SRCH_RP],A
FA/D2: 8013     	LOAD	A,[SRCH_BK]
FA/D3: 5001     	ADDI	A,1
FA/D4: A013     	STORE	[SRCH_BK],A
FA/D5: FFBB     	JUMP	FSCHECK
FA/D7:          	
FA/D6:          	; MOVE ON TO NEXT BLOCK
FA/D6: 8012     0:	LOAD	A,[SRCH_LO]
FA/D7: 5001     	ADDI	A,1
FA/D8: A012     	STORE	[SRCH_LO],A
FA/D9: FFA6     	JUMP	FSSTART
FA/DB:          	
FA/DA:          	; SHADOW OF FOPEN
FA/DA: 8414     FOPENA:	LOAD	B,[SRCH_RP]
FA/DC:          
FA/DB:          	; SAVE THE STACK SO WE CAN USE THE REGISTER FOR TRANSFERS
FA/DB: AC00     	STORE	[M0],D
FA/DD:          	
FA/DC:          	; LOAD OPEN FILE SIZE
FA/DC: 8013     	LOAD	A,[SRCH_BK]
FA/DD: A080     	STORE	[DBANK],A
FA/DE: 990A     	LOADF	C,[B+10]
FA/DF: 9D0B     	LOADF	D,[B+11]
FA/E0: 30FF     	LOADI	A,WORK_B
FA/E1: A080     	STORE	[DBANK],A
FA/E2: A819     	STORE	[OF_SIZE],C
FA/E3: AC1A     	STORE	[OF_SIZE+1],D
FA/E5:          	
FA/E4:          	; LOAD OPEN FILE BLOCK TABLE
FA/E4: 8013     	LOAD	A,[SRCH_BK]
FA/E5: A080     	STORE	[DBANK],A
FA/E6: 990D     	LOADF	C,[B+13]
FA/E7: 9D0E     	LOADF	D,[B+14]
FA/E8: 30FF     	LOADI	A,WORK_B
FA/E9: A080     	STORE	[DBANK],A
FA/EA: A817     	STORE	[OF_BTAB],C
FA/EB: AC18     	STORE	[OF_BTAB+1],D
FA/EC: A806     	STORE	[BLK],C
FA/ED: AC07     	STORE	[BLK+1],D
FA/EF:          	
FA/EE:          	; RESTORE STACK AND SET OPEN FLAG
FA/EE: 8C00     	LOAD	D,[M0]
FA/EF: 30FF     	LOADI	A,0XFF
FA/F0: A016     	STORE	[OF_OPEN],A
FA/F2:          	
FA/F1:          	; EXECUTE BLOCK READ
FA/F1: 30F6     	LOADI	A,FBT_B
FA/F2: 34FC     	LOADI	B,BLK0_B
FA/F3: 388D     	LOADI	C,BLKREAD
FA/F4: FF0C     	JUMP	INDIR
FA/F6:          
FA/F5:          
FA/F5:          	; INTERNAL FS1 FUNCTION TO RESET TO WORK BANK AND RETURN
FA/F5: 38FF     FS1DONE:LOADI	C,WORK_B
FA/F6: A880     	STORE	[DBANK],C
FA/F7: FF0A     	JUMP	IRET
FA/F9:          
FA/F8:          	; BANK IS DONE, MOVE ON TO THE NEXT
FA/F8:          BI	= BI-1
FA/F8:          .BANK BI
F9/80:          FS2_B	= BI
F9/80:          .TEXT
F9/80:          
F9/80:          	; SHADOW OF FREAD
F9/80:          	; ERROR IF NO FILE IS OPEN
F9/80: 8416     FREADA:	LOAD	B,[OF_OPEN]
F9/81: 5400     	ADDI	B,0
F9/82: F61E     	BRZ	FS2ERR
F9/84:          	
F9/83:          	; CHECK SIZE
F9/83: 8419     	LOAD	B,[OF_SIZE]
F9/84: 5400     	ADDI	B,0
F9/85: F703     	BRNZ	0F
F9/86: 841A     	LOAD	B,[OF_SIZE+1]
F9/87: D100     	CMP	A,B
F9/88: F018     	BRAE	FS2ERR
F9/8A:          	
F9/89:          	; CALL FACONV
F9/89: 388B     0:	LOADI	C,@+2
F9/8A: FF0D     	JUMP	FACONV
F9/8C:          	
F9/8B:          	; GET THE BLOCK
F9/8B: AC00     	STORE	[M0],D
F9/8C: A480     	STORE	[DBANK],B
F9/8D: 9800     	LOADF	C,[A+0]
F9/8E: 9C01     	LOADF	D,[A+1]
F9/8F: 34FF     	LOADI	B,WORK_B
F9/90: A480     	STORE	[DBANK],B
F9/91: A806     	STORE	[BLK],C
F9/92: AC07     	STORE	[BLK+1],D	
F9/93: 8C00     	LOAD	D,[M0]
F9/95:          	
F9/94:          	; EXECUTE BLOCK READ
F9/94: 8005     	LOAD	A,[SRC_BNK]
F9/95: 34FC     	LOADI	B,BLK0_B
F9/96: 388D     	LOADI	C,BLKREAD
F9/97: FF69     	JUMP	INDIR
F9/99:          
F9/98:          
F9/98:          	; CONVERT TO BANK / ADDRESS FOR BLOCK TABLE LOOP
F9/98: 34F6     FACONV:	LOADI	B,FBT_B
F9/99: 4000     	SHIFTL	A
F9/9A: F101     	BRNC	0F
F9/9B: 5402     	ADDI	B,2
F9/9C: 4000     0:	SHIFTL	A
F9/9D: F101     	BRNC	1F
F9/9E: 5401     	ADDI	B,1
F9/9F: C100     1:	SHIFTR	A
F9/A0: FE5F     	JUMPR	C
F9/A2:          	
F9/A1:          	
F9/A1:          	; READ / WRITE ERROR
F9/A1: 30FF     FS2ERR:	LOADI	A,0XFF
F9/A3:          	
F9/A2:          	; INTERNAL FS2 FUNCTION TO RESET TO WORK BANK AND RETURN
F9/A2: 38FF     FS2DONE:LOADI	C,WORK_B
F9/A3: A880     	STORE	[DBANK],C
F9/A4: FF5D     	JUMP	IRET
F9/A6:          
F9/A5:          
F9/A5:          	; BANK IS DONE, MOVE ON TO THE NEXT
F9/A5:          BI	= BI-1; SYSCALL.S
F9/A5:          ; USER SYSTEM CALL HANDLER
F9/A5:          
F9/A5:          .BANK BI
F8/80:          SYS0_B	= BI
F8/80:          .TEXT
F8/80:          
F8/80:          	; SYSTEM CALL HANDLER
F8/80:          	; A = SYSTEM CALL ARGUMENT
F8/80:          	; [M0] = SYSTEM CALL #
F8/80: 8400     SYSHNDL:LOAD	B,[M0]
F8/82:          	
F8/81:          	; 0: S_EXIT
F8/81: 5400     	ADDI	B,0
F8/82: F707     	BRNZ	9F
F8/84:          	
F8/83:          	; CLOSE FILE AND JUMP TO PROMPT
F8/83: 38FF     	LOADI	C,CORE0_B
F8/84: BB01     	STOREF	[D+1],C
F8/85: 3897     	LOADI	C,PROMPT
F8/86: BB00     	STOREF	[D],C
F8/88:          	
F8/87: 34FB     	LOADI	B,FS0_B
F8/88: 38E1     	LOADI	C,FCLOSE
F8/89: FF77     	JUMP	INDIR
F8/8B:          	
F8/8A:          	; 1: S_PUTC
F8/8A: 7401     9:	SUBI	B,1
F8/8B: F703     	BRNZ	9F
F8/8D:          
F8/8C: 34FD     	LOADI	B,TTY0_B
F8/8D: 3881     	LOADI	C,TTYPUTC
F8/8E: FF72     	JUMP	INDIR
F8/90:          	
F8/8F:          	; 2: S_GETC
F8/8F: 7401     9:	SUBI	B,1
F8/90: F703     	BRNZ	9F
F8/92:          
F8/91: 34FD     	LOADI	B,TTY0_B
F8/92: 3895     	LOADI	C,TTYGETC
F8/93: FF6D     	JUMP	INDIR
F8/95:          	
F8/94:          	; 3: S_STAT
F8/94: 7401     9:	SUBI	B,1
F8/95: F703     	BRNZ	9F
F8/97:          
F8/96: 34FD     	LOADI	B,TTY0_B
F8/97: 38CD     	LOADI	C,TTYSTAT
F8/98: FF68     	JUMP	INDIR
F8/9A:          
F8/99:          	; 4: S_PUTS
F8/99: 7401     9:	SUBI	B,1
F8/9A: F703     	BRNZ	9F
F8/9C:          
F8/9B: 34FD     	LOADI	B,TTY0_B
F8/9C: 3888     	LOADI	C,TTYPUTS
F8/9D: FF63     	JUMP	INDIR
F8/9F:          	
F8/9E:          	; 5: S_INPUT
F8/9E: 7401     9:	SUBI	B,1
F8/9F: F703     	BRNZ	9F
F8/A1:          
F8/A0: 34FD     	LOADI	B,TTY0_B
F8/A1: 389A     	LOADI	C,TTYINPT
F8/A2: FF5E     	JUMP	INDIR
F8/A4:          	
F8/A3:          	; 6: S_OPEN
F8/A3: 7401     9:	SUBI	B,1
F8/A4: F71D     	BRNZ	9F
F8/A6:          
F8/A5:          	; ALLOCATE SPACE ON THE STACK
F8/A5:          	; AND STORE SEARCH ARGUMENT
F8/A5: 7C03     	SUBI	D,3
F8/A6: B302     	STOREF	[D+2],A
F8/A8:          
F8/A7:          	; START BY CLOSING THE FILE
F8/A7: 38F8     	LOADI	C,BI
F8/A8: BB01     	STOREF	[D+1],C
F8/A9: 38AE     	LOADI	C,@+5
F8/AA: BB00     	STOREF	[D],C
F8/AC:          	
F8/AB: 34FB     	LOADI	B,FS0_B
F8/AC: 38E1     	LOADI	C,FCLOSE
F8/AD: FF53     	JUMP	INDIR	
F8/AF:          
F8/AE:          	; ATTEMPT TO SET PARAMETERS FOR SEARCH
F8/AE: 9302     	LOADF	A,[D+2]
F8/AF: 38B4     	LOADI	C,@+5
F8/B0: BB00     	STOREF	[D],C
F8/B2:          	
F8/B1: 34FB     	LOADI	B,FS0_B
F8/B2: 3880     	LOADI	C,SSPARAM
F8/B3: FF4D     	JUMP	INDIR
F8/B5:          	
F8/B4:          	; CHECK TO MAKE SURE IT RETURNS 0X00
F8/B4: 5000     	ADDI	A,0
F8/B5: F723     	BRNZ	SYSERR0
F8/B7:          	
F8/B6:          	; AND SEARCH FOR IT
F8/B6: 3000     	LOADI	A,0
F8/B7: 38BC     	LOADI	C,@+5
F8/B8: BB00     	STOREF	[D],C
F8/BA:          	
F8/B9: 34FB     	LOADI	B,FS0_B
F8/BA: 38D4     	LOADI	C,FSEARCH
F8/BB: FF45     	JUMP	INDIR
F8/BD:          	
F8/BC:          	; DID IT WORK?
F8/BC: 5000     	ADDI	A,0
F8/BD: F71B     	BRNZ	SYSERR0
F8/BF:          	
F8/BE:          	; NOW OPEN IT
F8/BE: 5C03     	ADDI	D,3
F8/C0:          	
F8/BF: 34FB     	LOADI	B,FS0_B
F8/C0: 38DE     	LOADI	C,FOPEN
F8/C1: FF3F     	JUMP	INDIR
F8/C3:          	
F8/C2:          	; 7: S_CLOSE
F8/C2: 7401     9:	SUBI	B,1
F8/C3: F703     	BRNZ	9F
F8/C5:          
F8/C4: 34FB     	LOADI	B,FS0_B
F8/C5: 38E1     	LOADI	C,FCLOSE
F8/C6: FF3A     	JUMP	INDIR
F8/C8:          	
F8/C7:          	; 8: S_READ
F8/C7: 7401     9:	SUBI	B,1
F8/C8: F706     	BRNZ	9F
F8/CA:          	
F8/C9:          	; CHECK TO MAKE SURE A FILE IS OPEN
F8/C9: 8416     	LOAD	B,[OF_OPEN]
F8/CA: 5400     	ADDI	B,0
F8/CB: F60D     	BRZ	SYSERR0
F8/CD:          
F8/CC: 34FB     	LOADI	B,FS0_B
F8/CD: 38E4     	LOADI	C,FREAD
F8/CE: FF32     	JUMP	INDIR
F8/D0:          	
F8/CF:          	; 9: S_WRITE
F8/CF: 7401     9:	SUBI	B,1
F8/D0: A400     	STORE	[M0],B
F8/D1: 34F7     	LOADI	B,SYS1_B
F8/D2: 3880     	LOADI	C,9F
F8/D3: F72D     	BRNZ	INDIR
F8/D5:          	
F8/D4:          	; CHECK TO MAKE SURE A FILE IS OPEN
F8/D4: 8416     	LOAD	B,[OF_OPEN]
F8/D5: 5400     	ADDI	B,0
F8/D6: F602     	BRZ	SYSERR0
F8/D8:          
F8/D7: 34FB     	LOADI	B,FS0_B
F8/D9:          	;LOADI	C,FWRITE
F8/D8: FF28     	JUMP	INDIR
F8/DA:          	
F8/D9:          	; SYSCALL ERROR
F8/D9: 5C03     SYSERR0:ADDI	D,3
F8/DA: 30FF     	LOADI	A,0XFF
F8/DB: FF26     	JUMP	IRET
F8/DD:          	
F8/DC:          	; BANK IS DONE, MOVE ON TO THE NEXT
F8/DC:          BI	= BI-1
F8/DC:          .BANK BI
F7/80:          SYS1_B	= BI
F7/80:          .TEXT
F7/80:          
F7/80:          	; 10: S_FSRCH
F7/80: 8400     9:	LOAD	B,[M0]
F7/81: 7401     	SUBI	B,1
F7/82: F714     	BRNZ	9F
F7/84:          	
F7/83:          	; ALLOCATE SPACE ON THE STACK
F7/83:          	; AND STORE SEARCH ARGUMENT
F7/83: 7C03     	SUBI	D,3
F7/84: B302     	STOREF	[D+2],A
F7/86:          	
F7/85:          	; CHECK TO MAKE SURE THE FILE IS CLOSED
F7/85: 8416     	LOAD	B,[OF_OPEN]
F7/86: 5400     	ADDI	B,0
F7/87: F71A     	BRNZ	SYSERR1
F7/89:          
F7/88:          	; ATTEMPT TO SET PARAMETERS FOR SEARCH
F7/88: 38F7     	LOADI	C,BI
F7/89: BB01     	STOREF	[D+1],C
F7/8A: 9302     	LOADF	A,[D+2]
F7/8B: 3890     	LOADI	C,@+5
F7/8C: BB00     	STOREF	[D],C
F7/8E:          	
F7/8D: 34FB     	LOADI	B,FS0_B
F7/8E: 3880     	LOADI	C,SSPARAM
F7/8F: FF71     	JUMP	INDIR
F7/91:          	
F7/90:          	; CHECK TO MAKE SURE IT RETURNS 0X00
F7/90: 5000     	ADDI	A,0
F7/91: F710     	BRNZ	SYSERR1
F7/93:          	
F7/92:          	; AND SEARCH FOR IT
F7/92: 3000     	LOADI	A,0
F7/93: 5C03     	ADDI	D,3
F7/95:          	
F7/94: 34FB     	LOADI	B,FS0_B
F7/95: 38D4     	LOADI	C,FSEARCH
F7/96: FF6A     	JUMP	INDIR
F7/98:          	
F7/97:          	; 11: S_NEXT
F7/97: 7401     9:	SUBI	B,1
F7/98: F708     	BRNZ	9F
F7/9A:          	
F7/99:          	; CHECK TO MAKE SURE THE FILE IS CLOSED
F7/99: 8416     	LOAD	B,[OF_OPEN]
F7/9A: 5400     	ADDI	B,0
F7/9B: 30FF     	LOADI	A,0XFF
F7/9C: F765     	BRNZ	IRET
F7/9E:          
F7/9D: 3001     	LOADI	A,1
F7/9E: 34FB     	LOADI	B,FS0_B
F7/9F: 38D4     	LOADI	C,FSEARCH
F7/A0: FF60     	JUMP	INDIR
F7/A2:          	
F7/A1:          	; UNKNOWN SYSCALL
F7/A1: FF60     9:	JUMP	IRET
F7/A3:          
F7/A2:          	; SYSCALL ERROR
F7/A2: 5C03     SYSERR1:ADDI	D,3
F7/A3: 30FF     	LOADI	A,0XFF
F7/A4: FF5D     	JUMP	IRET
F7/A6:          
F7/A5:          	; BANK IS DONE, MOVE ON TO THE NEXT
F7/A5:          BI	= BI-1
F7/A5:          ; END.S
F7/A5:          ; DEFINES SYMBOLS BASED ON ASSEMBLY STATE
F7/A5:          
F7/A5:          MAX_IB	= IB
