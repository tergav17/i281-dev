; CORE.S
; MAIN 'GUTS' OF DOS/281

.BANK BI
CORE0_B	= BI
.TEXT

	; SET UP SYSTEM FOR OPERATION
	; BRING UP THE WORK BANK
INIT:	LOADI	A,WORK_B
	STORE	[DBANK],A
	
	; SET THE STACK POINTER TO THE TOP OF THE STACK
	LOADI	D,0X80-2

	; INITALIZE THE TTY DRIVER
	LOADI	C,CORE0_B
	STOREF	[D+1],C
	LOADI	C,@+5
	STOREF	[D],C
	
	LOADI	B,TTY0_B
	LOADI	C,TTYINIT
	JUMP	INDIR
	
	; SEND OUT THE 'HELLO' SPLASH
	LOADI	C,WORK_B
	STORE	[SRC_BNK],C
	LOADI	A,S_HELLO
	
	LOADI	C,@+5
	STOREF	[D],C
	
	LOADI	B,TTY0_B
	LOADI	C,TTYPUTS
	JUMP	INDIR
	
	; INITALIZE THE BLOCK DRIVER
	LOADI	C,@+5
	STOREF	[D],C
	
	LOADI	B,BLK0_B
	LOADI	C,BLKINIT
	JUMP	INDIR
	
	; DOT PROMPT
PROMPT: LOADI	C,WORK_B
	STORE	[SRC_BNK],C
	LOADI	A,S_PRMT

	LOADI	C,CORE0_B
	STOREF	[D+1],C
	LOADI	C,@+5
	STOREF	[D],C
	
	LOADI	B,TTY0_B
	LOADI	C,TTYPUTS
	JUMP	INDIR
	
	; GET AN INPUT FROM THE TERMINAL
	LOADI	C,CMDL_B
	STORE	[SRC_BNK],C
	
	LOADI	C,@+5
	STOREF	[D],C
	
	LOADI	B,TTY0_B
	LOADI	C,TTYINPT
	JUMP	INDIR
	
	; ATTEMPT TO SET PARAMETERS FOR SEARCH
	LOADI	A,0
	LOADI	C,@+5
	STOREF	[D],C
	
	LOADI	B,FS0_B
	LOADI	C,SSPARAM
	JUMP	INDIR
	
	; AND SEARCH FOR IT
	LOADI	A,0
	LOADI	C,@+5
	STOREF	[D],C
	
	LOADI	B,FS0_B
	LOADI	C,FSEARCH
	JUMP	INDIR
	
	; AND BREAK
BP:	JUMP	BP
	
	JUMP	PROMPT

	; BANK IS DONE, MOVE ON TO THE NEXT
BI	= BI-1

	; ALLOCATE A BANK FOR THE KERNEL WORK AREA
	; 0X60-7F = KERNEL STACK SPACE
.BANK	BD
WORK_B	= BD
.DATA

	; MISC VALUES
	; USED AS TEMP REGISTERS FOR ALL SORTS OF STUFF
.DEFL BYTE M0		0
.DEFL BYTE M1		0
.DEFL BYTE M2		0

	; DEVICE SPECIFIC MISC VALUES
	; SAFE TO USE IN DEVICE DRIVERS
.DEFL BYTE D0		0

	; SOURCE BANK OF WHATEVER OPERATION IS BEING DONE
	; MAINLY USED TO KEEP TRACK OF THE BANK ADDRESS
	; OF STUFF BEING WORKED ON IN USER SPACE
.DEFL BYTE SRC_BNK	0

	; ADDRESSES FOR THE BLOCK DEVICE DRIVER
	; USED DURING A 'READ' OR 'WRITE' CALL
.DEFL BYTE BLK		0,0

	; PATTERN FOR SEARCHING FOR FILES
	; AND WORKING USER AREA
.DEFL BYTE MATCH	0XFF	; THIS IS ALWAYS 0XFF
.DEFL BYTE WRK_USR	'0'
.DEFL BYTE PATTERN	"????????"

	; STATE INFORMATION FOR SEARCHING 
.DEFL BYTE SRCH_LO	0	; LOW BLOCK
.DEFL BYTE SRCH_BK	0	; CURRENT BANK
.DEFL BYTE SRCH_RP	0	; RECORD POINTER
.DEFL BYTE SRCH_LS	0	; LAST ENDING

	; STATE INFORMATION FOR OPEN FILES
.DEFL BYTE OF_OPEN	0	; OF_OPEN = 1 IF THERE IS A FILE OPEN
.DEFL BYTE OF_BTAB	0,0	; BLOCK TABLE ADDRESS
.DEFL BYTE OF_SIZE	0,0	; OPEN FILE SIZE

	; COMMAND LINE PROMPT
.DEFL BYTE S_PRMT	0X0A,0X0D,'.',0

	; PLACE 'HELLO' AT BOTTOM  OF STACK
	; WE DON'T CARE IF IT GETS OVERWRITTEN LATER
.ORG 0X60
.DEFL BYTE S_HELLO	"DOS/281 V1.0",0X0A,0X0D,0


	; BANK IS DONE, MOVE ON TO THE NEXT
BD	= BD-1

	; COMMAND LINE BANK
CMDL_B	= BD

	; BANK IS DONE, MOVE ON TO THE NEXT
BD	= BD-4
	
	; BLOCK ALLOCATION BITMAP
ABM_B	= BD

	; BANK IS DONE, MOVE ON TO THE NEXT
BD	= BD-4

	; FILE BLOCK TABLE
FBT_B	= BD

	; BANK IS DONE, MOVE ON TO THE NEXT
BD	= BD-4

	; KERNEL BUFFER
KBUF_B	= BD

	; BANK IS DONE, MOVE ON TO THE NEXT
BD	= BD-1


