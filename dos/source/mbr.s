; MBR.S
; MASTER BOOT RECORD (2ND STAGE BOOTLOADER)

; DEFINES
BLKTAB	= 2		; START PAGE OF THE BLOCK TABLE
ISRBLK	= 6		; START PAGE OF STORED INSTRUCTIONS

.TEXT

	; LOAD ADDRESS OF FILE RECORDS
	LOADI	A,17
	
	; BEGIN FILE SEARCH
	; EXECUTE READ OPERATION
0:	LOADI	B,0
	LOADI	C,@+2
	JUMP	CFREAD
	
	; MATCH THE FIRST 10 WORDS
1:	LOADI	C,FNAME
	LOADI	D,0
	
	; MATCH CHARACTER
2:	LOAD	A,[CF_DATA]
	LOADF	B,[C]
	CMP	A,B
	BRZ	3F
	
	; DOESN'T MATCH, SET A FLAG
	LOADI	D,1
	
	; NEXT CHARACTER
3:	SUBI	C,FNAME+9
	BRZ	4F
	ADDI	C,FNAME+10
	JUMP	2B

	; MATCH COMPLETE
	; DID WE WIN?
4:	ADDI	D,0
	BRZ	9F
	
	; NO WE DID NOT, NEXT ENTRY
	LOADI	B,6
5:	LOAD	A,[CF_DATA]
	SUBI	B,1
	BRNZ	5B
	
	; CHECK NEXT ENTRY STATUS
	ADDI	A,0
	
	; IT'S 0X00: DO THE NEXT ENTRY IN THE BLOCK
	BRZ	1B
	
	; IT'S 0XFF: WE ARE OUT OF ENTRIES
	BRN	HALT
	
	; IT'S 0X01, THE RECORD IS ON THE NEXT BLOCK
	LOAD	A,[CF_LBA0]
	ADDI	A,1
	JUMP	0B

	; WE HAVE FOUND THE FILE, EXTRACT RELEVANT DATA
	; START WITH READING THE FILE SIZE
9:	LOAD	A,[CF_DATA]
	ADDI	A,0
	BRZ	0F
	
	; FILE IS FULL
	LOAD	B,[CF_DATA]
	JUMP	1F
	
	; READ LSB OF SIZE
0:	LOAD	A,[CF_DATA]
	
	; CHECK IF FILE IS EMPTY
	ADDI	A,0
	BRZ	HALT
	
	; SAVE SIZE
1:	STORE	[SIZE],A

	; GET THE BLOCK TABLE ADDRESS
	LOAD	A,[CF_DATA]	; THIS ONE DOES THE UNUSED BYTE
	LOAD	B,[CF_DATA]
	LOAD	A,[CF_DATA]
	
	; READ OUT THE REST OF THE BLOCK
	; 0X01 INDICATES THE END OF THE BLOCK
2:	LOAD	C,[CF_DATA]
	ADDI	C,0
	BRNZ	4F
	
	; READ 15 BYTES AND DISCARD
	LOADI	D,15
3:	LOAD	C,[CF_DATA]
	SUBI	D,1
	BRNZ	3B
	JUMP	2B
	
	; WE ARE FINALLY DONE, LETS OPEN UP THE BLOCK TABLE
4:	LOADI	C,@+2
	JUMP	CFREAD
	
	; LETS STORE THIS IN DATA BANKS BLKTAB - BLKTAB+3
	LOADI	C,BLKTAB
	LOADI	D,4
	
	; COPY TIME :)
0:	STORE	[DBANK],C
	LOADI	B,0
1:	LOAD	A,[CF_DATA]
	STOREF	[B],A
	ADDI	B,1
	BRNN	1B
	ADDI	C,1
	SUBI	D,1
	BRNZ	0B
	
	; SET CURRENT BANK AND RECORD
	LOADI	B,BLKTAB
	LOADI	C,0
	LOADI	A,1
	STORE	[DBANK],A
	
	; MAIN LOOP TO LOAD THE .SAV FILE
0:	STORE	[CBANK],B
	STORE	[CRECORD],C
	STORE	[DBANK],B

	; GET RECORD TO LOAD
	LOADF	A,[C+1]
	LOADF	B,[C]
	
	; AND READ THE BLOCK
	LOADI	C,@+2
	JUMP	CFREAD
	
	; GET THE DESTINATION BANK
	LOAD	A,[CF_DATA]
	LOAD	A,[CF_DATA]
	LOAD	A,[CF_DATA]
	STORE	[DBANK],A
	
	; SKIP 125 BYTES
	LOADI	B,125
1:	LOAD	D,[CF_DATA]
	SUBI	B,1
	BRNZ	1B
	
	; LOAD 128 BYTES INTO THE DATA BANK
2:	LOAD	D,[CF_DATA]
	STOREF	[B],D
	ADDI	B,1
	BRNN	2B
	
	; LOAD FIRST 128 BYTES OF INSTRUCTIONS
	LOADI	C,ISRBLK
	STORE	[DBANK],C
3:	LOAD	D,[CF_DATA]
	STOREF	[B+0X80],D
	ADDI	B,1
	BRN	3B
	
	; LOAD SECOND 128 BYTES OF INSTRUCTIONS
	LOADI	C,ISRBLK+1
	STORE	[DBANK],C
4:	LOAD	D,[CF_DATA]
	STOREF	[B],D
	ADDI	B,1
	BRNN	4B
	
	; CALL THE 'PRGM' BIOS CALL
	; A = DESTINATION ISR PAGE
	; B = SOURCE DATA PAGE
	; C = RETURN ADDRESS
	; D = RETURN ISR PAGE
	LOADI	B,ISRBLK
	LOADI	D,1
	LOADI	C,@+2
	JUMP	PRGM
	
	; MOVE ON TO NEXT BLOCK OR RECORD
	; CHECK IF WE ARE DONE
	LOADI	A,1
	STORE	[DBANK],A
	LOAD	A,[SIZE]
	SUBI	A,1
	LOADI	B,0
	LOADI	C,0X81
	BRZ	INDIR
	STORE	[SIZE],A
	
	; UPDATE POINTERS AND RETURN
	LOAD	B,[CBANK]
	LOAD	C,[CRECORD]
	ADDI	C,2
	BRNN	0B
	LOADI	C,0
	ADDI	B,1
	JUMP	0B
	

	; READS FROM THE CF CARD
	; A READ COMMAND IS EXECUTED AND
	; A WAIT IS PERFORMED UNTIL THE
	; COMMAND COMPLETES
	; A = LSB BLOCK ADDRESS
	; B = MSB BLOCK ADDRESS
	; USES: A, C, D
CFREAD:	STORE	[CF_LBA0],A
	STORE	[CF_LBA1],B
	LOADI	A,1
	STORE	[CF_CNT],A


	; EXECUTE THE READ COMMAND NOW
	LOADI	A,CF_READ
	STORE	[CF_CMD],A


	; WAIT FOR THE CF CARD TO BECOME READY
	; FOR THIS TO HAPPEN, THE BUSY FLAG MUST BE 0
	; AND THE READY FLAG MUST BE 1
	; IF A CF CARD ISN'T PRESENT, THIS ROUTINE HANGS
	; BUT WE DON'T CARE
	; USES: B
CFWAIT:	LOAD	A,[CF_STAT]

	; CHECK BIT 7 (BUSY FLAG)
	SHIFTL	A
	
	; GO BACK TO START BUSY
	BRC	CFWAIT
	
	; CHECK BIT 6 (READY FLAG)
	SHIFTL	A
	
	; GO BACK TO START IF NOT READY
	BRNC	CFWAIT
	
	; RETURN FROM FUNCTION CALL
	JUMPR	C



.DATA

.DEFL BYTE FNAME	0XFF,'0',"KERNEL","SY"
.DEFL BYTE SIZE		0
.DEFL BYTE CBANK	0
.DEFL BYTE CRECORD	0