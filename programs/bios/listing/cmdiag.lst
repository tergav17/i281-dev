00/00:          ; CMDIAG.S
01/00:          ; CODE MEMORY DIAGNOSTIC
01/00:          ; GAVIN TERSTEEG, 2024
01/00:          ; SDMAY24-14
01/00:          
01/00:          ; THIS TEST WILL PARTIALLY EXERCISE CODE MEMORY 
01/00:          ; FOR ALL CMEM LOCATIONS, A SHORT STUB PROGRAM WILL
01/00:          ; BE GENERATED, AND THEN CALLED. THE PROGRAM IS AS
01/00:          ; FOLLOWS:
01/00:          ;
01/00:          ;	LOADI	A,?
01/00:          ;	JUMP	PASS
01/00:          ;
01/00:          ; FOR ALL PERMUTATIONS '?'
01/00:          ;
01/00:          ; SHOULD THE PROGRAM COUNTER OVERFLOW OR REGISTER FAIL
01/00:          ; TO RETURN THE EXPECTED VALUE, AND ERROR WILL BE RECORDED 
01/00:          ;
01/00:          ; SENSE SWITCH FUNCTIONS:
01/00:          ;
01/00:          ; SW0: 0 = RESET AND WAIT ON FAIL, 1 = PRESERVE CONTEXT ON FAIL
01/00:          ; SW1: 0 = HALT ON FAIL, 1 = CONTINUE EXECUTION
01/00:          ; SW2: 0 = INCREMENT CONTEXT AFTER TEST, 1 = RETRY TEST
01/00:          
01/00:          .BANK 0
00/00:          .TEXT
00/00:          
00/00:          	; JUMP TABLE 
00/00: FF01     	JUMP	FAIL
00/01: FF13     	JUMP	PASS
00/03:          
00/02:          	; EITHER THE TEST HAS JUST STARTED OR A PASS HAS FAILED
00/02:          	; SEND OFF AN ACCESS TO DEVICE 0XF0
00/02:          	; THIS CAN BE CAUGHT BY AN SCOPE
00/02: 8CF0     FAIL:	LOAD	D,[0XF0]
00/04:          
00/03:          	; GET THE SENSE SWITCHE 
00/03: 1208     0:	INPUTD	[TEMP]
00/04: 8808     	LOAD	C,[TEMP]
00/06:          
00/05:          	; CHECK FOR INIT
00/05: C900     	SHIFTR	C
00/06: F105     	BRNC	INIT
00/08:          	
00/07:          	; CHECK FOR HALT
00/07: C900     	SHIFTR	C
00/08: F1FA     	BRNC	0B
00/0A:          	
00/09:          	; DO WE INCREMENT COUNTER OR TRY AGAIN?
00/09: C900     	SHIFTR	C
00/0A: F02A     	BRC	ATTEMPT
00/0B: FF12     	JUMP	NEXT
00/0D:          	
00/0C:          	; INITALIZE TEST
00/0C: 3000     INIT:	LOADI	A,0
00/0D: A003     	STORE	[TESTVAL],A
00/0E: A007     	STORE	[CBANK],A
00/0F: A001     	STORE	[DELTA],A
00/11:          	
00/10:          	; WAIT FOR TEST TO START
00/10: 1208     0:	INPUTD	[TEMP]
00/11: 8808     	LOAD	C,[TEMP]
00/12: C900     	SHIFTR	C
00/13: F1FC     	BRNC	0B
00/15:          	
00/14: FF15     	JUMP	NEWBANK
00/16:          	
00/15:          	; FIRST, CHECK AND MAKE SURE THAT 'A' MATCHES THE
00/15:          	; EXPECTED TEST VALUE
00/15: 8403     PASS:	LOAD	B,[TESTVAL]
00/16: D100     	CMP	A,B
00/17: F7EA     	BRNZ	FAIL
00/19:          	
00/18:          	; GET THE SWITCH VALUE
00/18: 1208     	INPUTD	[TEMP]
00/19: 8808     	LOAD	C,[TEMP]
00/1A: C900     	SHIFTR	C
00/1B: C900     	SHIFTR	C
00/1C: C900     	SHIFTR	C
00/1D: F017     	BRC	ATTEMPT
00/1F:          	
00/1E:          	; INCREMENT CONTEXT
00/1E: 8003     NEXT:	LOAD	A,[TESTVAL]
00/1F: 5001     	ADDI	A,1
00/20: A003     	STORE	[TESTVAL],A
00/21: F113     	BRNC	ATTEMPT
00/22: 8005     	LOAD	A,[ADDRESS]
00/23: 5001     	ADDI	A,1
00/24: A005     	STORE	[ADDRESS],A
00/25: 70FF     	SUBI	A,0XFF
00/26: F70E     	BRNZ	ATTEMPT
00/28:          	
00/27:          	; NEXT BANK
00/27: 8007     	LOAD	A,[CBANK]
00/28: 5001     	ADDI	A,1
00/29: A007     	STORE	[CBANK],A
00/2B:          	
00/2A:          	; FILL BANK WITH NOOP INSTRUCTIONS
00/2A: 3880     NEWBANK:LOADI	C,0X80
00/2B: 8407     	LOAD	B,[CBANK]
00/2C: 0400     	BANK	B
00/2D: 3020     0:	LOADI	A,0X20
00/2E: 1400     	CACHE	A
00/2F: 3000     	LOADI	A,0
00/30: 1A00     	WRITE	[C],A
00/31: 5801     	ADDI	C,1
00/32: F4FA     	BRN	0B
00/34:          	
00/33:          	; RESET ADDRESS
00/33: 3080     	LOADI	A,0X80
00/34: A005     	STORE	[ADDRESS],A
00/36:          
00/35:          	; DO ATTEMPT
00/35:          	; INCREMENT DELTA
00/35: 8801     ATTEMPT:LOAD	C,[DELTA]
00/36: 5801     	ADDI	C,1
00/37: A801     	STORE	[DELTA],C
00/39:          
00/38:          	; SET DISPLAY VALUES
00/38: 3807     	LOADI	C,CBANK
00/39: 9200     0:	LOADF	A,[C]
00/3A: C100     	SHIFTR	A
00/3B: C100     	SHIFTR	A
00/3C: C100     	SHIFTR	A
00/3D: C100     	SHIFTR	A
00/3E: B2FF     	STOREF	[C+0-1],A
00/3F: 7802     	SUBI	C,2
00/40: F5F8     	BRNN	0B
00/42:          	
00/41:          	; SET BANK
00/41: 8407     	LOAD	B,[CBANK]
00/42: 0400     	BANK	B
00/44:          	
00/43:          	; SET REGISTER VALUE
00/43: 3030     	LOADI	A,0X30
00/44: 1400     	CACHE	A
00/45: 8003     	LOAD	A,[TESTVAL]
00/46: 8805     	LOAD	C,[ADDRESS]
00/47: 1A00     	WRITE	[C],A
00/49:          	
00/48:          	; SET JUMP INSTRUCTION
00/48: 30FF     	LOADI	A,0XFF
00/49: 1400     	CACHE	A
00/4A: 6200     	SUB	A,C
00/4B: 1A01     	WRITE	[C+1],A
00/4D:          	
00/4C:          	; OFFSET BANK
00/4C: 0401     	BANK	B+1
00/4E:          	
00/4D:          	; DO A FEW NOOPS
00/4D: 2000     	NOOP
00/4E: 2000     	NOOP
00/4F: 8003     	LOAD	A,[TESTVAL]
00/50: 5001     	ADDI	A,1
00/52:          	
00/51:          	; SEND OFF AN ACCESS TO DEVICE 0XE0
00/51:          	; THIS CAN BE CAUGHT BY AN SCOPE
00/51: 8CE0     	LOAD	D,[0XE0]
00/53:          	
00/52:          	; EXECUTE JUMP
00/52: 0400     	BANK	B
00/53: FEAC     	JUMPR	C
00/55:          
00/54:          
00/54:          	; MEMORY AREAS
00/54:          .BSS
00/54:          
00/00:          	; STATE DATA
00/00: 00       .DEF BYTE		0
00/01: 00       .DEFL BYTE DELTA	0
00/02: 00       .DEF BYTE		0
00/03: 00       .DEFL BYTE TESTVAL	0
00/04: 00       .DEF BYTE		0
00/05: 00       .DEFL BYTE ADDRESS	0
00/06: 00       .DEF BYTE		0
00/07: 00       .DEFL BYTE CBANK	0
00/08:          
00/08:          	; TEMP VALUE
00/08: 00       .DEFL BYTE TEMP 	0
