00/00:          ; BIOS.S
01/00:          ; STANDARD BIOS FOR COMPACT FLASH BOOT
01/00:          ; PLUS STANDARD CALLS
01/00:          
01/00:          ; DEFINES
01/00:          DBANK	= 0X80		; DATA BANK ADDRESS 
01/00:          CF	= 0XA0		; COMPACT FLASH BASE ADDRESS
01/00:          CF_DATA	= CF+0X00	; CF DATA
01/00:          CF_ERR	= CF+0X01	; CF ERROR
01/00:          CF_FEAT	= CF+0x01	; CF FEATURES
01/00:          CF_CNT	= CF+0X02	; CF SECTOR COUNT
01/00:          CF_LBA0	= CF+0X03	; CF LBA BITS 0-7
01/00:          CF_LBA1	= CF+0X04	; CF LBA BITS 8-15
01/00:          CF_LBA2	= CF+0X05	; CF LBA BITS 16-23
01/00:          CF_LBA3	= CF+0X06	; CF LBA BITS 24-27
01/00:          CF_STAT	= CF+0X07	; CF STATUS
01/00:          CF_CMD	= CF+0X07	; CF COMMAND
01/00:          
01/00:          CF_8BIT	= 0X01		; 8 BIT MODE
01/00:          CF_DCAC	= 0X82		; DISABLE CACHE
01/00:          
01/00:          CF_READ	= 0X20		; READ COMMAND
01/00:          CF_SETF	= 0X20		; SET FEATURE COMMAND
01/00:          
01/00:          .BANK 0
00/00:          .TEXT
00/00:          
00/00:          	; BIOS CALL JUMP TABLE
00/00: FF04     	JUMP	BOOT	; 0: BOOT OPERATION
00/01: FF33     	JUMP	INDIR	; 1: INDIRECT JUMP
00/02: FF34     	JUMP	IRET	; 2: INDIRECT RETURN
00/03: FF37     	JUMP	SYSCALL	; 3: SYSTEM CALL (JUMP TO BANK 0 ADDRESS 0X80)
00/04: FF39     	JUMP	PRGM	; 4: PROGRAM FROM DMEM
00/06:          	
00/05:          	
00/05:          	
00/05:          	; KICK OFF THE BOOT SEQUENCE
00/05:          	; START BY SETTING THE CARD TO 8-BIT MODE
00/05:          	; WE MUST WAIT FOR THE CF TO BE READY BEFORE SENDING A COMMAND
00/05: 3807     BOOT:	LOADI	C,@+2
00/06: FF19     	JUMP	CFWAIT
00/07: 3001     	LOADI	A,CF_8BIT
00/08: A0A1     	STORE	[CF_FEAT],A
00/09: 3020     	LOADI	A,CF_SETF
00/0A: A0A7     	STORE	[CF_CMD],A
00/0C:          	
00/0B:          	; NOW DISABLE THE CACHE
00/0B: 380D     	LOADI	C,@+2
00/0C: FF13     	JUMP	CFWAIT
00/0D: 3082     	LOADI	A,CF_DCAC
00/0E: A0A1     	STORE	[CF_FEAT],A
00/0F: 3020     	LOADI	A,CF_SETF
00/10: A0A7     	STORE	[CF_CMD],A
00/12:          	
00/11:          	; PUNCH IN THE ADDRESS OF THE MBR
00/11:          	; (MASTER BOOT RECORD)
00/11: 3400     	LOADI	B,0
00/12: A4A3     	STORE	[CF_LBA0],B
00/13: A4A4     	STORE	[CF_LBA1],B
00/14: A4A5     	STORE	[CF_LBA2],B
00/16:          	
00/15:          	; THE TOP 3 BITS OF LBA3 MUST BE '1' TO INDICATE LBA MODE
00/15: 30E0     	LOADI	A,0XE0
00/16: A0A6     	STORE	[CF_LBA3],A
00/18:          	
00/17:          	; PUT A '1' IN THE SECTOR COUNT REGISTER
00/17: 3001     	LOADI	A,0X01
00/18: A0A2     	STORE	[CF_CNT],A
00/1A:          	
00/19:          	; SINCE A = 1, LETS SET THE DESTINATION BANKS TOO
00/19: 0000     	BANK	A
00/1A: A080     	STORE	[DBANK],A
00/1C:          	
00/1B:          	; ISSUE A READ COMMAND!
00/1B: 381D     	LOADI	C,@+2
00/1C: FF03     	JUMP	CFWAIT
00/1D: 3020     	LOADI	A,CF_READ
00/1E: A0A7     	STORE	[CF_CMD],A
00/20:          	
00/1F:          	; ...AND WAIT FOR IT TO FINISH
00/1F: 3826     	LOADI	C,CFBOOT
00/21:          
00/20:          	; WAIT FOR THE CF CARD TO BECOME READY
00/20:          	; FOR THIS TO HAPPEN, THE BUSY FLAG MUST BE 0
00/20:          	; AND THE READY FLAG MUST BE 1
00/20:          	; IF A CF CARD ISN'T PRESENT, THIS ROUTINE HANGS
00/20:          	; BUT WE DON'T CARE
00/20:          	; USES: A
00/20: 80A7     CFWAIT:	LOAD	A,[CF_STAT]
00/22:          
00/21:          	; CHECK BIT 7 (BUSY FLAG)
00/21: 4000     	SHIFTL	A
00/23:          	
00/22:          	; GO BACK TO START BUSY
00/22: F0FD     	BRC	CFWAIT
00/24:          	
00/23:          	; CHECK BIT 6 (READY FLAG)
00/23: 4000     	SHIFTL	A
00/25:          	
00/24:          	; GO BACK TO START IF NOT READY
00/24: F1FB     	BRNC	CFWAIT
00/26:          	
00/25:          	; RETURN FROM FUNCTION CALL
00/25: FEDA     	JUMPR	C
00/27:          	
00/26:          	; NOW THE CARD SHOULD BE READY TO SEND BYTES
00/26:          	; WE ARE JUST GOING TO GO OUT ON A LIMB AND
00/26:          	; ASSUME THAT WHATEVER MASTER BOOT RECORD
00/26:          	; WE HAVE BEEN GIVEN IS VALID
00/26:          	; NO USE IN WASTING PRECIOUS INSTRUCTION MEMORY HERE
00/26:          	; SKIP THE FIRST 128 BYTES OF MEMORY
00/26:          	; B SHOULD STILL BE 0 FROM LOADING THE MBR ADDRESS
00/26: 80A0     CFBOOT:	LOAD	A,[CF_DATA]
00/27: 5401     	ADDI	B,1
00/28: F5FD     	BRNN	CFBOOT
00/2A:          	
00/29:          	; NOW WE UNPACK THE DATA SEGMENT
00/29: 3400     	LOADI	B,0
00/2A: 80A0     0:	LOAD	A,[CF_DATA]
00/2B: B100     	STOREF	[B],A
00/2C: 5401     	ADDI	B,1
00/2D: F5FC     	BRNN	0B
00/2F:          	
00/2E:          	; FINALLY, WE DO THE INSTRUCTION SEGMENT
00/2E: 80A0     1:	LOAD	A,[CF_DATA]
00/2F: 1400     	CACHE	A
00/30: 80A0     	LOAD	A,[CF_DATA]
00/31: 1600     	WRITE	[B],A
00/32: 5401     	ADDI	B,1
00/33: F4FA     	BRN	1B
00/35:          	
00/34:          	; NOW WE JUMP TO THE LOADED PROGRAM AND HOPE FOR THE BEST!
00/34: FF4B     	JUMP	0X80
00/36:          	
00/35:          	; INDIRECT JUMP
00/35:          	; JUMPS TO A SPECIFIC ADDRESS ON A SPECIFIC BANK
00/35:          	; B = DESTINATION ISR BANK
00/35:          	; C = DESTINATION ADDRESS
00/35:          	; USES: NONE
00/35: 0400     INDIR:	BANK	B
00/36: FEC9     	JUMPR	C
00/38:          	
00/37:          	; INDIRECT RETURN
00/37:          	; JUMPS TO AN BANK / ADDRESS PAIR FOUND IN THE STACK
00/37:          	; [D] = RETURN ADDRESS
00/37:          	; [D+1] = RETURN ISR BANK
00/37:          	; USES: C
00/37: 9B01     IRET:	LOADF	C,[D+1]
00/38: 0800     	BANK	C
00/39: 9B00     	LOADF	C,[D]
00/3A: FEC5     	JUMPR	C
00/3C:          	
00/3B:          	; SYSTEM CALL
00/3B:          	; JUMPS TO ADDRESS 0X80 ON ISR BANK 0
00/3B:          	; USES: C
00/3B: 3800     SYSCALL:LOADI	C,0
00/3C: 0800     	BANK	C
00/3D: FF42     	JUMP	0X80
00/3F:          
00/3E:          	; THIS ROUTINE WILL TAKE 2 PAGES FROM DATA MEMORY
00/3E:          	; AND WRITE THEM INTO A BANK OF INSTRUCTION MEMORY
00/3E:          	; RETURNS WITH DATA BANK ON 0
00/3E:          	; A = DESTINATION ISR BANK
00/3E:          	; B = SOURCE DATA BANK
00/3E:          	; C = RETURN ADDRESS
00/3E:          	; D = RETURN ISR BANK
00/3E:          	; USES: BYTE 0X7E-0X7F OF BANK 0, A, B, C, D
00/3E: 0000     PRGM:	BANK	A
00/3F: 3000     	LOADI	A,0
00/40: A080     	STORE	[DBANK],A
00/41: A87E     	STORE	[0X7E],C
00/42: AC7F     	STORE	[0X7F],D
00/44:          	
00/43:          	; COPY OVER THE DATA
00/43:          	; CRAZY REGISTER SHIT
00/43: 3C80     	LOADI	D,0X80
00/44: A480     0:	STORE	[DBANK],B
00/45: 3800     	LOADI	C,0
00/46: 9200     1:	LOADF	A,[C]
00/47: 1400     	CACHE	A
00/48: 9201     	LOADF	A,[C+1]
00/49: C900     	SHIFTR	C
00/4A: 4B00     	ADD	C,D
00/4B: 1A00     	WRITE	[C],A
00/4C: 6B00     	SUB	C,D
00/4D: 4A00     	SHIFTL	C
00/4E: 5802     	ADDI	C,2
00/4F: F5F6     	BRNN	1B
00/51:          	
00/50:          	; WE REACHED THE END OF A DATA BANK
00/50:          	; MOVE ON TO THE NEXT?
00/50: 5401     	ADDI	B,1
00/51: 5C40     	ADDI	D,0X40
00/52: F4F1     	BRN	0B
00/54:          	
00/53:          	; NOPE, WE ARE DONE
00/53: 3000     	LOADI	A,0
00/54: A080     	STORE	[DBANK],A
00/55: 887E     	LOAD	C,[0X7E]
00/56: 8C7F     	LOAD	D,[0X7F]
00/57: 0C00     	BANK	D
00/58: FEA7     	JUMPR	C
00/5A:          
00/59:          	; HALT AT THE END OF THE ROM
00/59:          .ORG	0x7F
