00/00:          ; BIOS.S
01/00:          ; STANDARD BIOS FOR COMPACT FLASH BOOT
01/00:          ; PLUS STANDARD CALLS
01/00:          
01/00:          ; DEFINES
01/00:          DBANK	=	0X80	; DATA BANK ADDRESS 
01/00:          CF	=	0XA0	; COMPACT FLASH BASE ADDRESS
01/00:          CF_DATA	=	CF+0X00	; CF DATA
01/00:          CF_ERR	=	CF+0X01	; CF ERROR
01/00:          CF_FEAT	=	CF+0x01	; CF FEATURES
01/00:          CF_CNT	=	CF+0X02	; CF SECTOR COUNT
01/00:          CF_LBA0	=	CF+0X03	; CF LBA BITS 0-7
01/00:          CF_LBA1	=	CF+0X04	; CF LBA BITS 8-15
01/00:          CF_LBA2	=	CF+0X05	; CF LBA BITS 16-23
01/00:          CF_LBA3	=	CF+0X06	; CF LBA BITS 24-27
01/00:          CF_STAT	=	CF+0X07	; CF STATUS
01/00:          CF_CMD	=	CF+0X07	; CF COMMAND
01/00:          
01/00:          CF_8BIT	=	0X01	; 8 BIT MODE
01/00:          CF_DCAC	=	0X82	; DISABLE CACHE
01/00:          
01/00:          CF_READ	=	0X20	; READ COMMAND
01/00:          CF_SETF	=	0X20	; SET FEATURE COMMAND
01/00:          
01/00:          .BANK 0
00/00:          .TEXT
00/00:          
00/00:          	; SYSTEM CALL JUMP TABLE
00/00: FF02     	JUMP	BOOT	; BOOT OPERATION
00/01: FF31     	JUMP	INDIR	; INDIRECT JUMP
00/02: FF32     	JUMP	PRGM	; PROGRAM FROM DMEM
00/04:          	
00/03:          
00/03:          
00/03:          	; KICK OFF THE BOOT SEQUENCE
00/03:          	; START BY SETTING THE CARD TO 8-BIT MODE
00/03:          	; WE MUST WAIT FOR THE CF TO BE READY BEFORE SENDING A COMMAND
00/03: 3805     BOOT:	LOADI	C,@+2
00/04: FF19     	JUMP	CFWAIT
00/05: 3001     	LOADI	A,CF_8BIT
00/06: A0A1     	STORE	[CF_FEAT],A
00/07: 3020     	LOADI	A,CF_SETF
00/08: A0A7     	STORE	[CF_CMD],A
00/0A:          	
00/09:          	; NOW DISABLE THE CACHE
00/09: 380B     	LOADI	C,@+2
00/0A: FF13     	JUMP	CFWAIT
00/0B: 3082     	LOADI	A,CF_DCAC
00/0C: A0A1     	STORE	[CF_FEAT],A
00/0D: 3020     	LOADI	A,CF_SETF
00/0E: A0A7     	STORE	[CF_CMD],A
00/10:          	
00/0F:          	; PUNCH IN THE ADDRESS OF THE MBR
00/0F:          	; (MASTER BOOT RECORD)
00/0F: 3400     	LOADI	B,0
00/10: A4A3     	STORE	[CF_LBA0],B
00/11: A4A4     	STORE	[CF_LBA1],B
00/12: A4A5     	STORE	[CF_LBA2],B
00/14:          	
00/13:          	; THE TOP 3 BITS OF LBA3 MUST BE '1' TO INDICATE LBA MODE
00/13: 30E0     	LOADI	A,0XE0
00/14: A0A6     	STORE	[CF_LBA3],A
00/16:          	
00/15:          	; PUT A '1' IN THE SECTOR COUNT REGISTER
00/15: 3001     	LOADI	A,0X01
00/16: A0A2     	STORE	[CF_CNT],A
00/18:          	
00/17:          	; SINCE A = 1, LETS SET THE DESTINATION BANKS TOO
00/17: 0000     	BANK	A
00/18: A080     	STORE	[DBANK],A
00/1A:          	
00/19:          	; ISSUE A READ COMMAND!
00/19: 381B     	LOADI	C,@+2
00/1A: FF03     	JUMP	CFWAIT
00/1B: 3020     	LOADI	A,CF_READ
00/1C: A0A7     	STORE	[CF_CMD],A
00/1E:          	
00/1D:          	; ...AND WAIT FOR IT TO FINISH
00/1D: 3824     	LOADI	C,CFBOOT
00/1F:          
00/1E:          	; WAIT FOR THE CF CARD TO BECOME READY
00/1E:          	; FOR THIS TO HAPPEN, THE BUSY FLAG MUST BE 0
00/1E:          	; AND THE READY FLAG MUST BE 1
00/1E:          	; IF A CF CARD ISN'T PRESENT, THIS ROUTINE HANGS
00/1E:          	; BUT WE DON'T CARE
00/1E:          	; USES: A
00/1E: 80A7     CFWAIT:	LOAD	A,[CF_STAT]
00/20:          
00/1F:          	; CHECK BIT 7 (BUSY FLAG)
00/1F: 4000     	SHIFTL	A
00/21:          	
00/20:          	; GO BACK TO START BUSY
00/20: F0FD     	BRC	CFWAIT
00/22:          	
00/21:          	; CHECK BIT 6 (READY FLAG)
00/21: 4000     	SHIFTL	A
00/23:          	
00/22:          	; GO BACK TO START IF NOT READY
00/22: F1FB     	BRNC	CFWAIT
00/24:          	
00/23:          	; RETURN FROM FUNCTION CALL
00/23: FEDC     	JUMPR	C
00/25:          	
00/24:          	; NOW THE CARD SHOULD BE READY TO SEND BYTES
00/24:          	; WE ARE JUST GOING TO GO OUT ON A LIMB AND
00/24:          	; ASSUME THAT WHATEVER MASTER BOOT RECORD
00/24:          	; WE HAVE BEEN GIVEN IS VALID
00/24:          	; NO USE IN WASTING PRECIOUS INSTRUCTION MEMORY HERE
00/24:          	; SKIP THE FIRST 128 BYTES OF MEMORY
00/24:          	; B SHOULD STILL BE 0 FROM LOADING THE MBR ADDRESS
00/24: 80A0     CFBOOT:	LOAD	A,[CF_DATA]
00/25: 5401     	ADDI	B,1
00/26: F4FD     	BRN	CFBOOT
00/28:          	
00/27:          	; NOW WE UNPACK THE DATA SEGMENT
00/27: 3400     	LOADI	B,0
00/28: 80A0     0:	LOAD	A,[CF_DATA]
00/29: B100     	STOREF	[B],A
00/2A: 5401     	ADDI	B,1
00/2B: F5FC     	BRNN	0B
00/2D:          	
00/2C:          	; FINALLY, WE DO THE INSTRUCTION SEGMENT
00/2C: 80A0     1:	LOAD	A,[CF_DATA]
00/2D: 1400     	CACHE	A
00/2E: 80A0     	LOAD	A,[CF_DATA]
00/2F: 1600     	WRITE	[B],A
00/30: 5401     	ADDI	B,1
00/31: F4FA     	BRN	1B
00/33:          	
00/32:          	; AND WE JUMP TO LOADED PROGRAM AND HOPE FOR THE BEST!
00/32: FF4D     	JUMP	0X80
00/34:          	
00/33:          	; INDIRECT JUMP
00/33:          	; JUMPS TO A SPECIFIC ADDRESS ON A SPECIFIC PAGE
00/33:          	; B = DESTINATION ISR PAGE
00/33:          	; C = DESTINATION ADDRESS
00/33:          	; USES: NONE
00/33: 0400     INDIR:	BANK	B
00/34: FECB     	JUMPR	C
00/36:          
00/35:          	; THIS ROUTINE WILL TAKE 2 PAGES FROM DATA MEMORY
00/35:          	; AND WRITE THEM INTO A PAGE OF INSTRUCTION MEMORY
00/35:          	; RETURNS WITH DATA PAGE ON 0
00/35:          	; A = DESTINATION ISR PAGE
00/35:          	; B = SOURCE DATA PAGE
00/35:          	; C = RETURN ADDRESS
00/35:          	; D = RETURN ISR PAGE
00/35:          	; USES: BYTE 0X7E-0X7F OF PAGE 0
00/35: 0000     PRGM:	BANK	A
00/36: 3000     	LOADI	A,0
00/37: A080     	STORE	[DBANK],A
00/38: A87E     	STORE	[0X7E],C
00/39: AC7F     	STORE	[0X7F],D
00/3B:          	
00/3A:          	; COPY OVER THE DATA
00/3A:          	; CRAZY REGISTER SHIT
00/3A: 3C80     	LOADI	D,0X80
00/3B: A480     0:	STORE	[DBANK],B
00/3C: 3800     	LOADI	C,0
00/3D: 9200     1:	LOADF	A,[C]
00/3E: 1400     	CACHE	A
00/3F: 9201     	LOADF	A,[C+1]
00/40: C900     	SHIFTR	C
00/41: 4B00     	ADD	C,D
00/42: 1A00     	WRITE	[C],A
00/43: 6B00     	SUB	C,D
00/44: 4A00     	SHIFTL	C
00/45: 5802     	ADDI	C,2
00/46: F5F6     	BRNN	1B
00/48:          	
00/47:          	; WE REACHED THE END OF A DATA BANK
00/47:          	; MOVE ON TO THE NEXT?
00/47: 5401     	ADDI	B,1
00/48: 5C40     	ADDI	D,0X40
00/49: F4F1     	BRN	0B
00/4B:          	
00/4A:          	; NOPE, WE ARE DONE
00/4A: 3000     	LOADI	A,0
00/4B: A080     	STORE	[DBANK],A
00/4C: 887E     	LOAD	C,[0X7E]
00/4D: 8C7F     	LOAD	D,[0X7F]
00/4E: 0C00     	BANK	D
00/4F: FEB0     	JUMPR	C
00/51:          
00/50:          	; HALT AT THE END OF THE ROM
00/50:          .ORG	0x7F
