; MONITOR.S
; PUNY MEMORY MONITOR

; DEFINES
DBANK	= 0X80		; DATA BANK ADDRESS
UART	= 0X90		; UART BASE ADDRESS
UART_RH	= UART+0X00	; UART READ HOLDING
UART_TH	= UART+0X00	; UART TRANSMIT HOLDING
UART_DL = UART+0X00	; UART DIVISOR LOW
UART_DH = UART+0X01	; UART DIVISOR HIGH
UART_LC = UART+0X03	; UART LINE CONTROL
UART_LS	= UART+0X05	; UART LINE STATUS
SCRATCH	= UART+0X07	; SCRATCH BYTE ADDRESS

.BANK 0
.TEXT
	; SET UP THE UART
	; WE WILL DO 9600 BAUD 8N1 
INIT:	LOADI	A,0X80
	STORE	[UART_LC],A
	
	; DIVISOR = 12
	LOADI	A,12
	STORE	[UART_DL],A
	LOADI	A,0
	STORE	[UART_DH],A
	
	; SET 8-BIT, 1 STOP, RESET DLAB
	LOADI	A,0X03
	STORE	[UART_LC],A

	; SEND OUT A PROMPT
START:	LOADI	A,0X0A
	LOADI	C,@+2
	JUMP	SCHAR
	LOADI	A,0X0D
	LOADI	C,@+2
	JUMP	SCHAR
	LOADI	A,'@'
	LOADI	C,@+2
	JUMP	SCHAR
	
	; GET A HEX NUMBER
	LOADI	C,@+2
	JUMP	FROMHEX
	LOADI	C,@+2
	JUMP	FROMHEX
	
	; GET COMMAND
	LOADI	C,@+2
	JUMP	GCHAR
	SUBI	A,'-'
	BRZ	ISR
	SUBI	A,'/'-'-'
	BRZ	DATA
	SUBI	A,'B'-'/'
	BRZ	SBANK
	SUBI	A,'G'-'B'
	BRNZ	START
	MOV	C,D
	JUMPR	C
	
	; SET THE BANK
SBANK:	BANK	D
	STORE	[DBANK],D
	JUMP	START

	; EDIT DATA BYTE
DATA:	STORE	[SCRATCH],D
	LOADF	D,[D]
	
	; PRINT IT OUT
	LOADI	C,@+2
	JUMP	TOHEX
	LOADI	C,@+2
	JUMP	TOHEX
	
	; GET A HEX NUMBER
	LOADI	C,@+2
	JUMP	FROMHEX
	LOADI	C,@+2
	JUMP	FROMHEX
	
	; PUT IT INTO MEMORY
	LOAD	A,[SCRATCH]
	STOREF	[A],D
	JUMP	START
	
	; EDIT ISR WORD
ISR:	STORE	[SCRATCH],D

	; GET A HEX NUMBER
	LOADI	C,@+2
	JUMP	FROMHEX
	LOADI	C,@+2
	JUMP	FROMHEX
	
	; CACHE IT
	MOV	A,D
	CACHE	A
	
	; GET A HEX NUMBER
	LOADI	C,@+2
	JUMP	FROMHEX
	LOADI	C,@+2
	JUMP	FROMHEX
	
	; WRITE IT
	MOV	A,D
	LOAD	D,[SCRATCH]
	WRITE	[D+0],A
	JUMP	START
	


	; GET CHARACTER
	; TYPED CHARACTER RETURNED IN A
	; USES: A
GCHAR:	LOAD	A,[UART_LS]

	; CHECK 0TH BIT OF LINE STATUS
	SHIFTR	A
	BRNC	GCHAR
	
	; RECIEVE CHARACTER
	LOAD	A,[UART_RH]
	
	; CONVERT TO UPPER CASE
	ADDI	A,0X20
	BRNN	0F
	SUBI	A,0X20
0:	SUBI	A,0X20
	
	; NOW, ECHO CHARACTER
	JUMP COUT

	; SEND CHARACTER
	; A = CHARACTER TO SEND
	; USES: A, B
SCHAR:	LOAD	B,[UART_LS]
	
	; CHECK 5TH BIT OF LINE STATUS
	SHIFTL	B
	SHIFTL	B
	SHIFTL	B
	BRNC	SCHAR
	
	; TRANSMIT CHARACTER
COUT:	STORE	[UART_TH],A
	
	; RETURN
	JUMPR	C
	
	; CONVERTS ASCII HEX INTO HALF A BYTE
	; A = BYTE TO CONVERT
	; RETURNS D=D<<4 + HEX(A)
	; USES: A, B, D
FROMHEX:MOV	B,C
	LOADI	C,@+2
	JUMP	GCHAR
	MOV	C,B
	
	; D=D<<4
	SHIFTL	D
	SHIFTL	D
	SHIFTL	D
	SHIFTL	D
	
	LOADI	B,'0'
	CMP	A,B
	BRB	START
	LOADI	B,'9'
	CMP	A,B
	BRA	0F
	SUBI	A,'0'
	ADD	D,A
	JUMPR	C
	
0:	LOADI	B,'A'
	CMP	A,B
	BRB	START
	LOADI	B,'F'
	CMP	A,B
	BRA	START
	SUBI	A,'A'-10
	ADD	D,A
	JUMPR	C
	
	; CONVERT HALF A BYTE INTO ASCII HEX
	; D[7:4] = NYBBLE TO CONVERT
	; RETURNS D=D<<4 AND ASCII IN A
	; USES: A, B, D
TOHEX:	LOADI	A,0XF0

	; SHIFT LAST 4 BITS OF D INTO FIRST 4 BITS OF A
0:	SHIFTL	D
	BRC	1F
	SHIFTL	A
	BRN	0B
	JUMP	2F
1:	SHIFTL	A
	ADDI	A,1
	BRN	0B
	
	; CONVERT TO ASCII 0..9 / A..F
2:	SUBI	A,10
	BRN	3F
	ADDI	A,'A'
	JUMP	SCHAR
3:	ADDI	A,'0'+10
	JUMP	SCHAR
