; CFDRVR.S
; COMPACT FLASH DRIVER PROGRAM FOR MONITOR
; GAVIN TERSTEEG, 2024
; SDMAY24-14

; DEFINES
DBANK	= 0X80		; DATA BANK ADDRESS 

UART	= 0X90		; UART BASE ADDRESS
UART_RH	= UART+0X00	; UART READ HOLDING
UART_TH	= UART+0X00	; UART TRANSMIT HOLDING
UART_DL = UART+0X00	; UART DIVISOR LOW
UART_DH = UART+0X01	; UART DIVISOR HIGH
UART_LC = UART+0X03	; UART LINE CONTROL
UART_LS	= UART+0X05	; UART LINE STATUS
SCRATCH	= UART+0X07	; SCRATCH BYTE ADDRESS

CF	= 0XA0		; COMPACT FLASH BASE ADDRESS
CF_DATA	= CF+0X00	; CF DATA
CF_ERR	= CF+0X01	; CF ERROR
CF_FEAT	= CF+0x01	; CF FEATURES
CF_CNT	= CF+0X02	; CF SECTOR COUNT
CF_LBA0	= CF+0X03	; CF LBA BITS 0-7
CF_LBA1	= CF+0X04	; CF LBA BITS 8-15
CF_LBA2	= CF+0X05	; CF LBA BITS 16-23
CF_LBA3	= CF+0X06	; CF LBA BITS 24-27
CF_STAT	= CF+0X07	; CF STATUS
CF_CMD	= CF+0X07	; CF COMMAND

CF_8BIT	= 0X01		; 8 BIT MODE
CF_DCAC	= 0X82		; DISABLE CACHE

CF_READ	= 0X20		; READ COMMAND
CF_SETF	= 0XEF		; SET FEATURE COMMAND

RETURN	= 0X00		; MONITOR RETURN VECTOR

	; JUMP TABLE
	JUMP	CFINIT
	
	
	
	; WE MUST WAIT FOR THE CF TO BE READY BEFORE SENDING A COMMAND
CFINIT:	LOADI	C,@+2
	JUMP	CFWAIT

	; THE TOP 3 BITS OF LBA3 MUST BE '1' TO INDICATE LBA MODE
	LOADI	A,0XE0
	STORE	[CF_LBA3],A

	; START BY SETTING THE CARD TO 8-BIT MODE
	LOADI	C,@+2
	JUMP	CFWAIT
	LOADI	A,CF_8BIT
	STORE	[CF_FEAT],A
	LOADI	A,CF_SETF
	STORE	[CF_CMD],A
	LOADI	C,@+2
	JUMP	CFWAIT
	
	; PUNCH IN THE ADDRESS OF THE MBR
	; (MASTER BOOT RECORD)
	LOADI	B,0
	STORE	[CF_LBA0],B
	STORE	[CF_LBA1],B
	STORE	[CF_LBA2],B
	
	; PUT A '1' IN THE SECTOR COUNT REGISTER
	LOADI	A,0X01
	STORE	[CF_CNT],A
	
	; DONE
	JUMP	RETURN
	
	
	
	; WAIT FOR THE CF CARD TO BECOME READY
	; FOR THIS TO HAPPEN, THE BUSY FLAG MUST BE 0
	; AND THE READY FLAG MUST BE 1
	; IF A CF CARD ISN'T PRESENT, THIS ROUTINE HANGS
	; BUT WE DON'T CARE
	; USES: A
CFWAIT:	LOAD	A,[CF_STAT]

	; CHECK BIT 7 (BUSY FLAG)
	SHIFTL	A
	
	; GO BACK TO START BUSY
	BRC	CFWAIT
	
	; CHECK BIT 6 (READY FLAG)
	SHIFTL	A
	
	; GO BACK TO START IF NOT READY
	BRNC	CFWAIT
	
	; RETURN FROM FUNCTION CALL
	JUMPR	C