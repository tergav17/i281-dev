00/00:          ; BOUNCE.S
01/80:          ; A SMALL VT100 TEST PROGRAM
01/80:          
01/80:          ; DEFINES
01/80:          DBANK	=	0X80
01/80:          UART	=	0X90
01/80:          UART_TH	=	UART+0X00
01/80:          UART_RH	=	UART+0X00
01/80:          UART_LC	=	UART+0X03
01/80:          UART_LS	=	UART+0X05
01/80:          
01/80:          
01/80:          ; NUMBER OF BOUNCERS
01/80:          NUM = 	10
01/80:          
01/80:          .BANK 1
01/80:          .TEXT
01/80:          
01/80:          	; START HERE
01/80: 3C39     START:	LOADI	D,HELLO
01/81: 3883     	LOADI	C,@+2
01/82: FF49     	JUMP	PRINT
01/84:          
01/83:          	; UPDATE ALL OF THE BOUNCER POSITIONS
01/83: 3C09     UPDATE:	LOADI	D,NUM-1
01/85:          	
01/84:          	; DO X POSITION FIRST
01/84: 9300     0:	LOADF	A,[D+X]
01/85: 9714     	LOADF	B,[D+DX]
01/86: 7401     	SUBI	B,1
01/87: 4100     	ADD	A,B
01/88: F504     	BRNN	1F
01/8A:          
01/89:          	; UNDERFLOW ON X SIDE
01/89: 3402     	LOADI	B,2
01/8A: B714     	STOREF	[D+DX],B
01/8B: 3001     	LOADI	A,1
01/8C: FF06     	JUMP	2F
01/8E:          	
01/8D: 344F     1:	LOADI	B,79
01/8E: D100     	CMP	A,B
01/8F: F103     	BRB	2F
01/91:          	
01/90:          	; OVERFLOW ON X SIDE
01/90: 3400     	LOADI	B,0
01/91: B714     	STOREF	[D+DX],B
01/92: 304D     	LOADI	A,77
01/94:          	
01/93: B300     2:	STOREF	[D+X],A
01/95:          
01/94:          	; NEXT, Y POSITION
01/94: 930A     	LOADF	A,[D+Y]
01/95: 971E     	LOADF	B,[D+DY]
01/96: 7401     	SUBI	B,1
01/97: 4100     	ADD	A,B
01/98: F504     	BRNN	1F
01/9A:          
01/99:          	; UNDERFLOW ON Y SIDE
01/99: 3402     	LOADI	B,2
01/9A: B71E     	STOREF	[D+DY],B
01/9B: 3001     	LOADI	A,1
01/9C: FF06     	JUMP	2F
01/9E:          	
01/9D: 3418     1:	LOADI	B,24
01/9E: D100     	CMP	A,B
01/9F: F103     	BRB	2F
01/A1:          	
01/A0:          	; OVERFLOW ON Y SIDE
01/A0: 3400     	LOADI	B,0
01/A1: B71E     	STOREF	[D+DY],B
01/A2: 3016     	LOADI	A,22
01/A4:          	
01/A3: B30A     2:	STOREF	[D+Y],A
01/A5:          
01/A4:          	; DO THE NEXT ONE
01/A4: 7C01     	SUBI	D,1
01/A5: F0DE     	BRC	0B
01/A7:          	
01/A6:          	; NOW PRINT 'EM OFF
01/A6:          		
01/A6:          	; CLEAR OUT SCREEN
01/A6: 3C29     	LOADI	D,CLRSTR
01/A7: 38A9     	LOADI	C,@+2
01/A8: FF23     	JUMP	PRINT
01/AA:          	
01/A9:          	; DRAW EACH BOUNCER
01/A9: 3C09     	LOADI	D,NUM-1
01/AA: AC28     DRAW:	STORE	[CURR],D
01/AC:          	
01/AB:          	; CONVERT THE X TO DECIMAL
01/AB: 9700     	LOADF	B,[D+X]
01/AC: 5401     	ADDI	B,1
01/AD: 3030     	LOADI	A,'0'
01/AE: 740A     0:	SUBI	B,10
01/AF: F102     	BRNC	1F
01/B0: 5001     	ADDI	A,1
01/B1: FFFC     	JUMP	0B
01/B2: 543A     1:	ADDI	B,10+'0'
01/B3: A033     	STORE	[ARGX],A
01/B4: A434     	STORE	[ARGX+1],B
01/B6:          	
01/B5:          	; CONVERT THE Y TO DECIMAL
01/B5: 970A     	LOADF	B,[D+Y]
01/B6: 5401     	ADDI	B,1
01/B7: 3030     	LOADI	A,'0'
01/B8: 740A     0:	SUBI	B,10
01/B9: F102     	BRNC	1F
01/BA: 5001     	ADDI	A,1
01/BB: FFFC     	JUMP	0B
01/BC: 543A     1:	ADDI	B,10+'0'
01/BD: A030     	STORE	[ARGY],A
01/BE: A431     	STORE	[ARGY+1],B
01/C0:          	
01/BF:          	; PRINT IT
01/BF: 3C2E     	LOADI	D,PCHAR
01/C0: 38C2     	LOADI	C,@+2
01/C1: FF0A     	JUMP	PRINT
01/C3:          	
01/C2:          	; DO THE NEXT ONE
01/C2: 8C28     	LOAD	D,[CURR]
01/C3: 7C01     	SUBI	D,1
01/C4: F0E5     	BRC	DRAW
01/C6:          	
01/C5:          	; NOW DELAY A LITTLE BIT AND THEN GO BACK
01/C5: 3000     	LOADI	A,0
01/C6: 3414     	LOADI	B,20
01/C7: 5001     0:	ADDI	A,1
01/C8: F7FE     	BRNZ	0B
01/C9: 7401     	SUBI	B,1
01/CA: F7FC     	BRNZ	0B
01/CC:          	
01/CB: FFB7     	JUMP	UPDATE
01/CD:          	
01/CC:          
01/CC:          	; PRINTS OUT A STRING
01/CC:          	; D = STRING TO PRINT
01/CC:          	; USES: A, B, D
01/CC:          	; GET LINE STATUS REGISTER
01/CC:          	; LOAD STRING CHARACTER
01/CC: 9300     PRINT:	LOADF	A,[D]
01/CE:          
01/CD:          	; MAKE SURE IT ISNT ZERO
01/CD: 5000     	ADDI	A,0
01/CE: F60A     	BRZ	1F
01/D0:          	
01/CF:          	; GET LINE STATUS REGISTER
01/CF: 8495     0:	LOAD	B,[UART_LS]
01/D1:          	
01/D0:          	; READ 5TH BIT TO SEE IF WE CAN TRANSMIT YET
01/D0: 4500     	SHIFTL	B
01/D1: 4500     	SHIFTL	B
01/D2: 4500     	SHIFTL	B
01/D3: F1FB     	BRNC	0B
01/D5:          	
01/D4:          	; TRANSMIT BYTE
01/D4: 3403     	LOADI	B,0X03
01/D5: A493     	STORE	[UART_LC],B
01/D6: A090     	STORE	[UART_TH],A
01/D8:          	
01/D7:          	; INCREMENT POINTER AND REDO
01/D7: 5C01     	ADDI	D,1
01/D8: FFF3     	JUMP	PRINT
01/DA:          	
01/D9:          	; RETURN
01/D9: FE26     1:	JUMPR	C
01/DB:          
01/DA:          
01/DA:          .DATA
01/DA:          
01/00:          ; BOUNCER POSITION AND SPEED
01/00: 4D171F30
       16091208
       042F     .DEFL BYTE X	77,23,31,48,22,9,18,8,4,47
01/0A: 16030910
       15140D02
       0805     .DEFL BYTE Y	22,3,9,16,21,20,13,2,8,5
01/14: 02000000
       02020202
       0000     .DEFL BYTE DX	2,0,0,0,2,2,2,2,0,0
01/1E: 02000000
       02020000
       0202     .DEFL BYTE DY	2,0,0,0,2,2,0,0,2,2
01/28:          
01/28:          ; CURRENT BOUNCER BEING PROCESSED
01/28: 00       .DEFL BYTE CURR		0
01/29:          
01/29:          ; VARIOUS STRINGS
01/29: 1B5B324A
       00       .DEFL BYTE CLRSTR	0X1B,"[2J",0
01/2E: 1B5B     .DEFL BYTE PCHAR	0X1B,"["
01/30: 30303B   .DEFL BYTE ARGY		"00;"
01/33: 303048   .DEFL BYTE ARGX		"00H"
01/36: 3A3300   .DEFL BYTE CHAR		":3",0
01/39:          
