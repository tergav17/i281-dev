00/00:          ; MERGE.S
01/80:          ; MERGE SORT WITH RECURSIVE SUBROUTINES AND STACK
01/80:          
01/80:          ; DEFINES
01/80:          ARRSIZE	=	8	; ARRAY SIZE
01/80:          RETURN	=	0	; RETURN ADDRESS
01/80:          LEFT	=	1	; LEFT INDEX
01/80:          MIDDLE	=	2	; MIDDLE INDEX
01/80:          RIGHT	=	3	; RIGHT INDEX
01/80:          
01/80:          
01/80:          .TEXT
01/80:          	; START HERE
01/80:          START:
01/80:          	; BEGIN BY SETTING "STACK POINTER" (REG D)
01/80: 3C17     	LOADI	D,0X17
01/82:          
01/81:          	; LOAD ARGUMENTS FOR INITIAL MERGE SORT
01/81:          	; A = LEFT INDEX
01/81: 3000     	LOADI	A,ARRAY
01/83:          	; B = RIGHT INDEX
01/82: 3407     	LOADI	B,ARRAY+(ARRSIZE-1)
01/84:          	
01/83:          	; EXECUTE FUNCTION CALL
01/83:          	; THE RETURN ADDRESS MUST BE PLACED ON THE STACK
01/83:          	; '@' SYMBOL REPRESENTS THE CURRENT PC
01/83: 3886     	LOADI	C,@+3
01/84: BB00     	STOREF	[D+RETURN],C
01/85: FF01     	JUMP	MERGE
01/87:          	
01/86:          	; AND HALT...
01/86: FFFF     END:	JUMP	END
01/88:          
01/87:          	; MERGE FUNCTION CALL
01/87:          	; A = LEFT INDEX
01/87:          	; B = RIGHT INDEX
01/87:          	; RETURNS: NOTHING
01/87:          MERGE:
01/87:          	; ALLOCATE SPACE ON THE STACK FOR LOCAL VARIABLES (4 BYTES)
01/87:          	; D + 0 = FRAME RETURN ADDRESS
01/87:          	; D + 1 = LEFT INDEX
01/87:          	; D + 2 = RIGHT INDEX
01/87:          	; D + 3 = MIDDLE INDEX
01/87:          	; D + 4 = FRAME RETURN ADDRESS (PREVIOUS FRAME)
01/87: 7C04     	SUBI	D,4
01/89:          	
01/88:          	; START BY COMPARING LEFT INDEX TO RIGHT INDEX
01/88: D100     	CMP	A,B
01/8A:          	
01/89:          	; IF A >= B, JUST RETURN INSTANTLY
01/89: F030     	BRAE	9F
01/8B:          	
01/8A:          	; CALCULATE C = (A + B) / 2
01/8A: 2800     	MOV	C,A
01/8B: 4900     	ADD	C,B
01/8C: C900     	SHIFTR	C
01/8E:          	
01/8D:          	; PLACE REGISTERS INTO THE STACK
01/8D: B301     	STOREF	[D+LEFT],A
01/8E: B703     	STOREF	[D+RIGHT],B
01/8F: BB02     	STOREF	[D+MIDDLE],C
01/91:          	
01/90:          	; CALL MERGESORT ON LEFT -> MIDDLE
01/90:          	; A = LEFT INDEX
01/90:          	; B = MIDDLE INDEX
01/90: 2600     	MOV	B,C
01/92:          	
01/91:          	; EXECUTE FUNCTION CALL
01/91:          	; THE RETURN ADDRESS MUST BE PLACED ON THE STACK
01/91: 3894     	LOADI	C,@+3
01/92: BB00     	STOREF	[D+RETURN],C
01/93: FFF3     	JUMP	MERGE
01/95:          	
01/94:          	; NOW MERGESORT MIDDLE + 1 -> RIGHT
01/94:          	; A = MIDDLE + 1 INDEX
01/94:          	; B = RIGHT INDEX
01/94: 9302     	LOADF	A,[D+MIDDLE]
01/95: 5001     	ADDI	A,1
01/96: 9703     	LOADF	B,[D+RIGHT]
01/98:          	
01/97:          	; EXECUTE FUNCTION CALL
01/97:          	; THE RETURN ADDRESS MUST BE PLACED ON THE STACK
01/97: 389A     	LOADI	C,@+3
01/98: BB00     	STOREF	[D+RETURN],C
01/99: FFED     	JUMP	MERGE
01/9B:          	
01/9A:          	; NOW THAT'S OUT OF THE WAY
01/9A:          	; LETS MERGE THE TWO SUB-ARRAYS TOGETHER
01/9A:          	; FIRST SEE IF THE DIRECT MERGE IS ALREADY SORTED
01/9A: 9B02     	LOADF	C,[D+MIDDLE]
01/9B: 9200     	LOADF	A,[C]
01/9C: 9601     	LOADF	B,[C+1]
01/9D: D100     	CMP	A,B
01/9E: FD1B     	BRLE	9F
01/A0:          
01/9F:          	; ALRIGHT, MERGE TIME
01/9F:          	; LEFT <= MID
01/9F: 9301     0:	LOADF	A,[D+LEFT]
01/A0: 9702     	LOADF	B,[D+MIDDLE]
01/A1: D100     	CMP	A,B
01/A2: FA17     	BRG	9F
01/A4:          	
01/A3:          	; MID+1 <= RIGHT
01/A3: 5401     	ADDI	B,1
01/A4: 9B03     	LOADF	C,[D+RIGHT]
01/A5: D600     	CMP	B,C
01/A6: FA13     	BRG	9F
01/A8:          	
01/A7:          	; ARRAY[LEFT] <= ARRAY[MID+1]
01/A7: 9000     	LOADF	A,[A]
01/A8: 9900     	LOADF	C,[B]
01/A9: D200     	CMP	A,C
01/AB:          	
01/AA:          	; IF SO, ONLY INCREMENT LEFT
01/AA: FD0B     	BRLE	3F
01/AC:          	
01/AB:          	; MERGE THE VALUE IN C IN BYTE SHIFTING THE ARRAY ELEMENTS OVER
01/AB:          	; REMEMBER, C = ARRAY[MID+1], B = MID+1
01/AB: 9301     1:	LOADF	A,[D+LEFT]
01/AC: D100     	CMP	A,B
01/AD: F604     	BRE	2F
01/AE: 7401     	SUBI	B,1
01/AF: 9100     	LOADF	A,[B]
01/B0: B101     	STOREF	[B+1],A
01/B1: FFF9     	JUMP	1B
01/B3:          
01/B2:          	; LOOP COMPLETE
01/B2: B800     2:	STOREF	[A],C
01/B4:          
01/B3:          	; MIDDLE++
01/B3: 9302     	LOADF	A,[D+MIDDLE]
01/B4: 5001     	ADDI	A,1
01/B5: B302     	STOREF	[D+MIDDLE],A
01/B7:          	
01/B6:          3:	; LEFT++
01/B6: 9301     	LOADF	A,[D+LEFT]
01/B7: 5001     	ADDI	A,1
01/B8: B301     	STOREF	[D+LEFT],A
01/B9: FFE5     	JUMP	0B
01/BB:          	
01/BA:          	; RETURN FUNCTION
01/BA:          	; POP EVERYTHING OFF THE STACK
01/BA:          	; AND JUMPR TO THE PREVIOUS FRAME
01/BA: 5C04     9:	ADDI	D,4
01/BB: 9B00     	LOADF	C,[D+RETURN]
01/BC: FE43     	JUMPR	C
01/BE:          
01/BD:          ; DATA SEGMENT
01/BD:          .DATA
01/00: 07060504
       03020100 .DEFL BYTE ARRAY	7, 6, 5, 4, 3, 2, 1, 0
